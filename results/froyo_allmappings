Permission:android.permission.CHANGE_WIFI_STATE
168 Callers:
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.INetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WifiService: boolean setWifiApEnabledBlocking(boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.WifiService: boolean access$2100(com.android.server.WifiService,boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.NetworkManagementService: void stopAccessPoint()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint()> ()
<android.os.INetworkManagementService$Stub: void stopAccessPoint()> (2)
<android.os.INetworkManagementService: void stopAccessPoint()> (2)
<com.android.server.WifiService: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService: void access$600(com.android.server.WifiService,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.WifiService: void enforceChangePermission()> (13)
<com.android.server.WifiService: boolean disableNetwork(int)> (2)
<com.android.server.WifiService: boolean disconnect()> (2)
<com.android.server.WifiService: boolean enableNetwork(int,boolean)> (2)
<com.android.server.WifiService: boolean pingSupplicant()> (2)
<com.android.server.WifiService: boolean reassociate()> (2)
<com.android.server.WifiService: boolean reconnect()> (2)
<com.android.server.WifiService: boolean removeNetwork(int)> (3)
<com.android.server.WifiService: boolean saveConfiguration()> (2)
<com.android.server.WifiService: boolean setNumAllowedChannels(int,boolean)> (2)
<com.android.server.WifiService: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> (3)
<com.android.server.WifiService: boolean startScan(boolean)> (2)
<com.android.server.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean disableNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disconnect()> ()
<android.net.wifi.IWifiManager$Stub: boolean disconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean enableNetwork(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean pingSupplicant()> ()
<android.net.wifi.IWifiManager$Stub: boolean pingSupplicant()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean reassociate()> ()
<android.net.wifi.IWifiManager$Stub: boolean reassociate()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean reconnect()> ()
<android.net.wifi.IWifiManager$Stub: boolean reconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean removeNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean saveConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: boolean saveConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setNumAllowedChannels(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setNumAllowedChannels(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setWifiEnabled(boolean)> (2)
<com.android.server.WifiService: void startWifi()> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean startScan(boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean startScan(boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: boolean disconnect()> (1)
<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.IWifiManager: boolean pingSupplicant()> (1)
<android.net.wifi.IWifiManager: boolean reassociate()> (1)
<android.net.wifi.IWifiManager: boolean reconnect()> (1)
<android.net.wifi.IWifiManager: boolean removeNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean saveConfiguration()> (1)
<android.net.wifi.IWifiManager: boolean setNumAllowedChannels(int,boolean)> (1)
<android.net.wifi.IWifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (1)
<android.net.wifi.IWifiManager: boolean setWifiEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<android.net.wifi.IWifiManager: boolean startScan(boolean)> (2)
<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.WifiManager: boolean disableNetwork(int)> (3)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: boolean disconnect()> (1)
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> (5)
<android.net.wifi.WifiManager: boolean pingSupplicant()> ()
<android.net.wifi.WifiManager: boolean reassociate()> ()
<android.net.wifi.WifiManager: boolean reconnect()> (1)
<android.net.wifi.WifiManager: boolean removeNetwork(int)> (1)
<android.net.wifi.WifiManager: boolean saveConfiguration()> (1)
<android.net.wifi.WifiManager: boolean setNumAllowedChannels(int,boolean)> (3)
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (4)
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> (11)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<android.net.wifi.WifiManager: boolean startScanActive()> (1)
<android.net.wifi.WifiManager: boolean startScan()> ()
<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.WifiStateTracker: boolean wifiManagerDisableNetwork(int)> (1)
<com.android.settings.wifi.WifiAPITest$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiAPITest: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.settings.wifi.WifiAPITest$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: void connect(int)> (3)
<com.android.settings.wifi.WifiSettings: void enableNetworks()> (3)
<com.android.settings.wifi.WifiSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiSettings: void forget(int)> (2)
<com.android.settings.wifi.WifiSettings: void saveNetworks()> (3)
<com.android.internal.telephony.MccTable: void setWifiChannelsFromMcc(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (3)
<com.android.settings.wifi.AdvancedSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiApSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> (1)
<com.android.development.Connectivity$5: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$6: void onClick(android.view.View)> (1)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<android.net.wifi.WifiStateTracker: void notifySupplicantLost()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> (2)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.NetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<android.net.wifi.WifiMonitor$MonitorThread: void run()> (2)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<android.net.wifi.WifiMonitor: void startMonitoring()> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.wifi.WifiStateTracker: void startEventLoop()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<com.android.server.WifiService: boolean setWifiEnabledBlocking(boolean,boolean,int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<com.android.server.WifiService: boolean access$1600(com.android.server.WifiService,boolean,boolean,int)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.SET_ANIMATION_SCALE
17 Callers:
<com.android.server.WindowManagerService: void setAnimationScale(int,float)> (2)
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)> ()
<android.view.IWindowManager$Stub: void setAnimationScale(int,float)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void setAnimationScale(int,float)> (3)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am: void runInstrument()> (1)
<com.android.development.DevelopmentSettings$AnimationScaleSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.spare_parts.SpareParts: void writeAnimationPreference(int,java.lang.Object)> (1)
<com.android.commands.am.Am: void run(java.lang.String[])> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.server.WindowManagerService: void setAnimationScales(float[])> (2)
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])> ()
<android.view.IWindowManager$Stub: void setAnimationScales(float[])> (2)
<android.view.IWindowManager: void setAnimationScales(float[])> (2)
<com.android.settings.DisplaySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
Permission:android.permission.READ_SMS
326 Callers:
<com.android.mms.transaction.RetrieveTransaction: boolean isDuplicateMessage(android.content.Context,com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> (4)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> (2)
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,com.android.mms.data.ContactList)> (2)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri)> (7)
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)> (2)
<com.android.mms.data.Conversation: long ensureThreadId()> (5)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (3)
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,com.google.android.mms.pdu.NotificationInd)> (4)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> (1)
<com.android.mms.ui.ComposeMessageActivity: void forwardMessage(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftMmsMessage(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (3)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$400(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (1)
<com.android.mms.ui.MessageUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$3100(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void access$500(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity$21: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSlideshow()> (2)
<com.android.mms.ui.MessageUtils: void viewMmsMessageAttachment(android.content.Context,com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(int,boolean)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.MessageUtils$2$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4700(com.android.mms.ui.ComposeMessageActivity,int,boolean)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.ComposeMessageActivity$20: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (1)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity: void checkPendingNotification()> (2)
<com.android.mms.ui.ComposeMessageActivity: void access$5400(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onUserInteraction()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$28: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStart()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity$18: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$25: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.util.DraftCache: void rebuildCache()> (1)
<com.android.mms.util.DraftCache: void access$000(com.android.mms.util.DraftCache)> (1)
<com.android.mms.util.DraftCache$1: void run()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> (3)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.MessageItem: void interpretFrom(com.google.android.mms.pdu.EncodedStringValue,android.net.Uri)> (1)
<com.android.mms.ui.MessageUtils: void handleReadReport(android.content.Context,long,int,java.lang.Runnable)> (1)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (3)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem access$500(com.android.mms.ui.ComposeMessageActivity,java.lang.String,long,boolean)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (4)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getNewMessageNotificationInfo(java.lang.String,java.lang.String,android.content.Context,int,java.lang.String,long,long,int)> (2)
<com.android.mms.ui.ConversationList: void createNewMessage()> (2)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.drm.DrmUtils: android.net.Uri insert(android.content.Context,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.MediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (7)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (6)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getGenericMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILMediaElement,com.google.android.mms.pdu.PduPart,com.android.mms.model.RegionModel)> (2)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,int,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getRegionMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILRegionMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduPart)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> (2)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.mms.data.Conversation: void cacheAllThreads(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$800(android.content.Context)> (1)
<com.android.mms.data.Conversation$2: void run()> (1)
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.transaction.MessagingNotification: int getDownloadFailedMessageCount(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void updateDownloadFailedNotification(android.content.Context)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context)> (2)
<com.android.mms.data.Conversation$1: void run()> (1)
<com.android.mms.data.Conversation: void startQueryForAll(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList: void startAsyncQuery()> (3)
<com.android.mms.ui.ConversationList: void access$000(com.android.mms.ui.ConversationList)> (2)
<com.android.mms.ui.ConversationList: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ConversationList: void onStart()> (2)
<com.android.mms.ui.ConversationList$1: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ConversationListAdapter$OnContentChangedListener: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationListAdapter: void onContentChanged()> (1)
<com.android.mms.transaction.PushReceiver: boolean isDuplicateNotification(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.transaction.PushReceiver: boolean access$100(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.ui.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.Map getMmsReportStatus()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean copyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.transaction.RetryScheduler: int getResponseStatus(long)> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (10)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (2)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (4)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (3)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.ui.ComposeMessageActivity$PduBodyCache: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (4)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: java.lang.String getDrmMimeType(long)> (3)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3400(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2600(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$2700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3600(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.util.RateController: boolean isLimitSurpassed()> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.data.Conversation: boolean loadFromThreadId(long,boolean)> (1)
<com.android.mms.data.Conversation: void <init>(android.content.Context,long,boolean)> (2)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)> (3)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportRequests()> (1)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> (2)
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)> (2)
<com.android.mms.data.Conversation: void startQueryHaveLockedMessages(android.content.AsyncQueryHandler,long,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void confirmDeleteThread(long)> (1)
<com.android.mms.ui.ConversationList: void confirmDeleteThread(long,android.content.AsyncQueryHandler)> (3)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList$6: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,long,java.lang.StringBuilder)> (1)
<com.android.mms.transaction.MessagingNotification: int getUndeliveredMessageCount(android.content.Context,long[])> (3)
<com.android.mms.transaction.MessagingNotification: void notifyFailed(android.content.Context,boolean,long,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotification(android.content.Context)> (3)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotificationForThread(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (2)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (1)
<com.android.mms.ui.ComposeMessageActivity$11: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void messageFailedToSend(android.net.Uri,int)> (2)
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.mms.transaction.PushReceiver: long findThreadId(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<com.android.mms.transaction.PushReceiver: long access$000(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(long)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,long,java.lang.String)> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.drm.DrmUtils: void cleanupStorage(android.content.Context)> (2)
<com.android.mms.MmsApp: void onCreate()> (1)
<com.android.mms.MmsApp: void onTerminate()> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.data.Conversation: void startDeleteAll(android.content.AsyncQueryHandler,int,boolean)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.data.Conversation: void startDelete(android.content.AsyncQueryHandler,int,boolean,long)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
25 Callers:
<com.android.server.WifiService: void enforceMulticastChangePermission()> (3)
<com.android.server.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<com.android.server.WifiService: void initializeMulticastFiltering()> (2)
<com.android.server.WifiService: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void initializeMulticastFiltering()> ()
<android.net.wifi.IWifiManager$Stub: void initializeMulticastFiltering()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void releaseMulticastLock()> ()
<android.net.wifi.IWifiManager$Stub: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (1)
<android.net.wifi.IWifiManager: void initializeMulticastFiltering()> (1)
<android.net.wifi.IWifiManager: void releaseMulticastLock()> (2)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$MulticastLock: void acquire()> ()
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()> (2)
<android.net.wifi.WifiManager$MulticastLock: void release()> (1)
<android.net.wifi.WifiStateTracker: void notifySupplicantConnection()> (1)
<android.net.wifi.WifiManager$MulticastLock: void finalize()> ()
<android.net.wifi.WifiMonitor$MonitorThread: void run()> (2)
<android.net.wifi.WifiMonitor: void startMonitoring()> (1)
<android.net.wifi.WifiStateTracker: void startEventLoop()> (1)
<com.android.server.WifiService: boolean setWifiEnabledBlocking(boolean,boolean,int)> (1)
<com.android.server.WifiService: boolean access$1600(com.android.server.WifiService,boolean,boolean,int)> (1)
Permission:android.permission.GET_TASKS
12 Callers:
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManagerNative: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: java.util.List getRunningTasks(int)> ()
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int)> (1)
<android.app.ActivityManagerNative: java.util.List getRecentTasks(int,int)> (2)
<android.app.IActivityManager: java.util.List getRecentTasks(int,int)> (1)
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void reloadButtons()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onStart()> (1)
Permission:android.permission.ACCESS_WIFI_STATE
115 Callers:
<com.android.server.WifiService: void enforceAccessPermission()> (9)
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()> (2)
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<com.android.server.WifiService: boolean isMulticastEnabled()> (2)
<com.android.server.WifiService: int getNumAllowedChannels()> (2)
<com.android.server.WifiService: int[] getValidChannelCounts()> (2)
<com.android.server.WifiService: int getWifiApEnabledState()> (2)
<com.android.server.WifiService: int getWifiEnabledState()> (2)
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> (2)
<com.android.server.WifiService: java.util.List getScanResults()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.DhcpInfo getDhcpInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isMulticastEnabled()> ()
<android.net.wifi.IWifiManager$Stub: boolean isMulticastEnabled()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getNumAllowedChannels()> ()
<android.net.wifi.IWifiManager$Stub: int getNumAllowedChannels()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int[] getValidChannelCounts()> ()
<android.net.wifi.IWifiManager$Stub: int[] getValidChannelCounts()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiApEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getConfiguredNetworks()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getScanResults()> (2)
<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (1)
<android.net.wifi.IWifiManager: boolean isMulticastEnabled()> (1)
<android.net.wifi.IWifiManager: int getNumAllowedChannels()> (1)
<android.net.wifi.IWifiManager: int[] getValidChannelCounts()> (1)
<android.net.wifi.IWifiManager: int getWifiApEnabledState()> (1)
<android.net.wifi.IWifiManager: int getWifiEnabledState()> (1)
<android.net.wifi.IWifiManager: java.util.List getConfiguredNetworks()> (1)
<android.net.wifi.IWifiManager: java.util.List getScanResults()> (1)
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> (1)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (9)
<android.net.wifi.WifiManager: boolean isMulticastEnabled()> ()
<android.net.wifi.WifiManager: int getNumAllowedChannels()> (1)
<android.net.wifi.WifiManager: int[] getValidChannelCounts()> (1)
<android.net.wifi.WifiManager: int getWifiApState()> (3)
<android.net.wifi.WifiManager: int getWifiState()> (7)
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> (2)
<android.net.wifi.WifiManager: java.util.List getScanResults()> (3)
<com.android.server.WifiWatchdogService: int getDns()> (2)
<com.android.server.WifiWatchdogService$2: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.server.WifiWatchdogService: boolean requiresWatchdog(java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService: void handleBackgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.deviceinfo.Status: void setWifiStatus()> (1)
<com.android.settings.wifi.AdvancedSettings: void refreshMacAddress()> (1)
<com.android.settings.wifi.WifiEnabler: void handleStateChanged(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiSettings: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiStatusTest$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.settings.wifi.AdvancedSettings: void initNumChannelsPreference()> (2)
<android.net.wifi.WifiManager: boolean isWifiApEnabled()> ()
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.net.wifi.WifiManager: boolean isWifiEnabled()> (3)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiConfigInfo: void onResume()> (1)
<com.android.settings.wifi.WifiSettings: void updateAccessPoints()> (4)
<com.android.server.WifiWatchdogService: boolean hasRequiredNumberOfAps(java.lang.String)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleScanResultsAvailable()> (1)
<com.android.server.WifiWatchdogService: boolean backgroundCheckDnsConnectivity()> (1)
<com.android.server.WifiWatchdogService: boolean checkDnsConnectivity()> (1)
<com.android.server.WifiWatchdogService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService: void onConnected(java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService: void access$1000(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiEnabler: void access$100(com.android.settings.wifi.WifiEnabler,android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest: void access$100(com.android.settings.wifi.WifiStatusTest,android.net.NetworkInfo)> (1)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: void saveNetworks()> (3)
<com.android.settings.wifi.WifiSettings: void updateWifiState(int)> (1)
<com.android.settings.wifi.WifiStatusTest: void access$200(com.android.settings.wifi.WifiStatusTest)> (1)
<com.android.server.WifiWatchdogService: void handleCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.server.WifiWatchdogService: void access$1600(com.android.server.WifiWatchdogService,java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void backgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.wifi.WifiEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.wifi.WifiSettings: void connect(int)> (3)
<com.android.settings.wifi.WifiSettings: void forget(int)> (2)
<com.android.settings.wifi.WifiSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.WifiWatchdogService: void access$900(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.server.WifiWatchdogService: void handleApAlive(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void checkAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
Permission:android.permission.ACCESS_MOCK_LOCATION
43 Callers:
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
Permission:android.permission.EXPAND_STATUS_BAR
74 Callers:
<com.android.server.status.StatusBarService: void enforceExpandStatusBar()> (3)
<com.android.server.status.StatusBarService: void activate()> (2)
<com.android.server.status.StatusBarService: void deactivate()> (6)
<com.android.server.status.StatusBarService: void toggle()> (2)
<android.app.IStatusBar$Stub$Proxy: void activate()> ()
<android.app.IStatusBar$Stub: void activate()> (2)
<android.app.IStatusBar$Stub$Proxy: void deactivate()> ()
<android.app.IStatusBar$Stub: void deactivate()> (2)
<com.android.server.status.StatusBarService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.status.StatusBarService$ExpandedDialog: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.server.status.StatusBarService$Launcher: void onClick(android.view.View)> (1)
<com.android.server.status.TrackingView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<android.app.IStatusBar$Stub$Proxy: void toggle()> ()
<android.app.IStatusBar$Stub: void toggle()> (2)
<android.app.IStatusBar$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IStatusBar: void activate()> (1)
<android.app.IStatusBar: void deactivate()> (2)
<android.app.IStatusBar: void toggle()> (2)
<com.android.server.status.StatusBarService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.StatusBarManager: void expand()> (1)
<android.app.StatusBarManager: void collapse()> ()
<com.android.internal.policy.impl.PhoneWindowManager: int finishAnimationLw()> (1)
<android.app.StatusBarManager: void toggle()> ()
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.launcher2.Launcher: void showNotifications()> (1)
<android.view.WindowManagerPolicy: int finishAnimationLw()> (1)
<android.view.WindowManagerPolicy: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.launcher2.Launcher: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object findTargetWindow(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,int,int)> (1)
<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (17)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.WindowManagerService: void access$2000(com.android.server.WindowManagerService)> (5)
<com.android.server.WindowManagerService: void moveAppWindowsLocked(com.android.server.WindowManagerService$AppWindowToken,int,boolean)> (1)
<com.android.server.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.WindowManagerService: void removeWindowInnerLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)> (2)
<com.android.server.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.WindowManagerService$WindowState,float,float,float,float)> (1)
<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)> (6)
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: void prepareAppTransition(int)> (7)
<com.android.server.WindowManagerService: boolean setRotationUncheckedLocked(int,int)> (2)
<com.android.server.WindowManagerService: void requestAnimationLocked(long)> (4)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.HistoryRecord)> (5)
<com.android.server.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,int)> (2)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int)> (2)
<com.android.server.am.ActivityManagerService: boolean moveTaskToBackLocked(int,com.android.server.am.HistoryRecord)> (2)
<com.android.server.am.ActivityManagerService: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.HistoryRecord)> (2)
<com.android.server.WindowManagerService$WindowState: boolean hideLw(boolean,boolean)> (2)
<com.android.server.WindowManagerService$WindowState: boolean showLw(boolean,boolean)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<android.view.IWindowManager: void prepareAppTransition(int)> ()
<com.android.server.WindowManagerService$WindowState: boolean hideLw(boolean)> (1)
<com.android.server.WindowManagerService$WindowState: boolean showLw(boolean)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)> (1)
<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.ServerThread: void run()> (1)
Permission:android.permission.READ_LOGS
7 Callers:
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (2)
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> ()
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (2)
<com.android.internal.os.IDropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (1)
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> ()
<com.android.server.DropBoxManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.BLUETOOTH_ADMIN
611 Callers:
<android.server.BluetoothService: boolean disable(boolean)> (6)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean disable(boolean)> (2)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean disable()> ()
<android.server.BluetoothService$EnableThread: void run()> (2)
<android.server.BluetoothService: void restart()> (2)
<android.bluetooth.IBluetooth: boolean disable(boolean)> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothService: boolean enable(boolean)> (2)
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<android.bluetooth.BluetoothAdapter: boolean disable()> (4)
<com.android.internal.app.ShutdownThread: void run()> (2)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothService: boolean enable()> (4)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothEnabled(boolean)> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$000(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<android.server.BluetoothService: void access$200(android.server.BluetoothService,boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (5)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.server.BluetoothService: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: boolean persistString(java.lang.String)> (3)
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setEnabled(boolean)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.server.BluetoothService: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean startDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void startScanning(boolean)> (3)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void access$100(com.android.settings.bluetooth.BluetoothSettings,int)> (1)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean cancelDiscovery()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean cancelDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void pair()> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void stopScanning()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onClicked()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onUserLeaveHint()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean connectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAllProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean processCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer()> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBondingStateChanged(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onContextItemSelected(android.view.MenuItem)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setOnlineMode(boolean,boolean)> (2)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void processCommands()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventRedirector$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onOnlineModeCheckedStateChanged(boolean)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void queueCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (6)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onResume()> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onProfileStateChanged(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnectConnected(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager$1: void run()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onProfileCheckedStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,boolean)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void askDisconnect()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceAppeared(android.bluetooth.BluetoothDevice,short,android.bluetooth.BluetoothClass,java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceDisappeared(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: void syncBluetoothState()> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: int getBluetoothState()> (8)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onCreateContextMenu(android.view.ContextMenu)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean removeBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean removeBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean removeBond(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean removeBond()> (1)
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setTrust(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setTrust(java.lang.String,boolean)> (2)
<android.bluetooth.IBluetooth: boolean setTrust(java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<android.server.BluetoothService: boolean setPin(java.lang.String,byte[])> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(java.lang.String,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPin(java.lang.String,byte[])> (2)
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.bluetooth.IBluetooth: boolean setPin(java.lang.String,byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onPair(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.server.BluetoothService: boolean setPasskey(java.lang.String,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(java.lang.String,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPasskey(java.lang.String,int)> (2)
<android.bluetooth.IBluetooth: boolean setPasskey(java.lang.String,int)> (1)
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> (1)
<android.server.BluetoothService: boolean setPairingConfirmation(java.lang.String,boolean)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPairingConfirmation(java.lang.String,boolean)> (2)
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.bluetooth.IBluetooth: boolean setPairingConfirmation(java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createDisplayPasskeyDialog()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (16)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (3)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (5)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.server.BluetoothA2dpService: boolean connectSink(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean disconnectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (8)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$500(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition()> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition()> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.Phone)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition()> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity$1: void onServiceConnected()> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients()> (3)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.media.AudioService$2: void onServiceDisconnected()> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void stopBluetoothSco()> ()
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void setMode(int)> (1)
<com.android.phone.PhoneUtils: void setAudioMode(android.content.Context,int)> (8)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.PhoneUtils: int placeCall(com.android.internal.telephony.Phone,java.lang.String,android.net.Uri)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: void audioOff()> (9)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: void access$1900(com.android.phone.BluetoothHeadsetService,int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect()> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int,int)> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHeadsetService$6: void disconnectHeadset()> (2)
<com.android.phone.BluetoothHeadsetService: boolean doNextAutoConnect()> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService)> (3)
<com.android.phone.BluetoothHeadsetService: void access$1200(com.android.phone.BluetoothHeadsetService,int,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int)> (2)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void disconnectHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: void disconnectHeadset()> (3)
<com.android.phone.BluetoothHeadsetService: boolean access$2400(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$600(com.android.phone.BluetoothHeadsetService,int)> (2)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void onStop()> (1)
<android.bluetooth.IBluetoothHeadset: void disconnectHeadset()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadset(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadset()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void autoConnectHeadset()> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void access$2200(com.android.phone.BluetoothHeadsetService)> (2)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<android.server.BluetoothA2dpService: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (4)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.bluetooth.IBluetoothA2dp: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$500(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.bluetooth.BluetoothA2dp: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<android.bluetooth.BluetoothPbap: boolean disconnect()> ()
<com.android.phone.BluetoothHeadsetService$6: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void doOpushSdp()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
Permission:android.permission.VIBRATE
637 Callers:
<com.android.server.VibratorService: void vibrate(long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(long,android.os.IBinder)> (1)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.Vibrator: void vibrate(long)> (10)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (5)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,int,int,int,int,com.android.launcher2.DragSource,java.lang.Object,int)> (2)
<com.android.phone.Ringer$VibratorThread: void run()> (2)
<com.android.server.status.StatusBarService: void vibrate()> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity: int playSound(int)> (1)
<com.android.voicedialer.VoiceDialerActivity: int playSound(int)> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (1)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void keyFeedbackFromInput(android.view.KeyEvent)> (1)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.launcher2.AllApps3D: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int)> (3)
<com.android.phone.Ringer: void ring()> (3)
<com.android.server.status.StatusBarService$6: void run()> (1)
<com.android.server.status.StatusBarService$7: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: int access$500(com.android.voicedialer.BluetoothVoiceDialerActivity,int)> (1)
<com.android.voicedialer.VoiceDialerActivity: int access$1000(com.android.voicedialer.VoiceDialerActivity,int)> (4)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<android.view.WindowManagerPolicy: boolean detectSafeMode()> (1)
<android.view.WindowManagerPolicy: void keyFeedbackFromInput(android.view.KeyEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.launcher2.AllApps2D: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Folder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.launcher2.Workspace: void startDrag(com.android.launcher2.CellLayout$CellInfo)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$ErrorRunnable: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$4: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.WindowManagerService: boolean detectSafeMode()> (1)
<com.android.server.WindowManagerService: void virtualKeyFeedback(android.view.KeyEvent)> (1)
<com.android.launcher2.UserFolder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.voicedialer.RecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.KeyInputQueue$HapticFeedbackCallback: void virtualKeyFeedback(android.view.KeyEvent)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.KeyInputQueue: boolean generateVirtualKeyDown(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.KeyInputQueue: boolean monitorVirtualKey(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (4)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.KeyInputQueue: boolean access$800(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.WindowManagerService$KeyQ: boolean generateVirtualKeyDown(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.KeyInputQueue: boolean access$700(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.WindowManagerService$KeyQ: boolean monitorVirtualKey(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$3: void run()> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<com.android.server.WindowManagerService$KeyQ: boolean access$800(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean access$700(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.VibratorService: void vibratePattern(long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibratePattern(long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService: void vibratePattern(long[],int,android.os.IBinder)> (1)
<android.os.Vibrator: void vibrate(long[],int)> (7)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onPress(int)> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void start()> (1)
<com.android.phone.HapticFeedback: void vibrate()> (4)
<com.android.server.NotificationManagerService: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (3)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$200(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (1)
<com.android.contacts.TwelveKeyDialer: void keyPressed(int)> (2)
<com.android.contacts.TwelveKeyDialer: void onClick(android.view.View)> (1)
<com.android.phone.EmergencyDialer: void keyPressed(int)> (2)
<com.android.phone.EmergencyDialer: void onClick(android.view.View)> (1)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> ()
<android.app.INotificationManager$Stub: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.server.NotificationManagerService: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.contacts.TwelveKeyDialer: boolean onLongClick(android.view.View)> (1)
<com.android.phone.EmergencyDialer: boolean onLongClick(android.view.View)> (1)
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (1)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> ()
<android.app.INotificationManager$Stub: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.server.NotificationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> (1)
<android.app.INotificationManager: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (1)
<android.app.NotificationManager: void notify(int,android.app.Notification)> (41)
<com.android.server.am.ServiceRecord$1: void run()> (1)
<android.accounts.AccountManagerService: void createNoCredentialsPermissionNotification(android.accounts.Account,android.content.Intent)> (1)
<android.content.SyncManager$SyncHandler: void installHandleTooManyDeletesNotification(android.accounts.Account,java.lang.String,long)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateActiveNotification()> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateCompletedNotification()> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateIncomingFileConfirmNotification()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void createPbapNotification(java.lang.String)> (1)
<com.android.browser.WebStorageSizeManager: void scheduleOutOfSpaceNotification()> (2)
<com.android.calendar.AlertService: void postNotification(android.content.Context,android.content.SharedPreferences,java.lang.String,java.lang.String,int,boolean)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze()> (3)
<com.android.deskclock.AlarmReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmReceiver: void updateNotification(android.content.Context,com.android.deskclock.Alarm,int)> (1)
<com.android.email.SecurityPolicy: void policiesRequired(long)> (3)
<com.android.email.service.MailService: void notifyNewMessages(long)> (2)
<com.android.exchange.CalendarSyncEnabler: void showNotification(java.lang.String)> (1)
<com.android.internal.location.GpsNetInitiatedHandler: void setNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setNotification(int)> (1)
<com.android.mms.transaction.MessagingNotification: void notifyFailed(android.content.Context,boolean,long,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void updateNotification(android.content.Context,android.content.Intent,java.lang.String,int,boolean,java.lang.CharSequence,long,java.lang.String,int,int)> (1)
<com.android.mms.transaction.SimFullReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.SmsRejectedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.EmergencyCallbackModeService: void showNotification(long)> (3)
<com.android.phone.NotificationMgr: void notifyMissedCall(java.lang.String,java.lang.String,java.lang.String,long)> (3)
<com.android.phone.NotificationMgr: void showDataDisconnectedRoaming()> (2)
<com.android.phone.NotificationMgr: void showNetworkSelection(java.lang.String)> (1)
<com.android.phone.NotificationMgr: void updateCfi(boolean)> (1)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (5)
<com.android.phone.NotificationMgr: void updateMwi(boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: void onLegacyContactImportFailure()> (1)
<com.android.providers.downloads.DownloadNotification: void updateActiveNotification()> (1)
<com.android.providers.downloads.DownloadNotification: void updateCompletedNotification()> (1)
<com.android.server.ConnectivityService: void handleNotificationChange(boolean,int,android.app.Notification)> (1)
<com.android.server.connectivity.Tethering: void showTetheredNotification(int)> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.NotificationManagerService: void updateAdbNotification()> (1)
<com.android.server.status.StorageNotification: void setMediaStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (1)
<com.android.server.status.StorageNotification: void setUsbStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (2)
<com.android.server.ThrottleService$MyHandler: void postNotification(int,int,int,int)> (1)
<com.android.server.UiModeManagerService: void adjustStatusBarCarModeLocked()> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void enableNotification(android.app.Notification)> (2)
<com.android.settings.bluetooth.BluetoothPairingRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceled(android.content.SyncResult)> (3)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$300(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$400(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$500(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService,java.lang.String)> (2)
<com.android.browser.WebStorageSizeManager: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.browser.WebStorageSizeManager: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.calendar.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (3)
<com.android.deskclock.AlarmAlert: void snooze()> (1)
<com.android.email.activity.setup.AccountSecurity$1: void run()> (2)
<com.android.exchange.EasSyncService: boolean tryProvision()> (2)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.email.service.MailService: void access$100(com.android.email.service.MailService,long)> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> (1)
<com.android.internal.location.GpsNetInitiatedHandler: void handleNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onRestrictedStateChanged(android.os.AsyncResult)> (3)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (2)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void access$200(android.content.Context,android.content.Intent,java.lang.String,int,boolean,java.lang.CharSequence,long,java.lang.String,int,int)> (1)
<com.android.phone.EmergencyCallbackModeService: void access$200(com.android.phone.EmergencyCallbackModeService,long)> (1)
<com.android.phone.EmergencyCallbackModeService: void resetEcmTimer(android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallbackModeService: void startTimerNotification()> (2)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.NotificationMgr: void updateNetworkSelection(int)> (1)
<com.android.phone.CallNotifier: void onCfiChanged(boolean)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.CallNotifier: void onMwiChanged(boolean)> (3)
<com.android.providers.contacts.ContactsProvider2: void access$1500(com.android.providers.contacts.ContactsProvider2)> (1)
<com.android.providers.downloads.DownloadNotification: void updateNotification()> (2)
<com.android.server.ConnectivityService: void access$800(com.android.server.ConnectivityService,boolean,int,android.app.Notification)> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.NotificationManagerService: void access$1600(com.android.server.NotificationManagerService)> (2)
<com.android.server.status.StorageNotification: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.status.StorageNotification: void updateUsbMassStorageNotification(boolean)> (2)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void showDisconnect()> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void update(long)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (4)
<com.android.bluetooth.opp.BluetoothOppNotification$NotificationUpdateThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.browser.Tab$3: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.browser.Tab$3: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.calendar.AlertActivity: void onStop()> (1)
<com.android.calendar.AlertService: void doTimeChanged()> (1)
<com.android.calendar.AlertService: void processMessage(android.os.Message)> (1)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlertFullScreen$2: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (1)
<com.android.email.activity.setup.AccountSecurity: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.exchange.EasOutboxService: boolean tryProvision()> (1)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.email.mail.MessagingException,long,long,int,int)> (1)
<com.android.email.ExchangeUtils: void enableEasCalendarSync(android.content.Context)> (1)
<com.android.internal.location.GpsLocationProvider: void reportNiNotification(int,int,int,int,int,java.lang.String,java.lang.String,int,int,java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.SmsReceiverService: void messageFailedToSend(android.net.Uri,int)> (2)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotification(android.content.Context)> (3)
<com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo: void deliver(android.content.Context,boolean,int,int)> (1)
<com.android.phone.EmergencyCallbackModeService$3: void onTick(long)> (1)
<com.android.phone.EmergencyCallbackModeService: void access$000(com.android.phone.EmergencyCallbackModeService,android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallbackModeService: void onCreate()> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void access$100(com.android.phone.CallNotifier,boolean)> (1)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.CallNotifier: void access$000(com.android.phone.CallNotifier,boolean)> (1)
<com.android.phone.CallNotifier: void sendMwiChangedDelayed(long)> (1)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (2)
<com.android.providers.downloads.DownloadService: void onCreate()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.NotificationManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void update()> (2)
<com.android.server.status.StorageNotification: void onUsbMassStorageConnectionChanged(boolean)> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.vpn.VpnService: void onDisconnect()> (6)
<com.android.server.vpn.VpnService$1: void run()> (1)
<android.content.SyncManager: void access$800(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> (2)
<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])> (2)
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> (7)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateNotification()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.email.Controller$Result: void updateMailboxCallback(com.android.email.mail.MessagingException,long,long,int,int)> (4)
<com.android.email.OneTimeInitializer: void initialize(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context)> (2)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp,android.content.Intent)> (1)
<com.android.phone.CallNotifier$1: void onCallForwardingIndicatorChanged(boolean)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.CallNotifier$1: void onMessageWaitingIndicatorChanged(boolean)> (1)
<com.android.providers.downloads.DownloadService: void updateFromProvider()> (3)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void onChange(boolean)> (1)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.vpn.L2tpIpsecPskService: void onDisconnect()> (1)
<com.android.server.vpn.L2tpIpsecService: void onDisconnect()> (1)
<com.android.server.vpn.L2tpService: void onDisconnect()> (1)
<com.android.server.vpn.PptpService: void onDisconnect()> (1)
<com.android.server.vpn.VpnServiceBinder$3: void run()> (1)
<com.android.server.vpn.VpnService: void onError(java.lang.Throwable)> (9)
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.content.SyncManager$SyncHandler: void runStateSyncing()> (2)
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$SyncHandler: java.lang.Long scheduleReadyPeriodicSyncs()> (6)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.ISyncAdapter)> (2)
<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)> (1)
<android.content.SyncManager: void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)> (5)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void updateNotificationWhenBtDisabled()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFinished(long,long,int,int)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.email.OneTimeInitializer: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.data.Conversation$1: void run()> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.providers.downloads.DownloadService: void access$000(com.android.providers.downloads.DownloadService)> (2)
<com.android.providers.downloads.DownloadService: void onStart(android.content.Intent,int)> (1)
<com.android.internal.util.HierarchicalState: void enter()> (11)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.status.StatusBarService,com.android.server.LightsService)> (1)
<com.android.server.vpn.L2tpIpsecPskService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.PptpService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.VpnService: boolean checkConnectivity()> (5)
<com.android.server.vpn.VpnService: boolean onConnect(java.lang.String,java.lang.String)> (5)
<com.android.server.vpn.VpnService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (5)
<com.android.server.vpn.VpnService: void onError(int)> (5)
<com.android.server.vpn.VpnService: void waitUntilConnectedOrTimedout()> (5)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.content.SyncManager: void sendSyncAlarmMessage()> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager: void sendCheckAlarmsMessage()> (3)
<android.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$6: void onServiceChanged(android.content.SyncAdapterType,boolean)> (1)
<android.content.SyncManager: void scheduleLocalSync(android.accounts.Account,java.lang.String)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearAllDownloads()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFinished(long,long,int,int)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.email.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> ()
<com.android.email.service.IEmailServiceCallback$Stub: void syncMailboxStatus(long,int,int)> (2)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.providers.downloads.DownloadService$DownloadManagerContentObserver: void onChange(boolean)> (1)
<com.android.providers.downloads.DownloadService$MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.server.vpn.L2tpIpsecPskService: boolean checkConnectivity()> (1)
<com.android.server.vpn.L2tpIpsecService: boolean checkConnectivity()> (1)
<com.android.server.vpn.L2tpService: boolean checkConnectivity()> (1)
<com.android.server.vpn.PptpService: boolean checkConnectivity()> (1)
<com.android.server.vpn.VpnService: boolean access$400(com.android.server.vpn.VpnService)> (5)
<com.android.server.vpn.L2tpIpsecPskService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.L2tpIpsecService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.L2tpService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.PptpService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.VpnServiceBinder$2: void run()> (1)
<com.android.server.vpn.L2tpIpsecPskService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.PptpService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecPskService: void onError(int)> (1)
<com.android.server.vpn.L2tpIpsecService: void onError(int)> (1)
<com.android.server.vpn.L2tpService: void onError(int)> (1)
<com.android.server.vpn.PptpService: void onError(int)> (1)
<com.android.server.vpn.L2tpIpsecPskService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.L2tpIpsecService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.L2tpService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.PptpService: void waitUntilConnectedOrTimedout()> (1)
<android.content.SyncManager: void access$700(android.content.SyncManager)> (1)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager: void access$100(android.content.SyncManager)> (3)
<android.content.SyncManager$6: void onServiceChanged(java.lang.Object,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void access$000(com.android.bluetooth.opp.BluetoothOppTransferHistory)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFinished(long,long,int,int)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxStarted(long,long)> (3)
<com.android.email.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.email.service.IEmailServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void completeConstruction()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void performTransitions()> (2)
<com.android.server.vpn.L2tpIpsecPskService: boolean access$400(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.L2tpIpsecService: boolean access$400(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.L2tpService: boolean access$400(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.PptpService: boolean access$400(com.android.server.vpn.VpnService)> (1)
<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$7: void onStatusChanged(int)> (2)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.MessagingController: void synchronizeMailboxSynchronous(com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox)> (1)
<com.android.email.MessagingController: void synchronizeMailbox(com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox,com.android.email.MessagingListener)> (2)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.SyncManager$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.SyncManager$1: void syncMailboxStatus(long,int,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler)> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.email.MessagingController: void access$400(com.android.email.MessagingController,com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox)> (2)
<com.android.email.Controller$3: void run()> (2)
<com.android.email.Controller$8: void run()> (2)
<com.android.mms.transaction.Transaction: void process()> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.util.HierarchicalStateMachine: void start()> (7)
<com.android.email.MessagingController$10: void run()> (1)
<com.android.email.MessagingController$2: void run()> (1)
<com.android.email.Controller: void updateMailbox(long,long,com.android.email.Controller$Result)> (2)
<com.android.email.Controller: void loadMoreMessages(long,com.android.email.Controller$Result)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.email.activity.MailboxList: void onRefresh(long)> (2)
<com.android.email.activity.MessageList: void onRefresh()> (3)
<com.android.email.activity.MessageList: void onLoadMoreMessages()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.email.activity.MailboxList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MailboxList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageList: void autoRefreshStaleMailbox()> (2)
<com.android.email.activity.MessageList: void doFooterClick()> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.email.activity.MessageList: void access$1600(com.android.email.activity.MessageList)> (1)
<com.android.email.activity.MessageList: void onResume()> (2)
<com.android.email.activity.MessageList: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.email.activity.MessageList$LoadMessagesTask: void onPostExecute(android.database.Cursor)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.email.activity.MessageList$LoadMessagesTask: void onPostExecute(java.lang.Object)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)> (1)
<android.os.Vibrator: void cancel()> (7)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void stop()> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$300(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (2)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
Permission:android.permission.MODIFY_AUDIO_SETTINGS
467 Callers:
<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)> (5)
<android.media.AudioService: void setBluetoothScoOn(boolean)> (2)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.AudioService: void setSpeakerphoneOn(boolean)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> ()
<android.media.IAudioService$Stub: void setBluetoothScoOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> ()
<android.media.IAudioService$Stub: void setSpeakerphoneOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setBluetoothScoOn(boolean)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.IAudioService: void setSpeakerphoneOn(boolean)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setBluetoothScoOn(boolean)> (2)
<android.media.AudioManager: void setMode(int)> (1)
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> (1)
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void stopBluetoothSco()> ()
<com.android.phone.BluetoothHandsfree: void audioOff()> (9)
<com.android.phone.PhoneUtils: void setAudioMode(android.content.Context,int)> (8)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (8)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.PhoneUtils: int placeCall(com.android.internal.telephony.Phone,java.lang.String,android.net.Uri)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: void activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$500(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHeadsetService: void access$1900(com.android.phone.BluetoothHeadsetService,int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect()> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int,int)> (2)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.Phone)> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition()> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService$6: void disconnectHeadset()> (2)
<com.android.phone.BluetoothHeadsetService: boolean doNextAutoConnect()> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService)> (3)
<com.android.phone.BluetoothHeadsetService: void access$1200(com.android.phone.BluetoothHeadsetService,int,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int)> (2)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void disconnectHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: void disconnectHeadset()> (3)
<com.android.phone.BluetoothHeadsetService: boolean access$2400(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$600(com.android.phone.BluetoothHeadsetService,int)> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void onStop()> (1)
<android.bluetooth.IBluetoothHeadset: void disconnectHeadset()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadset(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadset()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void autoConnectHeadset()> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients()> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void access$2200(com.android.phone.BluetoothHeadsetService)> (2)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<android.media.AudioService$2: void onServiceDisconnected()> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean connectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean disconnectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean processCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void processCommands()> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void queueCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (6)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBondingStateChanged(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onProfileStateChanged(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAllProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnectConnected(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.settings.bluetooth.BluetoothEventRedirector$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager$1: void run()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onProfileCheckedStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,boolean)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (6)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onContextItemSelected(android.view.MenuItem)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onClicked()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setOnlineMode(boolean,boolean)> (2)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void askDisconnect()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onOnlineModeCheckedStateChanged(boolean)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refresh()> (2)
<com.android.settings.bluetooth.DockService: void access$000(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onResume()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceAppeared(android.bluetooth.BluetoothDevice,short,android.bluetooth.BluetoothClass,java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceDisappeared(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void syncBluetoothState()> (2)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: int getBluetoothState()> (8)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onCreateContextMenu(android.view.ContextMenu)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
<android.media.AudioManager: boolean isBluetoothA2dpOn()> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (1)
<android.media.AudioManager: boolean isWiredHeadsetOn()> ()
<android.media.AudioManager: void setMicrophoneMute(boolean)> (1)
<com.android.phone.PhoneUtils: void setMuteInternal(com.android.internal.telephony.Phone,boolean)> (5)
<com.android.phone.CallNotifier: void onResendMute()> (1)
<com.android.phone.PhoneUtils: void setMute(com.android.internal.telephony.Phone,boolean)> (6)
<com.android.phone.PhoneUtils: void startNewCall(com.android.internal.telephony.Phone)> (2)
<com.android.phone.InCallScreen: void onMuteClick()> (2)
<com.android.phone.PhoneUtils: java.lang.Boolean restoreMuteState(com.android.internal.telephony.Phone)> (2)
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.media.AudioManager: void setParameters(java.lang.String)> (8)
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> (3)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: void configAudioParameters()> (1)
<com.android.phone.PhoneApp: void handleQueryTTYModeResponse(android.os.Message)> (1)
<com.android.phone.PhoneUtils: void turnOnNoiseSuppression(android.content.Context,boolean,boolean)> (1)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.phone.PhoneApp: void access$800(com.android.phone.PhoneApp,android.os.Message)> (1)
<com.android.phone.PhoneUtils: void restoreNoiseSuppression(android.content.Context)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean connectSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$500(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (8)
<android.bluetooth.BluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition()> (2)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition()> (2)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition()> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition()> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity$1: void onServiceConnected()> (1)
Permission:android.permission.DUMP
47 Callers:
<android.view.ViewRoot$W: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> (2)
<android.view.IWindow$Stub$Proxy: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> ()
<android.view.IWindow$Stub: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> (2)
<android.view.IWindow$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<android.view.IWindow: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)> ()
<android.service.wallpaper.WallpaperService$Engine$3: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.view.SurfaceView$MyWindow: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.view.ViewRoot$W: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.view.BaseIWindow: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneSubInfo: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.TelephonyRegistry: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.NotificationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.WallpaperManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.status.StatusBarService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.DropBoxManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.BatteryService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.PackageManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.PowerManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.UiModeManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.InputMethodManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.LocationManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.am.ActivityManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.AlarmManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.connectivity.Tethering: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (2)
<com.android.server.ConnectivityService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.WifiService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.AppWidgetService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.DevicePolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.WindowManagerService: boolean startViewServer(int)> (2)
<android.view.IWindowManager$Stub$Proxy: boolean startViewServer(int)> ()
<android.view.IWindowManager$Stub: boolean startViewServer(int)> (2)
<android.view.IWindowManager: boolean startViewServer(int)> ()
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WindowManagerService: boolean stopViewServer()> (2)
<android.view.IWindowManager$Stub$Proxy: boolean stopViewServer()> ()
<android.view.IWindowManager$Stub: boolean stopViewServer()> (2)
<android.view.IWindowManager: boolean stopViewServer()> ()
<com.android.server.WindowManagerService: boolean isViewServerRunning()> (2)
<android.view.IWindowManager$Stub$Proxy: boolean isViewServerRunning()> ()
<android.view.IWindowManager$Stub: boolean isViewServerRunning()> (2)
<android.view.IWindowManager: boolean isViewServerRunning()> ()
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
110 Callers:
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.BrowserActivity$5: void handleMessage(android.os.Message)> (1)
<com.android.browser.BrowserHistoryPage: void onCreate(android.os.Bundle)> (1)
<com.android.browser.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> (3)
<com.android.browser.BrowserActivity$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$2$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserActivity$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Tab$2$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.BrowserBookmarksAdapter: android.database.Cursor queryBookmarksForUrl(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)> (3)
<com.android.browser.BrowserActivity$6: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.BrowserActivity$6: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (4)
<com.android.browser.BrowserBookmarksAdapter: void deleteRow(int)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.HistoryItem$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void deleteBookmark(int)> (1)
<com.android.browser.BrowserBookmarksPage$4: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> (1)
<com.android.browser.BrowserActivity: void retainIconsOnStartup()> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.widget.BookmarkWidgetService: void queryCursorAndRender()> (1)
<com.android.browser.widget.BookmarkWidgetService: void access$100(com.android.browser.widget.BookmarkWidgetService)> (2)
<com.android.browser.widget.BookmarkWidgetService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.browser.BrowserBookmarksAdapter: void <init>(com.android.browser.BrowserBookmarksPage,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserBookmarksPage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter: void populateIcons(java.util.Map)> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter$2: void onReceiveValue(java.util.Set)> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter$2: void onReceiveValue(java.lang.Object)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (2)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(java.lang.String)> (4)
<com.android.browser.BrowserActivity: com.android.browser.BrowserActivity$UrlData getUrlDataFromIntent(android.content.Intent)> (2)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(android.net.Uri)> (1)
<com.android.browser.BrowserActivity: void loadUrlFromContext(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Tab: void activateVoiceSearchMode(android.content.Intent)> (2)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void access$500(com.android.browser.BrowserActivity,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity$UrlData: void loadIn(com.android.browser.Tab)> (1)
<com.android.browser.Tab$5: void onIndexChanged(android.webkit.WebHistoryItem,int)> (1)
<com.android.browser.BrowserActivity: void loadUrlDataIn(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(com.android.browser.BrowserActivity$UrlData,boolean,java.lang.String)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(java.lang.String,boolean,java.lang.String)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTab(java.lang.String)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1200(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.BrowserActivity: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab access$700(com.android.browser.BrowserActivity,java.lang.String)> (1)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserActivity: void closeCurrentWindow()> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (3)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserSettings: void clearHistory(android.content.Context)> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> (1)
<com.android.browser.BrowserHistoryPage: boolean onPrepareOptionsMenu(android.view.Menu)> (2)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<com.android.browser.Tab$3$4: java.lang.String[] doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$3$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (2)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean)> (3)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.BrowserBackupAgent: long buildBookmarkFile(java.io.FileOutputStream)> (1)
<com.android.browser.BrowserBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (1)
<android.webkit.WebIconDatabase$EventHandler: void bulkRequestIcons(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$500(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (2)
<android.webkit.WebIconDatabase$EventHandler: void postMessage(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$900(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (7)
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<android.webkit.WebIconDatabase: void close()> (1)
<android.webkit.WebIconDatabase: void open(java.lang.String)> (1)
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)> (3)
<android.webkit.WebIconDatabase: void removeAllIcons()> (1)
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> ()
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)> (3)
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.BrowserBookmarksAdapter: void deleteAllRows()> ()
<com.android.browser.BrowserSettings: void clearCache(android.content.Context)> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryActivity$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.CombinedBookmarkHistoryActivity$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.browser.Tab$3$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$3$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserBookmarksAdapter: void updateRow(android.os.Bundle)> (1)
<com.android.browser.BrowserBookmarksPage: void onActivityResult(int,int,android.content.Intent)> (1)
Permission:android.permission.BATTERY_STATS
20 Callers:
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.battery_history.BatteryHistory: void load()> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.battery_history.BatteryHistory: void onCreate(android.os.Bundle)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (3)
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimeBattery()> ()
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimePlugged()> ()
Permission:android.permission.READ_USER_DICTIONARY
88 Callers:
<com.android.inputmethod.latin.UserDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.UserDictionary: void addWord(java.lang.String,int)> (3)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.ExpandableDictionary: void addWord(java.lang.String,int)> (6)
<com.android.inputmethod.latin.LatinIME: boolean addWordToDictionary(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME: void promoteToUserDictionary(java.lang.String,int)> (3)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.AutoDictionary: void addWord(java.lang.String,int)> (2)
<com.android.inputmethod.latin.AutoDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.UserDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.CandidateView: void longPressFirstWord()> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: boolean addWordToDictionary(java.lang.String)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: boolean addWordToDictionary(java.lang.String)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.android.inputmethod.latin.LatinIME: void checkAddToDictionary(java.lang.CharSequence,int)> (5)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.CandidateView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.CandidateView: void access$500(com.android.inputmethod.latin.CandidateView)> (1)
<com.android.inputmethod.latin.LatinIME: void commitTyped(android.view.inputmethod.InputConnection)> (7)
<com.android.inputmethod.latin.LatinIME: void pickDefaultSuggestion()> (3)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void checkAddToDictionary(java.lang.CharSequence,int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void checkAddToDictionary(java.lang.CharSequence,int)> (1)
<com.android.inputmethod.latin.CandidateView$2: void onLongPress(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (5)
<com.android.inputmethod.latin.LatinIME: void handleSeparator(int)> (3)
<com.android.inputmethod.latin.LatinIME: void handleVoiceResults()> (3)
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.inputmethod.latin.LatinIME: void onText(java.lang.CharSequence)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void commitTyped(android.view.inputmethod.InputConnection)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void commitTyped(android.view.inputmethod.InputConnection)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void pickDefaultSuggestion()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void pickDefaultSuggestion()> (1)
<com.android.inputmethod.latin.CandidateView: void takeSuggestionAt(float)> ()
<com.android.inputmethod.voice.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (3)
<com.android.inputmethod.latin.LatinIME: void onKey(int,int[])> (4)
<com.android.inputmethod.latin.LatinIME: void swipeDown()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleClose()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleClose()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleSeparator(int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleSeparator(int)> (1)
<com.android.inputmethod.latin.LatinIME: void access$400(com.android.inputmethod.latin.LatinIME)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleVoiceResults()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleVoiceResults()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.google.android.voicesearch.LatinIMEWithVoice: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onText(java.lang.CharSequence)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onText(java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onKey(int,int[])> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onKey(int,int[])> (1)
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void swipeDown()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void access$400(com.android.inputmethod.latin.LatinIME)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void access$400(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.latin.LatinIME: void onVoiceResults(java.util.List,java.util.Map)> (3)
<com.android.inputmethod.latin.LatinIME$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings()> (1)
<android.inputmethodservice.KeyboardView: void swipeDown()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.voice.VoiceInput$UiListener: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onVoiceResults(java.util.List,java.util.Map)> (1)
<android.inputmethodservice.KeyboardView$2: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.latin.LatinKeyboardView: void swipeDown()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void swipeDown()> (1)
<com.android.inputmethod.voice.VoiceInput$ImeRecognitionListener: void onResults(android.os.Bundle)> (1)
<com.android.settings.UserDictionarySettings: android.database.Cursor createCursor()> (1)
<com.android.settings.UserDictionarySettings: void onCreate(android.os.Bundle)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (2)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.settings.UserDictionarySettings: void onAddOrEditFinished(java.lang.String)> (1)
<com.android.settings.UserDictionarySettings: void access$100(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String)> (2)
<com.android.settings.UserDictionarySettings: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
Permission:android.permission.MOUNT_UNMOUNT_FILESYSTEMS
54 Callers:
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> (3)
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)> ()
<android.os.storage.IMountService$Stub: void setUsbMassStorageEnabled(boolean)> (2)
<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)> (2)
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.storage.IMountService: void setUsbMassStorageEnabled(boolean)> (2)
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)> ()
<android.os.storage.IMountService$Stub: void shutdown(android.os.storage.IMountShutdownObserver)> (2)
<com.android.server.MountService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.storage.StorageManager: void disableUsbMassStorage()> (1)
<android.os.storage.StorageManager: void enableUsbMassStorage()> (1)
<android.os.storage.IMountService: void shutdown(android.os.storage.IMountShutdownObserver)> (1)
<com.android.server.status.UsbStorageActivity$4: void run()> (2)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.server.status.UsbStorageActivity: void switchUsbMassStorageAsync(boolean)> (3)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.status.UsbStorageActivity: void access$200(com.android.server.status.UsbStorageActivity,boolean)> (1)
<com.android.server.status.UsbStorageActivity: void checkStorageUsers()> (1)
<com.android.server.status.UsbStorageActivity: void onClick(android.view.View)> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.server.status.UsbStorageActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.MountService: int mountVolume(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int mountVolume(java.lang.String)> (2)
<android.os.storage.IMountService: int mountVolume(java.lang.String)> (1)
<com.android.settings.deviceinfo.Memory: void mount()> (1)
<com.android.settings.deviceinfo.Memory: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.server.MountService: void unmountVolume(java.lang.String,boolean)> (2)
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean)> ()
<android.os.storage.IMountService$Stub: void unmountVolume(java.lang.String,boolean)> (2)
<android.os.storage.IMountService: void unmountVolume(java.lang.String,boolean)> (1)
<com.android.settings.deviceinfo.Memory: void doUnmount(boolean)> (2)
<com.android.settings.deviceinfo.Memory: void access$100(com.android.settings.deviceinfo.Memory,boolean)> (1)
<com.android.settings.deviceinfo.Memory: void unmount()> (1)
<com.android.settings.deviceinfo.Memory$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)> (4)
<android.os.storage.IMountService$Stub$Proxy: int[] getStorageUsers(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int[] getStorageUsers(java.lang.String)> (2)
<com.android.server.MountService: void finishMediaUpdate()> (2)
<android.os.storage.IMountService: int[] getStorageUsers(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: void finishMediaUpdate()> ()
<android.os.storage.IMountService$Stub: void finishMediaUpdate()> (2)
<com.android.settings.deviceinfo.Memory: boolean hasAppsAccessingStorage()> (1)
<android.os.storage.IMountService: void finishMediaUpdate()> (1)
Permission:android.permission.CAMERA
54 Callers:
<android.hardware.Camera: android.hardware.Camera open()> (1)
<com.android.camera.CameraHolder: android.hardware.Camera open()> (3)
<com.android.camera.CameraHolder: android.hardware.Camera tryOpen()> (1)
<com.android.camera.Camera: void ensureCameraDevice()> (1)
<com.android.camera.VideoCamera: void startPreview()> (3)
<com.android.camera.CameraButtonIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.Camera: void startPreview()> (3)
<com.android.camera.VideoCamera: void access$700(com.android.camera.VideoCamera)> (1)
<com.android.camera.VideoCamera: void onResume()> (1)
<com.android.camera.VideoCamera: void resetCameraParameters()> (1)
<com.android.camera.Camera: void access$5600(com.android.camera.Camera)> (1)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void restartPreview()> (3)
<com.android.camera.VideoCamera$1: void run()> (1)
<com.android.camera.VideoCamera: void onSharedPreferencesChanged()> (1)
<com.android.camera.Camera$4: void run()> (1)
<com.android.camera.Camera: void access$700(com.android.camera.Camera)> (2)
<com.android.camera.Camera: void onClick(android.view.View)> (1)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.VideoCamera: void access$1300(com.android.camera.VideoCamera)> (1)
<com.android.camera.Camera$JpegPictureCallback: void onPictureTaken(byte[],android.hardware.Camera)> (1)
<com.android.camera.VideoCamera$MyHeadUpDisplayListener$1: void run()> (1)
<android.hardware.Camera: void native_setup(java.lang.Object)> (1)
<android.hardware.Camera: void <init>()> (1)
<android.media.MediaRecorder: void setVideoSource(int)> (1)
<com.android.camera.VideoCamera: void initializeRecorder()> (3)
<com.android.camera.VideoCamera: void access$300(com.android.camera.VideoCamera)> (8)
<com.android.camera.VideoCamera: void onPopupWindowVisibilityChanged(int)> (1)
<com.android.camera.VideoCamera: void onStopVideoRecording(boolean)> (4)
<com.android.camera.VideoCamera$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoCamera: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.VideoCamera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.VideoCamera: void keepScreenOnAwhile()> (3)
<com.android.camera.VideoCamera: void hideAlertAndInitializeRecorder()> (1)
<com.android.camera.VideoCamera: void updateRecordingTime()> (2)
<com.android.camera.VideoCamera: void access$1600(com.android.camera.VideoCamera,int)> (1)
<com.android.camera.VideoCamera: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.VideoCamera: void onBackPressed()> (1)
<com.android.camera.VideoCamera: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.VideoCamera: void onUserInteraction()> (1)
<com.android.camera.VideoCamera: void stopVideoRecording()> (7)
<com.android.camera.VideoCamera: void discardCurrentVideoAndInitRecorder()> (1)
<com.android.camera.VideoCamera: void access$200(com.android.camera.VideoCamera)> (4)
<com.android.camera.VideoCamera: void startVideoRecording()> (1)
<com.android.camera.VideoCamera$MyHeadUpDisplayListener$3: void run()> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.VideoCamera: void access$500(com.android.camera.VideoCamera)> (1)
<com.android.camera.VideoCamera: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoCamera: void onPause()> (1)
<com.android.camera.VideoCamera: void stopVideoRecordingAndGetThumbnail()> (2)
<com.android.camera.VideoCamera: void stopVideoRecordingAndReturn(boolean)> (2)
<com.android.camera.VideoCamera: void stopVideoRecordingAndShowAlert()> (1)
<com.android.camera.VideoCamera: void onClick(android.view.View)> (1)
Permission:android.permission.WRITE_SMS
225 Callers:
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (1)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity: void checkPendingNotification()> (2)
<com.android.mms.ui.ComposeMessageActivity: void access$5400(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onUserInteraction()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$28: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStart()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity$18: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$25: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (10)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (2)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (4)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (3)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.ComposeMessageActivity$PduBodyCache: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (4)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (3)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean copyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: java.lang.String getDrmMimeType(long)> (3)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3400(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem access$500(com.android.mms.ui.ComposeMessageActivity,java.lang.String,long,boolean)> (2)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2600(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$2700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3600(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void startDeleteAll(android.content.AsyncQueryHandler,int,boolean)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(long)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$700(com.android.mms.data.WorkingMessage,long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.Conversation: void startDelete(android.content.AsyncQueryHandler,int,boolean,long)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (4)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getNewMessageNotificationInfo(java.lang.String,java.lang.String,android.content.Context,int,java.lang.String,long,long,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void forwardMessage(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ConversationList: void createNewMessage()> (2)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$3100(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.drm.DrmUtils: android.net.Uri insert(android.content.Context,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.MediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (7)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (6)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getGenericMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILMediaElement,com.google.android.mms.pdu.PduPart,com.android.mms.model.RegionModel)> (2)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,int,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getRegionMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILRegionMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduPart)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> (2)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (3)
<com.android.mms.data.WorkingMessage: android.net.Uri access$400(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$21: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSlideshow()> (2)
<com.android.mms.ui.MessageUtils: void viewMmsMessageAttachment(android.content.Context,com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(int,boolean)> (1)
<com.android.mms.ui.MessageUtils$2$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4700(com.android.mms.ui.ComposeMessageActivity,int,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$20: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.drm.DrmUtils: void cleanupStorage(android.content.Context)> (2)
<com.android.mms.MmsApp: void onCreate()> (1)
<com.android.mms.MmsApp: void onTerminate()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,long,java.lang.StringBuilder)> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.WRITE_USER_DICTIONARY
84 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.settings.UserDictionarySettings: void onAddOrEditFinished(java.lang.String)> (1)
<com.android.settings.UserDictionarySettings: void access$100(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String)> (2)
<com.android.settings.UserDictionarySettings: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.inputmethod.latin.UserDictionary: void addWord(java.lang.String,int)> (3)
<com.android.inputmethod.latin.ExpandableDictionary: void addWord(java.lang.String,int)> (6)
<com.android.inputmethod.latin.LatinIME: boolean addWordToDictionary(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME: void promoteToUserDictionary(java.lang.String,int)> (3)
<com.android.inputmethod.latin.AutoDictionary: void addWord(java.lang.String,int)> (2)
<com.android.inputmethod.latin.AutoDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.UserDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.CandidateView: void longPressFirstWord()> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: boolean addWordToDictionary(java.lang.String)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: boolean addWordToDictionary(java.lang.String)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.android.inputmethod.latin.LatinIME: void checkAddToDictionary(java.lang.CharSequence,int)> (5)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.UserDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.CandidateView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.CandidateView: void access$500(com.android.inputmethod.latin.CandidateView)> (1)
<com.android.inputmethod.latin.LatinIME: void commitTyped(android.view.inputmethod.InputConnection)> (7)
<com.android.inputmethod.latin.LatinIME: void pickDefaultSuggestion()> (3)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void checkAddToDictionary(java.lang.CharSequence,int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void checkAddToDictionary(java.lang.CharSequence,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.CandidateView$2: void onLongPress(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (5)
<com.android.inputmethod.latin.LatinIME: void handleSeparator(int)> (3)
<com.android.inputmethod.latin.LatinIME: void handleVoiceResults()> (3)
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.inputmethod.latin.LatinIME: void onText(java.lang.CharSequence)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void commitTyped(android.view.inputmethod.InputConnection)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void commitTyped(android.view.inputmethod.InputConnection)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void pickDefaultSuggestion()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void pickDefaultSuggestion()> (1)
<com.android.inputmethod.latin.CandidateView: void takeSuggestionAt(float)> ()
<com.android.inputmethod.voice.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (3)
<com.android.inputmethod.latin.LatinIME: void onKey(int,int[])> (4)
<com.android.inputmethod.latin.LatinIME: void swipeDown()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleClose()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleClose()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleSeparator(int)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleSeparator(int)> (1)
<com.android.inputmethod.latin.LatinIME: void access$400(com.android.inputmethod.latin.LatinIME)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleVoiceResults()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleVoiceResults()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.google.android.voicesearch.LatinIMEWithVoice: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onText(java.lang.CharSequence)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onText(java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onKey(int,int[])> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onKey(int,int[])> (1)
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void swipeDown()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void access$400(com.android.inputmethod.latin.LatinIME)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void access$400(com.android.inputmethod.latin.LatinIME)> (1)
<com.android.inputmethod.latin.LatinIME: void onVoiceResults(java.util.List,java.util.Map)> (3)
<com.android.inputmethod.latin.LatinIME$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings()> (1)
<android.inputmethodservice.KeyboardView: void swipeDown()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.voice.VoiceInput$UiListener: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onVoiceResults(java.util.List,java.util.Map)> (1)
<android.inputmethodservice.KeyboardView$2: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.latin.LatinKeyboardView: void swipeDown()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void swipeDown()> (1)
<com.android.inputmethod.voice.VoiceInput$ImeRecognitionListener: void onResults(android.os.Bundle)> (1)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
Permission:android.permission.MODIFY_PHONE_STATE
598 Callers:
<com.android.server.TelephonyRegistry: boolean checkNotifyPermission(java.lang.String)> (9)
<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)> (2)
<com.android.server.TelephonyRegistry: void notifyDataActivity(int)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (2)
<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallForwardingChanged(boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyCallForwardingChanged(boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCallState(int,java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyCallState(int,java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyCellLocation(android.os.Bundle)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyCellLocation(android.os.Bundle)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataActivity(int)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataActivity(int)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnectionFailed(java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyMessageWaitingChanged(boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyMessageWaitingChanged(boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void notifyCallForwardingChanged(boolean)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyCallState(int,java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyCellLocation(android.os.Bundle)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivity(int)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyMessageWaitingChanged(boolean)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyPhoneState(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.PhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.PhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void notifyCallForwardingIndicator()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyPhoneStateChanged()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyPhoneStateChanged()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyLocationChanged()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void notifyLocationChanged()> (2)
<com.android.internal.telephony.PhoneBase: void notifyDataActivity()> (6)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnectionFailed(java.lang.String)> ()
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> (24)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void notifyMessageWaitingIndicator()> (2)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)> (5)
<com.android.internal.telephony.cdma.CdmaCallTracker: void updatePhoneState()> (7)
<com.android.internal.telephony.gsm.GsmCallTracker: void updatePhoneState()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$2: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataActivity()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2: void run()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataActivity()> (1)
<com.android.internal.telephony.Phone: void notifyDataActivity()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean setupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean trySetupData(java.lang.String)> (7)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyDefaultData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCdmaDataDetached()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String)> (12)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDefaultData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onGprsAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onGprsDetached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyMessageWaitingIndicator()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void notifyMessageWaitingIndicator()> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void onQueryCfComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void acceptCall()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void clearDisconnected()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void clearDisconnected()> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.PhoneProxy: void notifyDataActivity()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean access$400(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void cleanUpConnection(boolean,java.lang.String)> (11)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startPeriodicPdpPoll()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void runPingTest()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void cleanUpConnection(boolean,java.lang.String)> (16)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceMessageWaiting(int,int)> (3)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void acceptCall()> ()
<com.android.internal.telephony.cdma.CdmaCallTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void clearDisconnected()> ()
<com.android.internal.telephony.CallTracker: void handlePollCalls(android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void clearDisconnected()> ()
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void access$300(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onNVReady()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.DataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void access$3200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPdpStateChanged(android.os.AsyncResult,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void restartRadio()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void updateMessageWaitingIndicator(boolean)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void updateMessageWaitingIndicator(int)> (1)
<com.android.internal.telephony.IccRecords: void setVoiceMessageWaiting(int,int)> ()
<com.android.internal.telephony.gsm.GSMPhone: void updateMessageWaitingIndicator(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.cdma.CdmaCall: void hangup()> (1)
<com.android.internal.telephony.Connection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (4)
<com.android.internal.telephony.DataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.DataConnectionTracker: void restartRadio()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2$1: void run()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.PhoneBase: void dispose()> (2)
<com.android.internal.telephony.Call: void hangup()> (2)
<com.android.phone.PhoneUtils: void hangup(com.android.internal.telephony.Connection)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (3)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleSms(byte[])> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleSmses(java.util.ArrayList)> (1)
<com.android.internal.telephony.Call: void hangupIfAlive()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Call)> (4)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.ManageConferenceUtils: void endConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (3)
<com.android.internal.telephony.cdma.CdmaCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.gsm.GsmCall: void hangupIfAlive()> (2)
<com.android.phone.PhoneUtils: boolean hangupActiveCall(com.android.internal.telephony.Phone)> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupHoldingCall(com.android.internal.telephony.Phone)> (3)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.ManageConferenceUtils$1: void onClick(android.view.View)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void powerOffRadioSafely()> (3)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.Phone)> (5)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void powerOffRadioSafely()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.ServiceStateTracker: void powerOffRadioSafely()> ()
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setRadioPower(boolean)> (2)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> ()
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.PhoneInterfaceManager: void enforceModifyPermission()> (11)
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> (2)
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> (2)
<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)> (2)
<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)> (2)
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> (2)
<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)> (2)
<com.android.phone.PhoneInterfaceManager: int enableApnType(java.lang.String)> (2)
<com.android.phone.PhoneInterfaceManager: void answerRingingCall()> (2)
<com.android.phone.PhoneInterfaceManager: void cancelMissedCallsNotification()> (2)
<com.android.phone.PhoneInterfaceManager: void silenceRinger()> (2)
<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()> (3)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean disableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean disableDataConnectivity()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean enableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean enableDataConnectivity()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean handlePinMmi(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean handlePinMmi(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean setRadio(boolean)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean setRadio(boolean)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean supplyPin(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: int disableApnType(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: int disableApnType(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: int enableApnType(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: int enableApnType(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void answerRingingCall()> ()
<com.android.internal.telephony.ITelephony$Stub: void answerRingingCall()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void cancelMissedCallsNotification()> ()
<com.android.internal.telephony.ITelephony$Stub: void cancelMissedCallsNotification()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void silenceRinger()> ()
<com.android.internal.telephony.ITelephony$Stub: void silenceRinger()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void toggleRadioOnOff()> ()
<com.android.internal.telephony.ITelephony$Stub: void toggleRadioOnOff()> (2)
<com.android.internal.telephony.ITelephony: boolean disableDataConnectivity()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: boolean enableDataConnectivity()> (1)
<com.android.internal.telephony.ITelephony: boolean handlePinMmi(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony: boolean setRadio(boolean)> (2)
<com.android.internal.telephony.ITelephony: boolean supplyPin(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony: int disableApnType(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony: int enableApnType(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony: void answerRingingCall()> (1)
<com.android.internal.telephony.ITelephony: void cancelMissedCallsNotification()> (1)
<com.android.internal.telephony.ITelephony: void silenceRinger()> (1)
<com.android.internal.telephony.ITelephony: void toggleRadioOnOff()> (1)
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.contacts.SpecialCharSequenceMgr: boolean handlePinEntry(android.content.Context,java.lang.String)> (1)
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> (1)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void run()> (2)
<android.net.MobileDataStateTracker: int setEnableApn(java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.contacts.RecentCallsListActivity: void onWindowFocusChanged(boolean)> (2)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,boolean,android.widget.EditText)> (2)
<android.net.NetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void run()> (2)
<android.net.MobileDataStateTracker: boolean reconnect()> (1)
<android.net.MobileDataStateTracker: boolean teardown()> (1)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String)> ()
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<android.net.NetworkStateTracker: boolean reconnect()> (3)
<android.net.NetworkStateTracker: boolean teardown()> (4)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.contacts.TwelveKeyDialer: void afterTextChanged(android.text.Editable)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.server.ConnectivityService: android.net.NetworkStateTracker tryFailover(int)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.contacts.TwelveKeyDialer: void setFormattedDigits(java.lang.String)> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$300(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<com.android.contacts.TwelveKeyDialer: boolean resolveIntent()> (3)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<com.android.server.ConnectivityService: void access$600(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.contacts.TwelveKeyDialer: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: int turnOnMobileConnection()> (3)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.development.Connectivity$11: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$13: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$9: void onClick(android.view.View)> (1)
<com.android.internal.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: int turnOnMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: int turnOnMobileConnection()> (2)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffMobileConnection()> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity$10: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$12: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffMobileConnection()> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.util.HierarchicalState: void enter()> (11)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.internal.util.HierarchicalState: void exit()> (20)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeExitMethods(com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void completeConstruction()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void performTransitions()> (2)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.internal.util.HierarchicalStateMachine: void start()> (7)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
Permission:android.permission.INTERNET
233 Callers:
<android.webkit.WebSettings: void <init>(android.content.Context,android.webkit.WebView)> (1)
<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<android.webkit.WebView: void <init>(android.content.Context)> (8)
<com.android.browser.TabControl: android.webkit.WebView createNewWebView()> (3)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (2)
<com.android.browser.TabControl: boolean recreateWebView(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean,java.lang.String,java.lang.String)> (3)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (16)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (6)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(com.android.browser.BrowserActivity$UrlData,boolean,java.lang.String)> (3)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (3)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.browser.BrowserActivity: boolean switchToTab(int)> (7)
<com.android.browser.BrowserActivity: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.TabControl: boolean restoreState(android.os.Bundle)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(java.lang.String,boolean,java.lang.String)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTab(java.lang.String)> (3)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserActivity: void closeCurrentWindow()> (1)
<com.android.browser.BrowserActivity: void goBackOnePageOrQuit()> (2)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1200(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.BrowserActivity: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab access$700(com.android.browser.BrowserActivity,java.lang.String)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Tab$2: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)> (1)
<android.webkit.WebSettings: void verifyNetworkAccess()> (1)
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> (3)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MessageView: void onShowPictures()> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> ()
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpSessionNotifier: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpServer: void run()> (1)
<java.net.ServerSocket: void bind(java.net.SocketAddress)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> (1)
<com.cooliris.media.UriTexture: java.io.BufferedInputStream createInputStreamFromRemoteUrl(java.lang.String,org.apache.http.conn.ClientConnectionManager)> (1)
<com.cooliris.media.UriTexture: android.graphics.Bitmap createFromUri(android.content.Context,java.lang.String,int,int,long,org.apache.http.conn.ClientConnectionManager)> (6)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.CropImage: void performReturn(android.content.Context,android.os.Bundle,java.lang.String)> (2)
<com.cooliris.media.MediaItemTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (2)
<com.cooliris.media.UriTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (1)
<com.cooliris.media.UriTexture: java.lang.String writeHttpDataInDirectory(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.cooliris.wallpaper.RandomDataSource: android.graphics.Bitmap getBitmapForIndex(android.content.Context,int)> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.CropImage: void access$100(android.content.Context,android.os.Bundle,java.lang.String)> (1)
<com.cooliris.media.CropImage: void launchCropperOrFinish(android.content.Context,com.cooliris.media.MediaItem)> (1)
<com.cooliris.media.Texture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (2)
<com.cooliris.media.CropImage$1: void onMediaScannerConnected()> (1)
<com.cooliris.wallpaper.Slideshow$DataSource: android.graphics.Bitmap getBitmapForIndex(android.content.Context,int)> (1)
<com.cooliris.media.CropImage$1: void shutdown(java.lang.String)> (2)
<com.cooliris.media.GridInputProcessor$1: void run()> (1)
<com.cooliris.media.AdaptiveBackgroundTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (1)
<com.cooliris.media.RenderView: void loadTextureAsync(com.cooliris.media.Texture)> (2)
<com.cooliris.wallpaper.Slideshow: android.graphics.Bitmap getRandomBitmap()> (1)
<com.cooliris.media.CropImage$1: void onScanCompleted(java.lang.String,android.net.Uri)> (2)
<com.cooliris.media.RenderView: void access$600(com.cooliris.media.RenderView,com.cooliris.media.Texture)> (1)
<com.cooliris.media.RenderView: void loadTexture(com.cooliris.media.Texture)> (8)
<com.cooliris.wallpaper.Slideshow: void performSetup(int,int)> (1)
<com.cooliris.media.RenderView$TextureLoadThread: void load(com.cooliris.media.Texture)> (1)
<com.cooliris.media.BackgroundLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawables: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawManager: void drawBlendedComponents(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,float,int,int,float,float,com.cooliris.media.MediaBucketList,com.cooliris.media.MediaBucketList,boolean)> (1)
<com.cooliris.media.LoadingLayer: void generate(com.cooliris.media.RenderView,com.cooliris.media.RenderView$Lists)> (1)
<com.cooliris.media.MenuBar: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: boolean bind(com.cooliris.media.Texture)> (13)
<com.cooliris.media.TimeBar: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.wallpaper.Slideshow: void drawFrame()> (2)
<com.cooliris.media.RenderView$TextureLoadThread: void run()> (2)
<com.cooliris.media.Layer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (8)
<com.cooliris.media.GridLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.GridLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Layer: void generate(com.cooliris.media.RenderView,com.cooliris.media.RenderView$Lists)> ()
<com.cooliris.media.Layer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.BackgroundLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.CrossFadingTexture: boolean bind(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawManager: void drawDisplayItem(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,com.cooliris.media.DisplayItem,com.cooliris.media.Texture,int,com.cooliris.media.Texture,float)> (3)
<com.cooliris.media.GridDrawManager: void drawFocusItems(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,float,boolean,float)> (1)
<com.cooliris.media.GridDrawManager: void drawThumbnails(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,int)> (1)
<com.cooliris.media.RenderView: boolean bindMixed(com.cooliris.media.Texture,com.cooliris.media.Texture,float)> (2)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,float,float,float,float)> (2)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,float,float)> (5)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,int,int,int,int)> (1)
<com.cooliris.media.RenderView: void drawMixed2D(com.cooliris.media.Texture,com.cooliris.media.Texture,float,float,float,float,float,float)> (1)
<com.cooliris.wallpaper.Slideshow$1: void run()> (1)
<com.cooliris.wallpaper.Slideshow: void onVisibilityChanged(boolean)> ()
<com.cooliris.media.RenderView: void <init>(android.content.Context)> (4)
<com.cooliris.media.ImageButton: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.LoadingLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PopupMenu: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.cooliris.media.RootLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.TimeBar: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Layer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (8)
<com.cooliris.media.RootLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.RootLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void drawHighlight(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,int)> (1)
<com.cooliris.media.ImageButton: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.BackgroundLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.HudLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.ImageButton: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.LoadingLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)> (1)
<com.cooliris.media.TimeBar: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<java.net.URL: java.io.InputStream openStream()> (2)
<com.android.browser.BrowserActivity$SetAsWallpaper: void run()> (2)
<com.google.common.io.Resources$1: java.io.InputStream getInput()> (1)
<com.android.browser.BrowserActivity$SetAsWallpaper: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.google.common.io.Resources$1: java.lang.Object getInput()> (1)
<com.google.common.io.InputSupplier: java.lang.Object getInput()> (16)
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> (1)
<com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)> (1)
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)> (3)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)> (2)
<com.google.common.io.ByteStreams: long length(com.google.common.io.InputSupplier)> ()
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> (1)
<com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)> (2)
<com.google.common.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)> (1)
<com.google.common.io.MultiInputStream: void advance()> (3)
<com.google.common.io.MultiReader: void advance()> (3)
<com.google.common.io.ByteStreams$4: java.lang.Object getInput()> (1)
<com.google.common.io.Files: boolean equal(java.io.File,java.io.File)> ()
<com.google.common.io.Files: byte[] toByteArray(java.io.File)> (1)
<com.google.common.io.Resources: byte[] toByteArray(java.net.URL)> ()
<com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)> (1)
<com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)> (1)
<com.google.common.io.Files: java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)> (1)
<com.google.common.io.Files: void copy(java.io.File,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.OutputStream)> ()
<com.google.common.io.Resources: void copy(java.net.URL,java.io.OutputStream)> ()
<com.google.common.io.CharStreams$2: java.lang.Object getInput()> (1)
<com.google.common.io.Files: java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.Resources: java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.CharStreams: java.lang.String toString(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.Files: java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: java.util.List readLines(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Resources: java.util.List readLines(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)> ()
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> (2)
<com.google.common.io.MultiInputStream: int read()> (3)
<com.google.common.io.MultiInputStream: void <init>(java.util.Iterator)> (1)
<com.google.common.io.MultiReader: int read(char[],int,int)> (2)
<com.google.common.io.MultiReader: long skip(long)> (1)
<com.google.common.io.MultiReader: void <init>(java.util.Iterator)> (1)
<com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: byte[] getDigest(java.io.File,java.security.MessageDigest)> ()
<com.google.common.io.Files: long getChecksum(java.io.File,java.util.zip.Checksum)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.File)> (1)
<com.google.common.io.Resources: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.MultiInputStream: long skip(long)> (1)
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> (1)
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> (1)
<com.google.common.io.Files: void move(java.io.File,java.io.File)> ()
<com.google.common.io.ByteStreams$5: java.lang.Object getInput()> (1)
<com.google.common.io.CharStreams$4: java.lang.Object getInput()> (1)
<java.net.URLConnection: void connect()> (1)
<java.net.URLConnection: java.io.InputStream getInputStream()> (1)
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> (2)
<com.cooliris.picasa.GDataClient: void callMethod(org.apache.http.client.methods.HttpUriRequest,com.cooliris.picasa.GDataClient$Operation)> (5)
<com.cooliris.picasa.GDataClient: void delete(java.lang.String,com.cooliris.picasa.GDataClient$Operation)> (1)
<com.cooliris.picasa.GDataClient: void get(java.lang.String,com.cooliris.picasa.GDataClient$Operation)> (2)
<com.cooliris.picasa.GDataClient: void post(java.lang.String,byte[],java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.GDataClient: void put(java.lang.String,byte[],java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.GDataClient: void putStream(java.lang.String,java.io.InputStream,java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.PicasaApi: int deleteEntry(java.lang.String)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
Permission:android.permission.SET_WALLPAPER
1164 Callers:
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> ()
<android.app.IWallpaperManager$Stub: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (3)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> (1)
<android.app.WallpaperManager: void setResource(int)> (2)
<android.app.WallpaperManager: void setStream(java.io.InputStream)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> (1)
<android.app.WallpaperManager: void clear()> (1)
<com.android.launcher2.WallpaperChooser: void selectWallpaper(int)> (1)
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> (1)
<android.content.Context: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ContextImpl: void clearWallpaper()> (1)
<com.android.launcher2.WallpaperChooser: void onClick(android.view.View)> (1)
<android.content.Context: void setWallpaper(java.io.InputStream)> (1)
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> (380)
<com.cooliris.media.Photographs$SetWallpaperThread: void run()> (2)
<com.cooliris.media.Wallpaper$SetWallpaperThread: void run()> (2)
<android.content.Context: void clearWallpaper()> (1)
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> (380)
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.accounts.ChooseAccountActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.Activity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.Application: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.FullBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.IntentService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.LauncherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.Service: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)> (3)
<android.preference.PreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.service.urlrenderer.UrlRendererService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.TestBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.TestListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.tts.TtsService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BookmarkSearch: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.BrowserBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserBookmarksPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserDownloadPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserHistoryPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.Browser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.WebsiteSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.widget.BookmarkWidgetService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.calculator2.Calculator: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AgendaActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AlertService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.calendar.CalendarActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.DayActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.DismissAllAlarmsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.EditEvent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.EventInfoActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.LaunchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.MonthActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.SelectCalendarsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.WeekActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.camera.Camera: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.NoSearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.VideoCamera: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.certinstaller.CertFileList: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.certinstaller.CertFile: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.certinstaller.CertInstaller: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.AttachImage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.CallDetailActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactOptionsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.contacts.ContactsListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.DialtactsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ExportVCardActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ImportVCardActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.RecentCallsListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.SearchResultsActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.contacts.TwelveKeyDialer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ui.EditContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ui.QuickContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.util.EmptyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.contacts.ViewContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.defcontainer.DefaultContainerService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmAlert: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.AlarmClock: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmKlaxon: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.SetAlarm: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AccountsTester: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppHwConfigList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppHwPref: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Connectivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.DataList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Details: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.DevelopmentSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Development: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.EnterURL: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.InstrumentationList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.LogViewer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.MediaScannerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PackageBrowser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PackageSummary: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PermissionDetails: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PointerLocation: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.ProcessInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.RunningProcesses: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.ShowActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.SyncAdapterDriver: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.UnderdevelopedSettings: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.AccountFolderList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.AccountShortcutPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.Debug: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.FolderMessageList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MailboxList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageCompose: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageView: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupExchange: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.UpgradeAccounts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.Welcome: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.Email: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.MailService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.CalendarSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.ContactsSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.SyncManager: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.LatinIMESettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ChooserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ResolverActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.RingtonePickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.launcher2.LauncherApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.launcher2.Launcher: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.launcher2.WallpaperChooser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.MmsApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.transaction.SmsReceiverService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mms.transaction.TransactionService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mms.ui.ClassZeroActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ComposeMessageActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ConversationList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.DeliveryReportActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ManageSimMessages: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideEditorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideshowActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideshowEditActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.CreatePlaylist: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.DeleteItems: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPlaybackActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPlaybackService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MusicPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.QueryBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.RenamePlaylist: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.ScanningProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.StreamStarter: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.TrackBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.VideoBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.WeekSelector: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.ADNList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.BluetoothHeadsetService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.CallFeaturesSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.CdmaCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.CdmaOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.CellBroadcastSms: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.ChangeIccPinScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.DataUsage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.DeleteFdnContactScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EditFdnContactScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyCallbackModeService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.EmergencyCallHandler: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyDialer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EnableFdnScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EnableIccPinScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FakePhoneActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FdnList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FdnSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GetPin2Screen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.InCallScreenShowActivation: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.InCallScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.NetworkQueryService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.NetworkSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.OutgoingCallBroadcaster: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.PhoneApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.Settings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.SimContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.applications.ApplicationLauncher: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.calendar.CalendarDebug: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.downloads.DownloadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.media.MediaScannerService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.settings.SettingsBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.ChoiceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.google.GoogleSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.server.LoadAverageService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.status.UsbStorageActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.SystemBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.server.vpn.VpnServiceBinder: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.settings.AccessibilitySettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AccountPreferenceBase: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AccountSyncSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ActivityPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AddAccountSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ApnEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ApnSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ApplicationSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AppWidgetPickActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.settings.BandMode: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.battery_history.BatteryHistory: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.BatteryInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.DockService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockGeneric: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPassword: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPatternExample: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPatternTutorial: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPattern: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ConfirmLockPassword: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ConfirmLockPattern: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.CreateShortcut: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.settings.CredentialInstaller: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DateTimeSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DebugIntentSender: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DevelopmentSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DeviceAdminAdd: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DeviceAdminSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.deviceinfo.Memory: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DeviceInfoSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.deviceinfo.Status: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DisplaySettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Display: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DockSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.IccLockSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.InstalledAppDetails: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.LanguageSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.LocalePickerInSetupWizard: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.LocalePicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ManageAccountsSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ManageApplications: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.MasterClear: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.MediaFormat: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.PhysicalKeyboardSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.PrivacySettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ProxySelector: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.RadioInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.RunningServices: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SecuritySettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SettingsLicenseActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SoundSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.TestingSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.TetherSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.TextToSpeechSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.UsageStats: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.UserDictionarySettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.VoiceInputOutputSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.vpn.VpnEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.vpn.VpnSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.vpn.VpnTypeSelection: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.AdvancedSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiAPITest: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiApSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiConfigInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiStatusTest: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.WirelessSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ZoneList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ZonePicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.spare_parts.SpareParts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.term.TermPreferences: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.term.Term: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.voicedialer.VoiceDialerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.cache.CacheService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.ActiveWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.CropImage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Gallery: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.MonitoredActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.MovieView: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Photographs: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Wallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.picasa.PicasaService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void setWallpaper(android.graphics.Bitmap)> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.DownloadVoiceData: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.EngineSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.GetSampleText: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.Pico: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Photographs: void onActivityResult(int,int,android.content.Intent)> (1)
<com.cooliris.media.Wallpaper: void onActivityResult(int,int,android.content.Intent)> (1)
<android.content.ContextWrapper: void clearWallpaper()> (380)
<android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> (3)
<android.accounts.ChooseAccountActivity: void setWallpaper(java.io.InputStream)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)> (3)
<android.app.Activity: void setWallpaper(java.io.InputStream)> (3)
<android.app.AliasActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.Application: void setWallpaper(java.io.InputStream)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)> (3)
<android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)> (2)
<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.FullBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<android.app.IntentService: void setWallpaper(java.io.InputStream)> (2)
<android.app.LauncherActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(java.io.InputStream)> (2)
<android.app.Service: void setWallpaper(java.io.InputStream)> (2)
<android.app.TabActivity: void setWallpaper(java.io.InputStream)> (3)
<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)> (2)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)> (3)
<android.preference.PreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<android.service.urlrenderer.UrlRendererService: void setWallpaper(java.io.InputStream)> (2)
<android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<android.speech.RecognitionService: void setWallpaper(java.io.InputStream)> (2)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(java.io.InputStream)> (3)
<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)> (2)
<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)> (2)
<android.test.TestBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<android.test.TestListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.tts.TtsService: void setWallpaper(java.io.InputStream)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(java.io.InputStream)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BookmarkSearch: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.BrowserBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserBookmarksPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserDownloadPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserHistoryPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.Browser: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.WebsiteSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.widget.BookmarkWidgetService: void setWallpaper(java.io.InputStream)> (2)
<com.android.calculator2.Calculator: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AgendaActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AlertActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AlertService: void setWallpaper(java.io.InputStream)> (2)
<com.android.calendar.CalendarActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.DayActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.DismissAllAlarmsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.EditEvent: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.EventInfoActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.LaunchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.MonthActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.SelectCalendarsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.WeekActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.camera.Camera: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.NoSearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.VideoCamera: void setWallpaper(java.io.InputStream)> (3)
<com.android.certinstaller.CertFileList: void setWallpaper(java.io.InputStream)> (4)
<com.android.certinstaller.CertFile: void setWallpaper(java.io.InputStream)> (3)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(java.io.InputStream)> (4)
<com.android.certinstaller.CertInstaller: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.AttachImage: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.CallDetailActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactOptionsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.contacts.ContactsListActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.DialtactsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ExportVCardActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ImportVCardActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.RecentCallsListActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.SearchResultsActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.contacts.TwelveKeyDialer: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ui.EditContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ui.QuickContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.util.EmptyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.contacts.ViewContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.defcontainer.DefaultContainerService: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmAlert: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.AlarmClock: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmKlaxon: void setWallpaper(java.io.InputStream)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.SetAlarm: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AccountsTester: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppHwConfigList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppHwPref: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Connectivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.DataList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Details: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.DevelopmentSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Development: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.EnterURL: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.InstrumentationList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.LogViewer: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.MediaScannerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PackageBrowser: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PackageSummary: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PermissionDetails: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PointerLocation: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.ProcessInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.RunningProcesses: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.ShowActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.SyncAdapterDriver: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.UnderdevelopedSettings: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.AccountFolderList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.AccountShortcutPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.Debug: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.FolderMessageList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MailboxList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageCompose: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageView: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupExchange: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.UpgradeAccounts: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.Welcome: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.Email: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.MailService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.CalendarSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.ContactsSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.SyncManager: void setWallpaper(java.io.InputStream)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.LatinIMESettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ChooserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ResolverActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.RingtonePickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.launcher2.LauncherApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.launcher2.Launcher: void setWallpaper(java.io.InputStream)> (3)
<com.android.launcher2.WallpaperChooser: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.MmsApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.transaction.SmsReceiverService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mms.transaction.TransactionService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mms.ui.ClassZeroActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ComposeMessageActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ConversationList: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.DeliveryReportActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ManageSimMessages: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideEditorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideshowActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideshowEditActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.CreatePlaylist: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.DeleteItems: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPlaybackActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPlaybackService: void setWallpaper(java.io.InputStream)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MusicPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.QueryBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.RenamePlaylist: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.ScanningProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.StreamStarter: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.TrackBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.VideoBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.WeekSelector: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.ADNList: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.BluetoothHeadsetService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.CallFeaturesSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.CdmaCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.CdmaOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.CellBroadcastSms: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.ChangeIccPinScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.DataUsage: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.DeleteFdnContactScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EditFdnContactScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyCallbackModeService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.EmergencyCallHandler: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyDialer: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EnableFdnScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EnableIccPinScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FakePhoneActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FdnList: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FdnSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GetPin2Screen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.InCallScreenShowActivation: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.InCallScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.NetworkQueryService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.NetworkSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.OutgoingCallBroadcaster: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.PhoneApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.Settings: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.SimContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.applications.ApplicationLauncher: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.calendar.CalendarDebug: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.downloads.DownloadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.media.MediaScannerService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.settings.SettingsBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.ChoiceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.google.GoogleSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.server.LoadAverageService: void setWallpaper(java.io.InputStream)> (2)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.status.UsbStorageActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.SystemBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.server.vpn.VpnServiceBinder: void setWallpaper(java.io.InputStream)> (2)
<com.android.settings.AccessibilitySettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AccountPreferenceBase: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AccountSyncSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ActivityPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AddAccountSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ApnEditor: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ApnSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ApplicationSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AppWidgetPickActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.settings.BandMode: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.battery_history.BatteryHistory: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.BatteryInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.DockService: void setWallpaper(java.io.InputStream)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockGeneric: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPassword: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPatternExample: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPatternTutorial: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPattern: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ConfirmLockPassword: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ConfirmLockPattern: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.CreateShortcut: void setWallpaper(java.io.InputStream)> (4)
<com.android.settings.CredentialInstaller: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DateTimeSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DebugIntentSender: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DevelopmentSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DeviceAdminAdd: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DeviceAdminSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.deviceinfo.Memory: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DeviceInfoSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.deviceinfo.Status: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DisplaySettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Display: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DockSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.IccLockSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.InstalledAppDetails: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.LanguageSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.LocalePickerInSetupWizard: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.LocalePicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ManageAccountsSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ManageApplications: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.MasterClear: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.MediaFormat: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.PhysicalKeyboardSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.PrivacySettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ProxySelector: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.RadioInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.RunningServices: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SecuritySettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SettingsLicenseActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SoundSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.TestingSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.TetherSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.TextToSpeechSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.UsageStats: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.UserDictionarySettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.VoiceInputOutputSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.vpn.VpnEditor: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.vpn.VpnSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.vpn.VpnTypeSelection: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.AdvancedSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiAPITest: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiApSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiConfigInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiStatusTest: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.WirelessSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ZoneList: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ZonePicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(java.io.InputStream)> (3)
<com.android.spare_parts.SpareParts: void setWallpaper(java.io.InputStream)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.term.TermPreferences: void setWallpaper(java.io.InputStream)> (3)
<com.android.term.Term: void setWallpaper(java.io.InputStream)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.voicedialer.VoiceDialerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.cache.CacheService: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.ActiveWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.CropImage: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Gallery: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.MonitoredActivity: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.MovieView: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Photographs: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Wallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.picasa.PicasaService: void setWallpaper(java.io.InputStream)> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void setWallpaper(java.io.InputStream)> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.DownloadVoiceData: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.EngineSettings: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.GetSampleText: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.Pico: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserActivity$SetAsWallpaper: void run()> (2)
<android.accessibilityservice.AccessibilityService: void clearWallpaper()> (2)
<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()> (3)
<android.accounts.ChooseAccountActivity: void clearWallpaper()> (3)
<android.accounts.GrantCredentialsPermissionActivity: void clearWallpaper()> (3)
<android.app.ActivityGroup: void clearWallpaper()> (3)
<android.app.Activity: void clearWallpaper()> (3)
<android.app.AliasActivity: void clearWallpaper()> (3)
<android.app.Application: void clearWallpaper()> (2)
<android.app.backup.BackupAgentHelper: void clearWallpaper()> (3)
<android.app.backup.BackupAgent: void clearWallpaper()> (2)
<android.app.ExpandableListActivity: void clearWallpaper()> (3)
<android.app.FullBackupAgent: void clearWallpaper()> (3)
<android.app.IntentService: void clearWallpaper()> (2)
<android.app.LauncherActivity: void clearWallpaper()> (3)
<android.app.ListActivity: void clearWallpaper()> (3)
<android.app.ReceiverRestrictedContext: void clearWallpaper()> (2)
<android.app.Service: void clearWallpaper()> (2)
<android.app.TabActivity: void clearWallpaper()> (3)
<android.content.MutableContextWrapper: void clearWallpaper()> (2)
<android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()> (2)
<android.inputmethodservice.InputMethodService: void clearWallpaper()> (3)
<android.preference.PreferenceActivity: void clearWallpaper()> (3)
<android.service.urlrenderer.UrlRendererService: void clearWallpaper()> (2)
<android.service.wallpaper.WallpaperService: void clearWallpaper()> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void clearWallpaper()> (3)
<android.speech.RecognitionService: void clearWallpaper()> (2)
<android.test.ActivityUnitTestCase$MockParent: void clearWallpaper()> (3)
<android.test.IsolatedContext: void clearWallpaper()> (2)
<android.test.mock.MockApplication: void clearWallpaper()> (3)
<android.test.RenamingDelegatingContext: void clearWallpaper()> (2)
<android.test.TestBrowserActivity: void clearWallpaper()> (3)
<android.test.TestListActivity: void clearWallpaper()> (3)
<android.tts.TtsService: void clearWallpaper()> (2)
<android.view.ContextThemeWrapper: void clearWallpaper()> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppService: void clearWallpaper()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearWallpaper()> (3)
<com.android.bluetooth.opp.TestActivity: void clearWallpaper()> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void clearWallpaper()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void clearWallpaper()> (2)
<com.android.browser.AddBookmarkPage: void clearWallpaper()> (3)
<com.android.browser.BookmarkSearch: void clearWallpaper()> (3)
<com.android.browser.BrowserActivity: void clearWallpaper()> (3)
<com.android.browser.BrowserBackupAgent: void clearWallpaper()> (3)
<com.android.browser.BrowserBookmarksPage: void clearWallpaper()> (3)
<com.android.browser.BrowserDownloadPage: void clearWallpaper()> (3)
<com.android.browser.BrowserHistoryPage: void clearWallpaper()> (3)
<com.android.browser.BrowserPreferencesPage: void clearWallpaper()> (3)
<com.android.browser.Browser: void clearWallpaper()> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void clearWallpaper()> (3)
<com.android.browser.WebsiteSettingsActivity: void clearWallpaper()> (3)
<com.android.browser.widget.BookmarkWidgetService: void clearWallpaper()> (2)
<com.android.calculator2.Calculator: void clearWallpaper()> (3)
<com.android.calendar.AgendaActivity: void clearWallpaper()> (3)
<com.android.calendar.AlertActivity: void clearWallpaper()> (3)
<com.android.calendar.AlertService: void clearWallpaper()> (2)
<com.android.calendar.CalendarActivity: void clearWallpaper()> (3)
<com.android.calendar.CalendarApplication: void clearWallpaper()> (3)
<com.android.calendar.CalendarPreferenceActivity: void clearWallpaper()> (3)
<com.android.calendar.DayActivity: void clearWallpaper()> (4)
<com.android.calendar.DismissAllAlarmsService: void clearWallpaper()> (3)
<com.android.calendar.EditEvent: void clearWallpaper()> (3)
<com.android.calendar.EventInfoActivity: void clearWallpaper()> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void clearWallpaper()> (3)
<com.android.calendar.LaunchActivity: void clearWallpaper()> (3)
<com.android.calendar.MonthActivity: void clearWallpaper()> (3)
<com.android.calendar.SelectCalendarsActivity: void clearWallpaper()> (3)
<com.android.calendar.WeekActivity: void clearWallpaper()> (4)
<com.android.camera.Camera: void clearWallpaper()> (3)
<com.android.camera.NoSearchActivity: void clearWallpaper()> (3)
<com.android.camera.VideoCamera: void clearWallpaper()> (3)
<com.android.certinstaller.CertFileList: void clearWallpaper()> (4)
<com.android.certinstaller.CertFile: void clearWallpaper()> (3)
<com.android.certinstaller.CertInstallerMain: void clearWallpaper()> (4)
<com.android.certinstaller.CertInstaller: void clearWallpaper()> (3)
<com.android.contacts.AttachImage: void clearWallpaper()> (3)
<com.android.contacts.CallDetailActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactOptionsActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void clearWallpaper()> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void clearWallpaper()> (4)
<com.android.contacts.ContactsListActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void clearWallpaper()> (3)
<com.android.contacts.DialtactsActivity: void clearWallpaper()> (3)
<com.android.contacts.ExportVCardActivity: void clearWallpaper()> (3)
<com.android.contacts.ImportVCardActivity: void clearWallpaper()> (3)
<com.android.contacts.RecentCallsListActivity: void clearWallpaper()> (3)
<com.android.contacts.SearchResultsActivity: void clearWallpaper()> (4)
<com.android.contacts.TwelveKeyDialer: void clearWallpaper()> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void clearWallpaper()> (3)
<com.android.contacts.ui.EditContactActivity: void clearWallpaper()> (3)
<com.android.contacts.ui.QuickContactActivity: void clearWallpaper()> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void clearWallpaper()> (3)
<com.android.contacts.util.EmptyService: void clearWallpaper()> (2)
<com.android.contacts.ViewContactActivity: void clearWallpaper()> (3)
<com.android.defcontainer.DefaultContainerService: void clearWallpaper()> (3)
<com.android.deskclock.AlarmAlertFullScreen: void clearWallpaper()> (3)
<com.android.deskclock.AlarmAlert: void clearWallpaper()> (4)
<com.android.deskclock.AlarmClock: void clearWallpaper()> (3)
<com.android.deskclock.AlarmKlaxon: void clearWallpaper()> (2)
<com.android.deskclock.DeskClock: void clearWallpaper()> (3)
<com.android.deskclock.SetAlarm: void clearWallpaper()> (3)
<com.android.deskclock.SettingsActivity: void clearWallpaper()> (3)
<com.android.development.AccountsTester: void clearWallpaper()> (3)
<com.android.development.AppHwConfigList: void clearWallpaper()> (3)
<com.android.development.AppHwPref: void clearWallpaper()> (3)
<com.android.development.AppPicker: void clearWallpaper()> (3)
<com.android.development.BadBehaviorActivity$BadService: void clearWallpaper()> (2)
<com.android.development.BadBehaviorActivity: void clearWallpaper()> (3)
<com.android.development.Connectivity: void clearWallpaper()> (3)
<com.android.development.DataList: void clearWallpaper()> (3)
<com.android.development.Details: void clearWallpaper()> (3)
<com.android.development.DevelopmentSettings: void clearWallpaper()> (3)
<com.android.development.Development: void clearWallpaper()> (4)
<com.android.development.EnterURL: void clearWallpaper()> (3)
<com.android.development.InstrumentationList: void clearWallpaper()> (3)
<com.android.development.LogViewer: void clearWallpaper()> (3)
<com.android.development.MediaScannerActivity: void clearWallpaper()> (3)
<com.android.development.PackageBrowser: void clearWallpaper()> (3)
<com.android.development.PackageSummary: void clearWallpaper()> (3)
<com.android.development.PermissionDetails: void clearWallpaper()> (3)
<com.android.development.PointerLocation: void clearWallpaper()> (3)
<com.android.development.ProcessInfo: void clearWallpaper()> (3)
<com.android.development.RunningProcesses: void clearWallpaper()> (3)
<com.android.development.ShowActivity: void clearWallpaper()> (3)
<com.android.development.SyncAdapterDriver: void clearWallpaper()> (3)
<com.android.development.UnderdevelopedSettings: void clearWallpaper()> (4)
<com.android.email.activity.AccountFolderList: void clearWallpaper()> (3)
<com.android.email.activity.AccountShortcutPicker: void clearWallpaper()> (3)
<com.android.email.activity.Debug: void clearWallpaper()> (3)
<com.android.email.activity.FolderMessageList: void clearWallpaper()> (3)
<com.android.email.activity.MailboxList: void clearWallpaper()> (3)
<com.android.email.activity.MessageCompose: void clearWallpaper()> (3)
<com.android.email.activity.MessageList: void clearWallpaper()> (3)
<com.android.email.activity.MessageView: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSecurity: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSettings: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupBasics: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupExchange: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupNames: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupOptions: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void clearWallpaper()> (3)
<com.android.email.activity.UpgradeAccounts: void clearWallpaper()> (3)
<com.android.email.activity.Welcome: void clearWallpaper()> (3)
<com.android.email.Email: void clearWallpaper()> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void clearWallpaper()> (3)
<com.android.email.service.EasAuthenticatorService: void clearWallpaper()> (2)
<com.android.email.service.MailService: void clearWallpaper()> (2)
<com.android.exchange.CalendarSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.ContactsSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.SyncManager: void clearWallpaper()> (2)
<com.android.htmlviewer.HTMLViewerActivity: void clearWallpaper()> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void clearWallpaper()> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void clearWallpaper()> (4)
<com.android.inputmethod.latin.LatinIMESettings: void clearWallpaper()> (3)
<com.android.inputmethod.latin.LatinIME: void clearWallpaper()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void clearWallpaper()> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void clearWallpaper()> (3)
<com.android.internal.app.AlertActivity: void clearWallpaper()> (3)
<com.android.internal.app.ChooserActivity: void clearWallpaper()> (3)
<com.android.internal.app.DisableCarModeActivity: void clearWallpaper()> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void clearWallpaper()> (3)
<com.android.internal.app.NetInitiatedActivity: void clearWallpaper()> (3)
<com.android.internal.app.ResolverActivity: void clearWallpaper()> (3)
<com.android.internal.app.RingtonePickerActivity: void clearWallpaper()> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void clearWallpaper()> (3)
<com.android.launcher2.LauncherApplication: void clearWallpaper()> (3)
<com.android.launcher2.Launcher: void clearWallpaper()> (3)
<com.android.launcher2.WallpaperChooser: void clearWallpaper()> (3)
<com.android.mms.MmsApp: void clearWallpaper()> (3)
<com.android.mms.transaction.SmsReceiverService: void clearWallpaper()> (2)
<com.android.mms.transaction.TransactionService: void clearWallpaper()> (2)
<com.android.mms.ui.ClassZeroActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ComposeMessageActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ConversationList: void clearWallpaper()> (3)
<com.android.mms.ui.DeliveryReportActivity: void clearWallpaper()> (3)
<com.android.mms.ui.EditSlideDurationActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ManageSimMessages: void clearWallpaper()> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SearchActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideEditorActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideshowActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideshowEditActivity: void clearWallpaper()> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void clearWallpaper()> (3)
<com.android.music.AlbumBrowserActivity: void clearWallpaper()> (3)
<com.android.music.ArtistAlbumBrowserActivity: void clearWallpaper()> (3)
<com.android.music.CreatePlaylist: void clearWallpaper()> (3)
<com.android.music.DeleteItems: void clearWallpaper()> (3)
<com.android.music.MediaPickerActivity: void clearWallpaper()> (3)
<com.android.music.MediaPlaybackActivity: void clearWallpaper()> (3)
<com.android.music.MediaPlaybackService: void clearWallpaper()> (2)
<com.android.music.MusicBrowserActivity: void clearWallpaper()> (3)
<com.android.music.MusicPicker: void clearWallpaper()> (3)
<com.android.music.PlaylistBrowserActivity: void clearWallpaper()> (3)
<com.android.music.QueryBrowserActivity: void clearWallpaper()> (3)
<com.android.music.RenamePlaylist: void clearWallpaper()> (3)
<com.android.music.ScanningProgress: void clearWallpaper()> (3)
<com.android.music.StreamStarter: void clearWallpaper()> (3)
<com.android.music.TrackBrowserActivity: void clearWallpaper()> (3)
<com.android.music.VideoBrowserActivity: void clearWallpaper()> (3)
<com.android.music.WeekSelector: void clearWallpaper()> (3)
<com.android.packageinstaller.InstallAppProgress: void clearWallpaper()> (3)
<com.android.packageinstaller.PackageInstallerActivity: void clearWallpaper()> (3)
<com.android.packageinstaller.UninstallAppProgress: void clearWallpaper()> (3)
<com.android.packageinstaller.UninstallerActivity: void clearWallpaper()> (3)
<com.android.phone.ADNList: void clearWallpaper()> (3)
<com.android.phone.BluetoothHeadsetService: void clearWallpaper()> (2)
<com.android.phone.CallFeaturesSetting: void clearWallpaper()> (3)
<com.android.phone.CdmaCallOptions: void clearWallpaper()> (3)
<com.android.phone.CdmaOptions: void clearWallpaper()> (3)
<com.android.phone.CellBroadcastSms: void clearWallpaper()> (3)
<com.android.phone.ChangeIccPinScreen: void clearWallpaper()> (3)
<com.android.phone.DataUsage: void clearWallpaper()> (3)
<com.android.phone.DeleteFdnContactScreen: void clearWallpaper()> (3)
<com.android.phone.EditFdnContactScreen: void clearWallpaper()> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void clearWallpaper()> (3)
<com.android.phone.EmergencyCallbackModeService: void clearWallpaper()> (2)
<com.android.phone.EmergencyCallHandler: void clearWallpaper()> (3)
<com.android.phone.EmergencyDialer: void clearWallpaper()> (3)
<com.android.phone.EnableFdnScreen: void clearWallpaper()> (3)
<com.android.phone.EnableIccPinScreen: void clearWallpaper()> (3)
<com.android.phone.FakePhoneActivity: void clearWallpaper()> (3)
<com.android.phone.FdnList: void clearWallpaper()> (3)
<com.android.phone.FdnSetting: void clearWallpaper()> (3)
<com.android.phone.GetPin2Screen: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsCallOptions: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsOptions: void clearWallpaper()> (3)
<com.android.phone.InCallScreenShowActivation: void clearWallpaper()> (3)
<com.android.phone.InCallScreen: void clearWallpaper()> (3)
<com.android.phone.NetworkQueryService: void clearWallpaper()> (2)
<com.android.phone.NetworkSetting: void clearWallpaper()> (3)
<com.android.phone.OutgoingCallBroadcaster: void clearWallpaper()> (3)
<com.android.phone.PhoneApp: void clearWallpaper()> (3)
<com.android.phone.Settings: void clearWallpaper()> (3)
<com.android.phone.SimContacts: void clearWallpaper()> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void clearWallpaper()> (3)
<com.android.providers.applications.ApplicationLauncher: void clearWallpaper()> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void clearWallpaper()> (2)
<com.android.providers.calendar.CalendarDebug: void clearWallpaper()> (3)
<com.android.providers.downloads.DownloadService: void clearWallpaper()> (2)
<com.android.providers.media.MediaScannerService: void clearWallpaper()> (2)
<com.android.providers.settings.SettingsBackupAgent: void clearWallpaper()> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void clearWallpaper()> (4)
<com.android.provision.DefaultActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.ChoiceActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.google.GoogleSearch: void clearWallpaper()> (3)
<com.android.quicksearchbox.google.GoogleSettings: void clearWallpaper()> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchSettings: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void clearWallpaper()> (4)
<com.android.server.LoadAverageService: void clearWallpaper()> (2)
<com.android.server.PackageManagerBackupAgent: void clearWallpaper()> (3)
<com.android.server.ShutdownActivity: void clearWallpaper()> (3)
<com.android.server.status.UsbStorageActivity: void clearWallpaper()> (3)
<com.android.server.SystemBackupAgent: void clearWallpaper()> (4)
<com.android.server.vpn.VpnServiceBinder: void clearWallpaper()> (2)
<com.android.settings.AccessibilitySettings: void clearWallpaper()> (3)
<com.android.settings.AccountPreferenceBase: void clearWallpaper()> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void clearWallpaper()> (3)
<com.android.settings.AccountSyncSettings: void clearWallpaper()> (3)
<com.android.settings.ActivityPicker: void clearWallpaper()> (3)
<com.android.settings.AddAccountSettings: void clearWallpaper()> (3)
<com.android.settings.ApnEditor: void clearWallpaper()> (3)
<com.android.settings.ApnSettings: void clearWallpaper()> (3)
<com.android.settings.ApplicationSettings: void clearWallpaper()> (3)
<com.android.settings.AppWidgetPickActivity: void clearWallpaper()> (4)
<com.android.settings.BandMode: void clearWallpaper()> (3)
<com.android.settings.battery_history.BatteryHistory: void clearWallpaper()> (3)
<com.android.settings.BatteryInfo: void clearWallpaper()> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void clearWallpaper()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void clearWallpaper()> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void clearWallpaper()> (3)
<com.android.settings.bluetooth.DockService: void clearWallpaper()> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void clearWallpaper()> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void clearWallpaper()> (3)
<com.android.settings.ChooseLockGeneric: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPassword: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPatternExample: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPatternTutorial: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPattern: void clearWallpaper()> (3)
<com.android.settings.ConfirmLockPassword: void clearWallpaper()> (3)
<com.android.settings.ConfirmLockPattern: void clearWallpaper()> (3)
<com.android.settings.CreateShortcut: void clearWallpaper()> (4)
<com.android.settings.CredentialInstaller: void clearWallpaper()> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void clearWallpaper()> (3)
<com.android.settings.DateTimeSettings: void clearWallpaper()> (3)
<com.android.settings.DebugIntentSender: void clearWallpaper()> (3)
<com.android.settings.DevelopmentSettings: void clearWallpaper()> (3)
<com.android.settings.DeviceAdminAdd: void clearWallpaper()> (3)
<com.android.settings.DeviceAdminSettings: void clearWallpaper()> (3)
<com.android.settings.deviceinfo.Memory: void clearWallpaper()> (3)
<com.android.settings.DeviceInfoSettings: void clearWallpaper()> (3)
<com.android.settings.deviceinfo.Status: void clearWallpaper()> (3)
<com.android.settings.DisplaySettings: void clearWallpaper()> (3)
<com.android.settings.Display: void clearWallpaper()> (3)
<com.android.settings.DockSettings: void clearWallpaper()> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void clearWallpaper()> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void clearWallpaper()> (3)
<com.android.settings.IccLockSettings: void clearWallpaper()> (3)
<com.android.settings.InstalledAppDetails: void clearWallpaper()> (3)
<com.android.settings.LanguageSettings: void clearWallpaper()> (3)
<com.android.settings.LocalePickerInSetupWizard: void clearWallpaper()> (3)
<com.android.settings.LocalePicker: void clearWallpaper()> (3)
<com.android.settings.ManageAccountsSettings: void clearWallpaper()> (3)
<com.android.settings.ManageApplications: void clearWallpaper()> (3)
<com.android.settings.MasterClear: void clearWallpaper()> (3)
<com.android.settings.MediaFormat: void clearWallpaper()> (3)
<com.android.settings.PhysicalKeyboardSettings: void clearWallpaper()> (3)
<com.android.settings.PrivacySettings: void clearWallpaper()> (3)
<com.android.settings.ProxySelector: void clearWallpaper()> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void clearWallpaper()> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearWallpaper()> (3)
<com.android.settings.RadioInfo: void clearWallpaper()> (3)
<com.android.settings.RunningServices: void clearWallpaper()> (3)
<com.android.settings.SecuritySettings: void clearWallpaper()> (3)
<com.android.settings.SettingsLicenseActivity: void clearWallpaper()> (3)
<com.android.settings.SettingsSafetyLegalActivity: void clearWallpaper()> (3)
<com.android.settings.Settings: void clearWallpaper()> (3)
<com.android.settings.SoundSettings: void clearWallpaper()> (3)
<com.android.settings.SyncActivityTooManyDeletes: void clearWallpaper()> (3)
<com.android.settings.TestingSettings: void clearWallpaper()> (3)
<com.android.settings.TetherSettings: void clearWallpaper()> (3)
<com.android.settings.TextToSpeechSettings: void clearWallpaper()> (3)
<com.android.settings.UsageStats: void clearWallpaper()> (3)
<com.android.settings.UserDictionarySettings: void clearWallpaper()> (3)
<com.android.settings.VoiceInputOutputSettings: void clearWallpaper()> (3)
<com.android.settings.vpn.VpnEditor: void clearWallpaper()> (3)
<com.android.settings.vpn.VpnSettings: void clearWallpaper()> (3)
<com.android.settings.vpn.VpnTypeSelection: void clearWallpaper()> (3)
<com.android.settings.wifi.AdvancedSettings: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiAPITest: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiApSettings: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiConfigInfo: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiInfo: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiSettings: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiStatusTest: void clearWallpaper()> (3)
<com.android.settings.WirelessSettings: void clearWallpaper()> (3)
<com.android.settings.ZoneList: void clearWallpaper()> (3)
<com.android.settings.ZonePicker: void clearWallpaper()> (3)
<com.android.soundrecorder.SoundRecorder: void clearWallpaper()> (3)
<com.android.spare_parts.SpareParts: void clearWallpaper()> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void clearWallpaper()> (3)
<com.android.term.TermPreferences: void clearWallpaper()> (3)
<com.android.term.Term: void clearWallpaper()> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void clearWallpaper()> (3)
<com.android.voicedialer.VoiceDialerActivity: void clearWallpaper()> (3)
<com.cooliris.cache.CacheService: void clearWallpaper()> (3)
<com.cooliris.media.ActiveWallpaper: void clearWallpaper()> (3)
<com.cooliris.media.CropImage: void clearWallpaper()> (3)
<com.cooliris.media.Gallery: void clearWallpaper()> (3)
<com.cooliris.media.MonitoredActivity: void clearWallpaper()> (3)
<com.cooliris.media.MovieView: void clearWallpaper()> (3)
<com.cooliris.media.PhotoAppWidgetBind: void clearWallpaper()> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void clearWallpaper()> (3)
<com.cooliris.media.Photographs: void clearWallpaper()> (3)
<com.cooliris.media.Wallpaper: void clearWallpaper()> (3)
<com.cooliris.picasa.PicasaService: void clearWallpaper()> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void clearWallpaper()> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void clearWallpaper()> (3)
<com.svox.pico.CheckVoiceData: void clearWallpaper()> (3)
<com.svox.pico.DownloadVoiceData: void clearWallpaper()> (3)
<com.svox.pico.EngineSettings: void clearWallpaper()> (3)
<com.svox.pico.GetSampleText: void clearWallpaper()> (3)
<com.svox.pico.Pico: void clearWallpaper()> (3)
<com.android.browser.BrowserActivity$SetAsWallpaper: boolean onMenuItemClick(android.view.MenuItem)> (1)
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
68 Callers:
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (2)
<com.android.browser.BrowserActivity$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(java.lang.String)> (4)
<com.android.browser.BrowserActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserActivity: com.android.browser.BrowserActivity$UrlData getUrlDataFromIntent(android.content.Intent)> (2)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(android.net.Uri)> (1)
<com.android.browser.BrowserActivity: void loadUrlFromContext(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Tab: void activateVoiceSearchMode(android.content.Intent)> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void access$500(com.android.browser.BrowserActivity,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity$UrlData: void loadIn(com.android.browser.Tab)> (1)
<com.android.browser.Tab$5: void onIndexChanged(android.webkit.WebHistoryItem,int)> (1)
<com.android.browser.BrowserActivity: void loadUrlDataIn(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(com.android.browser.BrowserActivity$UrlData,boolean,java.lang.String)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(java.lang.String,boolean,java.lang.String)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTab(java.lang.String)> (3)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1200(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.BrowserActivity: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab access$700(com.android.browser.BrowserActivity,java.lang.String)> (1)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserActivity: void closeCurrentWindow()> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (3)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserSettings: void clearHistory(android.content.Context)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> (3)
<com.android.browser.BrowserActivity$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$2$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Tab$2$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksAdapter: void updateRow(android.os.Bundle)> (1)
<com.android.browser.BrowserBookmarksPage: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserBookmarksAdapter: void deleteAllRows()> ()
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (4)
<com.android.browser.BrowserBookmarksAdapter: void deleteRow(int)> (1)
<com.android.browser.HistoryItem$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void deleteBookmark(int)> (1)
<com.android.browser.BrowserBookmarksPage$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BrowserActivity$6: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$6: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Tab$3$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$3$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean)> (3)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
Permission:android.permission.REORDER_TASKS
11 Callers:
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int)> (1)
<android.app.ActivityManagerNative: void moveTaskToFront(int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void moveTaskToFront(int)> ()
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> (1)
<android.app.ActivityManagerNative: void moveTaskToBack(int)> (2)
<android.app.IActivityManager: void moveTaskToBack(int)> ()
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> (1)
<android.app.ActivityManagerNative: void moveTaskBackwards(int)> (2)
<android.app.IActivityManager: void moveTaskBackwards(int)> ()
Permission:android.permission.SET_PROCESS_LIMIT
17 Callers:
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.DevelopmentSettings: void writeProcessLimitOptions()> (1)
<com.android.development.DevelopmentSettings: void access$1900(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings$9: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> (1)
<android.app.ActivityManagerNative: void setProcessForeground(android.os.IBinder,int,boolean)> (2)
<android.app.IActivityManager: void setProcessForeground(android.os.IBinder,int,boolean)> (1)
<com.android.server.NotificationManagerService: void keepProcessAliveLocked(int)> (3)
<com.android.server.NotificationManagerService: void cancelToastLocked(int)> (2)
<com.android.server.NotificationManagerService: void showNextToastLocked()> (2)
<com.android.server.NotificationManagerService: void handleTimeout(com.android.server.NotificationManagerService$ToastRecord)> (1)
<com.android.server.NotificationManagerService: void access$2300(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$ToastRecord)> (2)
<com.android.server.NotificationManagerService: void scheduleTimeoutLocked(com.android.server.NotificationManagerService$ToastRecord,boolean)> (1)
Permission:android.permission.WRITE_APN_SETTINGS
45 Callers:
<com.android.providers.telephony.TelephonyProvider: void checkPermission()> (3)
<com.android.providers.telephony.TelephonyProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.telephony.TelephonyProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.telephony.TelephonyProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setPreferredApn(int)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.util.ArrayList buildWaitingApns()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllApnList()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String)> (12)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onGprsAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startPeriodicPdpPoll()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void runPingTest()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void access$3200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2$1: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.settings.ApnSettings: void setSelectedApnKey(java.lang.String)> (1)
<com.android.settings.ApnSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.ApnSettings: android.net.Uri access$400()> (2)
<com.android.settings.ApnSettings: boolean restoreDefaultApn()> (1)
<com.android.settings.ApnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.internal.telephony.gsm.GSMPhone: boolean updateCurrentCarrierInProvider()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.ACCESS_FINE_LOCATION
105 Callers:
<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> (2)
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> (2)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> (1)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.cooliris.media.ReverseGeocoder: java.lang.String computeMostGranularCommonLocation(com.cooliris.media.MediaSet)> (2)
<android.location.LocationManager: android.location.LocationProvider best(java.util.List)> (1)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (4)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateSetViewDetailModeStrings(android.content.Context,com.cooliris.media.MediaSet,int)> (1)
<com.cooliris.media.ReverseGeocoder: boolean process(com.cooliris.media.MediaSet)> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.Camera: void startReceivingLocationUpdates()> (3)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateDetailModeStrings(android.content.Context,java.util.ArrayList)> (1)
<com.cooliris.media.ReverseGeocoder: void run()> (2)
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<android.webkit.GeolocationService: void start()> ()
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (2)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (1)
<com.cooliris.media.HudLayer$14: void run()> (1)
<com.cooliris.media.ReverseGeocoder: void <init>(android.content.Context)> (1)
<com.android.camera.Camera: void access$900(com.android.camera.Camera)> (3)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$6300(com.android.camera.Camera)> (1)
<com.cooliris.app.App: void <init>(android.content.Context)> (6)
<com.android.camera.Camera$MyHeadUpDisplayListener$1: void run()> (1)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.Photographs: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(boolean)> (2)
<android.location.ILocationManager: java.util.List getProviders(boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (1)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
Permission:android.permission.USE_CREDENTIALS
268 Callers:
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$4: void doWork()> (1)
<android.accounts.AccountManager$5: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.email.mail.store.ExchangeStore: android.accounts.AccountManagerFuture addSystemAccount(android.content.Context,com.android.email.provider.EmailContent$Account,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.AddAccountSettings: void addAccount(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences)> (1)
<com.android.email.activity.setup.AccountSetupOptions: void onDone()> (1)
<com.android.settings.AddAccountSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AddAccountSettings: void onAuthDescriptionsUpdated()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void onClick(android.view.View)> (1)
<com.android.settings.AccountPreferenceBase: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.exchange.SyncManager: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.AccountPreferenceBase: void updateAuthDescriptions()> (4)
<com.android.settings.AccountSyncSettings: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AddAccountSettings: void updateAuthDescriptions()> (2)
<com.android.settings.ManageAccountsSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.android.settings.AccountSyncSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AddAccountSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController,com.android.internal.policy.impl.LockPatternKeyguardViewTest$1)> (1)
<com.android.settings.AccountPreferenceBase: void onCreate(android.os.Bundle)> (5)
<com.android.settings.AccountSyncSettingsInAddAccount: void onCreate(android.os.Bundle)> (4)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void setUp()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (7)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.WindowManagerService$1: void acquired()> (1)
<com.android.server.WindowManagerService$1: void released()> (1)
<com.android.server.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (9)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void wakeWhenReadyTq(int)> (7)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.server.PowerManagerService$3: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.server.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuDoesntGoToUnlockScreenOnWakeWhenPukLocked()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuGoesToLockScreenWhenDeviceNotSecure()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testScreenRequestsRecreation()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByMenuKeyWhenPatternSet()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByNonMenuKey()> ()
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object findTargetWindow(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,int,int)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (4)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
Permission:android.permission.READ_CONTACTS
805 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: java.util.ArrayList loadFromEf(int)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.providers.contacts.LegacyContactImporter: void updateDisplayNamesAndLookupKeys()> (1)
<com.android.providers.contacts.LegacyContactImporter: void importContactsFromLegacyDb()> (1)
<com.android.providers.contacts.LegacyContactImporter: boolean importContacts()> (1)
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)> (1)
<com.android.contacts.ContactsListActivity: android.graphics.Bitmap loadContactPhoto(android.net.Uri,android.graphics.BitmapFactory$Options)> (5)
<com.android.contacts.ContactsListActivity: android.graphics.Bitmap generatePhoneNumberIcon(android.net.Uri,int,int)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.graphics.Bitmap loadContactPhoto(android.net.Uri,android.graphics.BitmapFactory$Options)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.graphics.Bitmap loadContactPhoto(android.net.Uri,android.graphics.BitmapFactory$Options)> (1)
<com.android.contacts.ContactsListActivity: void returnPickerResult(android.database.Cursor,java.lang.String,android.net.Uri)> (5)
<com.android.contacts.SearchResultsActivity: android.graphics.Bitmap loadContactPhoto(android.net.Uri,android.graphics.BitmapFactory$Options)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.graphics.Bitmap generatePhoneNumberIcon(android.net.Uri,int,int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.graphics.Bitmap generatePhoneNumberIcon(android.net.Uri,int,int)> (1)
<com.android.contacts.SearchResultsActivity: android.graphics.Bitmap generatePhoneNumberIcon(android.net.Uri,int,int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void returnPickerResult(android.database.Cursor,java.lang.String,android.net.Uri)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void returnPickerResult(android.database.Cursor,java.lang.String,android.net.Uri)> (1)
<com.android.contacts.ContactsListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (4)
<com.android.contacts.SearchResultsActivity: void returnPickerResult(android.database.Cursor,java.lang.String,android.net.Uri)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.SearchResultsActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.providers.contacts.SocialProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.calendar.EventInfoActivity: void addAttendeesToLayout(java.util.ArrayList,android.widget.LinearLayout,java.lang.CharSequence)> (1)
<com.android.calendar.EventInfoActivity: void updateAttendees()> (1)
<com.android.calendar.EventInfoActivity: void initAttendeesCursor()> (1)
<com.android.calendar.EventInfoActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (10)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void access$500(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.internal.widget.ContactHeaderWidget: void bindFromEmail(java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,java.lang.String,java.lang.String,android.content.Context,boolean)> (3)
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,android.content.Context)> (1)
<com.android.contacts.model.GoogleSource: void createMyContactsIfNotExist(android.accounts.Account,android.content.Context)> (2)
<com.android.contacts.ui.EditContactActivity: void createContact(android.accounts.Account)> (2)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSdCard(android.content.Context,android.accounts.Account)> (1)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSim(android.content.Context,android.accounts.Account)> (1)
<com.android.contacts.ui.EditContactActivity: void access$200(com.android.contacts.ui.EditContactActivity,android.accounts.Account)> (1)
<com.android.contacts.ui.EditContactActivity: void selectAccountAndCreateContact(java.util.ArrayList)> (1)
<com.android.contacts.util.AccountSelectionUtil: void doImport(android.content.Context,int,android.accounts.Account)> (2)
<com.android.contacts.ui.EditContactActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(com.android.contacts.ui.EditContactActivity,java.util.ArrayList)> (1)
<com.android.contacts.ContactsListActivity: void handleImportRequest(int)> (4)
<com.android.contacts.util.AccountSelectionUtil$AccountSelectedListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (4)
<com.android.contacts.SearchResultsActivity: void handleImportRequest(int)> (1)
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ContactsListActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.SearchResultsActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object)> (6)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (2)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.contacts.ViewContactActivity: android.database.Cursor setupContactCursor(android.content.ContentResolver,android.net.Uri)> (1)
<com.android.contacts.ViewContactActivity: void startEntityQuery()> (4)
<com.android.contacts.ViewContactActivity: boolean makeItemDefault(android.view.MenuItem)> (1)
<com.android.contacts.ViewContactActivity: void access$100(com.android.contacts.ViewContactActivity)> (1)
<com.android.contacts.ViewContactActivity: void joinAggregate(long)> (1)
<com.android.contacts.ViewContactActivity: void onResume()> (1)
<com.android.contacts.ViewContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ViewContactActivity$1: void onChange(boolean)> (1)
<com.android.contacts.ContactsListActivity: android.database.Cursor queryPhoneNumbers(long)> (5)
<com.android.contacts.ContactsListActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.database.Cursor queryPhoneNumbers(long)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.database.Cursor queryPhoneNumbers(long)> (1)
<com.android.contacts.ContactsListActivity: void onCreate(android.os.Bundle)> (4)
<com.android.contacts.SearchResultsActivity: android.database.Cursor queryPhoneNumbers(long)> (1)
<com.android.contacts.ContactsListActivity: boolean callContact(android.database.Cursor)> (6)
<com.android.contacts.ContactsListActivity: boolean smsContact(android.database.Cursor)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.SearchResultsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.ContactsListActivity: boolean callSelection()> (4)
<com.android.contacts.ContactsListActivity: boolean onContextItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity: void onClick(android.view.View)> (4)
<com.android.contacts.SearchResultsActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.SearchResultsActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.SearchResultsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onClick(android.view.View)> (1)
<com.android.contacts.SearchResultsActivity: void onClick(android.view.View)> (1)
<com.android.providers.contacts.SocialProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (6)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (1)
<android.pim.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (2)
<android.pim.vcard.VCardComposer: boolean init()> (1)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.contacts.ExportVCardActivity$ActualExportThread: void run()> (2)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (1)
<com.android.contacts.ExportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.mms.ui.RecipientsAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<com.android.contacts.ui.EditContactActivity: void joinAggregate(long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.ContactsListActivity: void doShareVisibleContacts()> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void doShareVisibleContacts()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void doShareVisibleContacts()> (1)
<com.android.contacts.ContactsListActivity: void access$400(com.android.contacts.ContactsListActivity)> (4)
<com.android.contacts.SearchResultsActivity: void doShareVisibleContacts()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void access$400(com.android.contacts.ContactsListActivity)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void access$400(com.android.contacts.ContactsListActivity)> (1)
<com.android.contacts.SearchResultsActivity: void access$400(com.android.contacts.ContactsListActivity)> (1)
<com.android.phone.BluetoothAtPhonebook: java.lang.String getLastDialledNumber()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$4800(com.android.phone.BluetoothHandsfree)> (3)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.contacts.CallDetailActivity: void updateData(android.net.Uri)> (1)
<com.android.contacts.CallDetailActivity: void onResume()> (2)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (4)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$3: void run()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (4)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.contacts.ContactsListActivity: java.lang.String getContactDisplayName(long)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: java.lang.String getContactDisplayName(long)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: java.lang.String getContactDisplayName(long)> (1)
<com.android.contacts.SearchResultsActivity: java.lang.String getContactDisplayName(long)> (1)
<com.android.contacts.ContactPhotoLoader$LoaderThread: void loadPhotosFromDatabase()> (1)
<android.pim.vcard.VCardComposer: java.lang.String createOneEntryInternal(java.lang.String,java.lang.reflect.Method)> (2)
<android.pim.vcard.VCardComposer: boolean createOneEntry(java.lang.reflect.Method)> (1)
<android.pim.vcard.VCardComposer: java.lang.String access$300(android.pim.vcard.VCardComposer,java.lang.String,java.lang.reflect.Method)> (1)
<android.pim.vcard.VCardComposer: boolean createOneEntry()> (3)
<android.pim.vcard.VCardComposer$HandlerForOutputStream: boolean onInit(android.content.Context)> (1)
<android.pim.vcard.VCardEntry: android.net.Uri pushIntoContentResolver(android.content.ContentResolver)> (1)
<android.pim.vcard.VCardEntryCommitter: void onEntryCreated(android.pim.vcard.VCardEntry)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (5)
<com.android.contacts.ContactsListActivity: android.database.Cursor doFilter(java.lang.String)> (4)
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity: void startQuery()> (8)
<com.android.contacts.SearchResultsActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity: boolean checkProviderState(boolean)> (6)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void onContentChanged()> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: void onRestart()> (5)
<com.android.contacts.ContactsListActivity: void onResume()> (5)
<com.android.contacts.SearchResultsActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onRestart()> (3)
<com.android.contacts.SearchResultsActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onResume()> (3)
<com.android.contacts.SearchResultsActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$1: void onChange(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactInfoLoaded(android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$600(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$AccountDisplay: void <init>(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: com.android.contacts.ui.ContactsPreferencesActivity$AccountSet doInBackground(com.android.contacts.ui.ContactsPreferencesActivity,java.lang.Void[])> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (6)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> (6)
<com.android.contacts.ContactsListActivity: boolean deleteSelection()> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean deleteSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean deleteSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean deleteSelection()> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (8)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> (1)
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (4)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.internal.widget.ContactHeaderWidget$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactIdLoaded(android.database.Cursor,int,int)> (1)
<com.android.calendar.EventInfoActivity: void showContactInfo(com.android.calendar.EventInfoActivity$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.MessageView: void onClickSender()> (1)
<com.android.contacts.ImportVCardActivity$VCardReadThread: void run()> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.ui.EditContactActivity,com.android.contacts.model.EntitySet[])> (1)
<com.android.contacts.ui.QuickContactActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.ViewContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$400(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor,int,int)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.contacts.ImportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.ui.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.internal.widget.ContactHeaderWidget: void startPhotoQuery(long,android.net.Uri,boolean)> (1)
<com.android.contacts.ContactsListActivity: void doContactDelete(android.net.Uri)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.contacts.SearchResultsActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.contacts.RecentCallsListActivity: java.lang.String getBetterNumberFromContacts(java.lang.String)> (1)
<com.android.contacts.RecentCallsListActivity: void callEntry(int)> (1)
<com.android.contacts.RecentCallsListActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (5)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<android.pim.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)> (1)
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.server.DemoThread: void run()> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.phone.BluetoothAtPhonebook: boolean queryPhonebook(java.lang.String,com.android.phone.BluetoothAtPhonebook$PhonebookResult)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult access$400(com.android.phone.BluetoothAtPhonebook,java.lang.String,boolean)> (4)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleReadCommand()> (21)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean startInitialQuery()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$900(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache: com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData get(java.lang.String)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<com.android.contacts.ui.QuickContactWindow: android.net.Uri getDataUri(android.net.Uri)> (1)
<com.android.contacts.ui.QuickContactWindow: void show(android.net.Uri,android.graphics.Rect,int,java.lang.String[])> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactFilterUri(java.lang.String)> (6)
<com.android.contacts.ContactsListActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.calendar.EmailAddressAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.CallLogAsync$GetLastOutgoingCallTask: java.lang.String doInBackground(com.android.phone.CallLogAsync$GetLastOutgoingCallArgs[])> (1)
<com.android.phone.CallLogAsync$GetLastOutgoingCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.EmailAddressAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.exchange.provider.GalEmailAddressAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.contacts.model.EntityDelta: void buildAssert(java.util.ArrayList)> (1)
<com.android.contacts.model.EntitySet: java.util.ArrayList buildDiff()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveEmailContact(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2800(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.internal.widget.ContactHeaderWidget: void bindFromPhoneNumber(java.lang.String)> ()
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: boolean queryContactInfo(com.android.contacts.RecentCallsListActivity$CallerInfoQuery)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void run()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.PhoneUtils$4: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (3)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.contacts.ContactsUtils: long queryForContactId(android.content.ContentResolver,long)> (1)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: com.android.contacts.model.EntitySet doInBackground(com.android.contacts.ui.EditContactActivity,android.content.Intent[])> (1)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNumberList()> (1)
<com.android.contacts.ContactsUtils: java.lang.String querySuperPrimaryPhone(android.content.ContentResolver,long)> ()
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (4)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.ui.ConversationListItemData)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.contacts.ui.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<com.android.email.activity.MessageView$PresenceCheckTask: java.lang.Integer doInBackground(java.lang.String[])> (1)
<com.android.email.activity.MessageView$PresenceCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.ContactsUtils: long queryForRawContactId(android.content.ContentResolver,long)> (1)
<com.android.contacts.ContactsListActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (6)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.contacts.SearchResultsActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.contacts.ContactsUtils: android.graphics.Bitmap loadContactPhoto(android.content.Context,long,android.graphics.BitmapFactory$Options)> ()
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (1)
<com.android.mms.data.Contact$ContactsCache: byte[] loadAvatarData(com.android.mms.data.Contact)> (2)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.contacts.AttachImage: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.ui.ContactsPreferencesActivity$GroupDelta: com.android.contacts.ui.ContactsPreferencesActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)> (1)
<com.android.contacts.ContactsUtils: java.util.ArrayList queryForAllRawContactIds(android.content.ContentResolver,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.RecentCallsListActivity: void startQuery()> (2)
<com.android.contacts.RecentCallsListActivity: void access$000(com.android.contacts.RecentCallsListActivity)> (2)
<com.android.contacts.RecentCallsListActivity: void onResume()> (2)
<com.android.contacts.RecentCallsListActivity$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void onContentChanged()> (1)
<com.android.contacts.GroupingListAdapter: void onContentChanged()> (1)
<com.android.contacts.GroupingListAdapter$1: void onChange(boolean)> (1)
<com.android.contacts.model.EntitySet: com.android.contacts.model.EntitySet fromQuery(android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Void doInBackground(android.app.Activity,com.android.contacts.ui.ContactsPreferencesActivity$AccountSet[])> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.ContactsListActivity$2: void onClick(android.view.View)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.contacts.ViewContactActivity: void setAggregationException(long,int)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.server.DemoDataSet: void add(android.content.Context)> (1)
<com.android.contacts.ui.EditContactActivity: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.contacts.model.EntitySet: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<com.android.contacts.PhoneDisambigDialog: void onClick(android.content.DialogInterface,int)> (2)
<com.android.contacts.PhoneDisambigDialog: void show()> (1)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.MANAGE_ACCOUNTS
344 Callers:
<android.accounts.AccountManagerService: void checkManageAccountsPermission()> (6)
<android.accounts.AccountManagerService: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManagerService: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (2)
<android.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void clearPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> ()
<android.accounts.IAccountManager$Stub: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> ()
<android.accounts.IAccountManager$Stub: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (1)
<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (1)
<android.accounts.IAccountManager: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (1)
<android.accounts.IAccountManager: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (1)
<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (1)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$6: void doWork()> (1)
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManager$7: void doWork()> (1)
<android.accounts.AccountManager$9: void doWork()> (1)
<android.accounts.AccountManager$3: void doWork()> (1)
<android.accounts.AccountManager$8: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.test.IsolatedContext$MockAccountManager: void clearPassword(android.accounts.Account)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (4)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (3)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.email.mail.store.ExchangeStore: android.accounts.AccountManagerFuture addSystemAccount(android.content.Context,com.android.email.provider.EmailContent$Account,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.AddAccountSettings: void addAccount(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences)> (1)
<com.android.email.activity.setup.AccountSetupOptions: void onDone()> (1)
<com.android.settings.AddAccountSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AddAccountSettings: void onAuthDescriptionsUpdated()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (7)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void onClick(android.view.View)> (1)
<com.android.settings.AccountPreferenceBase: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (1)
<com.cooliris.picasa.PicasaApi: android.accounts.Account[] getAccounts(android.content.Context)> (3)
<com.cooliris.picasa.PicasaService: boolean getIsSyncable(android.content.Context,android.accounts.Account)> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.mail.store.ExchangeStore: android.accounts.AccountManagerFuture removeSystemAccount(android.content.Context,com.android.email.provider.EmailContent$Account,android.accounts.AccountManagerCallback)> ()
<com.android.email.provider.EmailProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.exchange.SyncManager$AccountObserver: void onAccountChanged()> (1)
<com.android.exchange.SyncManager: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.settings.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.exchange.SyncManager: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.AccountPreferenceBase: void updateAuthDescriptions()> (4)
<com.android.settings.AccountSyncSettings: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaService: void requestSync(android.content.Context,int,long)> (2)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<com.android.exchange.SyncManager$AccountObserver: void access$500(com.android.exchange.SyncManager$AccountObserver)> (2)
<com.android.exchange.SyncManager$3: void run()> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AddAccountSettings: void updateAuthDescriptions()> (2)
<com.android.settings.ManageAccountsSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<com.android.exchange.SyncManager$AccountObserver$1: void run()> (1)
<com.android.exchange.SyncManager: void runAccountReconciler()> (2)
<com.android.settings.AccountSyncSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AddAccountSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController,com.android.internal.policy.impl.LockPatternKeyguardViewTest$1)> (1)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.android.exchange.SyncManager: void access$900(com.android.exchange.SyncManager)> (1)
<com.android.exchange.SyncManager: void onCreate()> (1)
<com.android.settings.AccountPreferenceBase: void onCreate(android.os.Bundle)> (5)
<com.android.settings.AccountSyncSettingsInAddAccount: void onCreate(android.os.Bundle)> (4)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void setUp()> (1)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.android.exchange.SyncManager$EasAccountsUpdatedListener: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (7)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.WindowManagerService$1: void acquired()> (1)
<com.android.server.WindowManagerService$1: void released()> (1)
<com.android.server.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (9)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void wakeWhenReadyTq(int)> (7)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.server.PowerManagerService$3: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.server.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuDoesntGoToUnlockScreenOnWakeWhenPukLocked()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuGoesToLockScreenWhenDeviceNotSecure()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testScreenRequestsRecreation()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByMenuKeyWhenPatternSet()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByNonMenuKey()> ()
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object findTargetWindow(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,int,int)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (4)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
Permission:android.permission.WRITE_SYNC_SETTINGS
70 Callers:
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ()
<android.content.IContentService$Stub: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (7)
<android.app.ContextImpl$ApplicationContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<com.android.email.activity.setup.AccountSettings: void saveSettings()> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternal()> (1)
<com.android.settings.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.setup.AccountSettings: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> (1)
<com.android.settings.AccountSyncSettingsInAddAccount: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.email.ExchangeUtils: void enableEasCalendarSync(android.content.Context)> (1)
<com.android.email.OneTimeInitializer: void initialize(android.content.Context)> (1)
<com.android.email.OneTimeInitializer: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ()
<android.content.IContentService$Stub: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.content.IContentService$Stub: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ()
<android.content.IContentService$Stub: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (7)
<android.app.ContextImpl$ApplicationContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<android.content.SyncManager$InitializerServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> ()
<android.content.IContentService$Stub: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService: void setMasterSyncAutomatically(boolean)> (1)
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> (5)
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()> ()
<com.android.settings.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleSync(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
Permission:android.permission.BROADCAST_STICKY
1457 Callers:
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)> (7)
<com.android.internal.telephony.cdma.CDMAPhone: boolean enableDataConnectivity()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void sendEmergencyCallbackModeChange()> (2)
<com.android.internal.telephony.IccCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (5)
<com.android.server.am.ActivityManagerService: void broadcastStickyIntent(android.content.Intent,java.lang.String)> (1)
<com.android.server.BatteryService: void sendIntent()> (1)
<com.android.server.HeadsetObserver: void sendIntent(int,int,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.gsm.SimCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.IccCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (3)
<com.android.server.BatteryService: void update()> (2)
<com.android.server.HeadsetObserver: void sendIntents(int,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.cdma.RuimRecords: void onRuimReady()> (1)
<com.android.internal.telephony.gsm.SIMRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.gsm.SIMRecords: void onSimReady()> (1)
<com.android.internal.telephony.cdma.RuimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.gsm.SimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.IccCard: void getIccCardStatusDone(android.os.AsyncResult)> (3)
<com.android.server.BatteryService: void access$000(com.android.server.BatteryService)> (1)
<com.android.server.BatteryService: void <init>(android.content.Context)> (1)
<com.android.server.HeadsetObserver: void access$000(com.android.server.HeadsetObserver,int,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.gsm.SIMRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.cdma.RuimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.IccCard: void access$000(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (3)
<com.android.server.BatteryService$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.telephony.IccRecords: void onRecordLoaded()> ()
<com.android.internal.telephony.cdma.RuimCard: void access$000(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void access$000(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void sendStickyBroadcast(android.content.Intent)> (26)
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> (380)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateTracker: void sendNetworkStateChangeBroadcast(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateSpnDisplay()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateSpnDisplay()> (5)
<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionFailed(java.lang.String)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionStateChanged(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.server.TelephonyRegistry: void broadcastServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.server.TelephonyRegistry: void broadcastSignalStrengthChanged(android.telephony.SignalStrength)> (1)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.ThrottleService$MyHandler: void clearThrottleAndNotification()> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.WifiService: void setWifiApEnabledState(int,int,com.android.server.WifiService$DriverAction)> (2)
<com.android.server.WifiService: void setWifiEnabledState(int,int)> (1)
<com.android.server.DockObserver: void update()> (2)
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.accounts.ChooseAccountActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ActivityGroup: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.Application: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.ExpandableListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.FullBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.IntentService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.content.MutableContextWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyBroadcast(android.content.Intent)> (3)
<android.preference.PreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.service.urlrenderer.UrlRendererService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.speech.RecognitionService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.IsolatedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.TestBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.TestListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.tts.TtsService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.TestActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BookmarkSearch: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBookmarksPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserDownloadPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserHistoryPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.Browser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.WebsiteSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkWidgetService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.calculator2.Calculator: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AgendaActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AlertService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.CalendarActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.DayActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.DismissAllAlarmsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.EditEvent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.EventInfoActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.LaunchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.MonthActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.SelectCalendarsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.WeekActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.Camera: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.NoSearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.VideoCamera: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertFileList: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertFile: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertInstallerMain: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertInstaller: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.AttachImage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallDetailActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactOptionsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.ContactsListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.DialtactsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ExportVCardActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ImportVCardActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.RecentCallsListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.SearchResultsActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.TwelveKeyDialer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.EditContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.QuickContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.util.EmptyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.ViewContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.defcontainer.DefaultContainerService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlert: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.AlarmClock: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmKlaxon: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SetAlarm: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AccountsTester: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwConfigList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwPref: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Connectivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DataList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Details: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DevelopmentSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Development: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.EnterURL: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.InstrumentationList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.LogViewer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.MediaScannerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageBrowser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageSummary: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PermissionDetails: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PointerLocation: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ProcessInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.RunningProcesses: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ShowActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.SyncAdapterDriver: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.UnderdevelopedSettings: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.AccountFolderList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.AccountShortcutPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Debug: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.FolderMessageList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MailboxList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageCompose: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageView: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSecurity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupExchange: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.UpgradeAccounts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Welcome: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.Email: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.MailService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.CalendarSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ContactsSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.SyncManager: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.LatinIMESettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIME: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ChooserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.DisableCarModeActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.NetInitiatedActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ResolverActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.RingtonePickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.LauncherApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.Launcher: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.WallpaperChooser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.MmsApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.transaction.SmsReceiverService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.ui.ClassZeroActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ComposeMessageActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConversationList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.DeliveryReportActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ManageSimMessages: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideEditorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowEditActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.CreatePlaylist: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.DeleteItems: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.PlaylistBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.QueryBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.RenamePlaylist: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ScanningProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.StreamStarter: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.TrackBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.VideoBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.WeekSelector: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.InstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ADNList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.BluetoothHeadsetService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.CallFeaturesSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CellBroadcastSms: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ChangeIccPinScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DataUsage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DeleteFdnContactScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EditFdnContactScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.EmergencyCallHandler: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyDialer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableFdnScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableIccPinScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FakePhoneActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GetPin2Screen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreenShowActivation: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.NetworkQueryService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.NetworkSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.OutgoingCallBroadcaster: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.PhoneApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.Settings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SimContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.applications.ApplicationLauncher: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.calendar.CalendarDebug: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.downloads.DownloadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.media.MediaScannerService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.settings.SettingsBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.ChoiceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.server.LoadAverageService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.server.PackageManagerBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.status.UsbStorageActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.SystemBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.server.vpn.VpnServiceBinder: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.AccessibilitySettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountPreferenceBase: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountSyncSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ActivityPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AddAccountSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApplicationSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AppWidgetPickActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.BandMode: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.battery_history.BatteryHistory: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.BatteryInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DockService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockGeneric: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPassword: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternExample: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternTutorial: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPattern: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPassword: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPattern: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CreateShortcut: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.CredentialInstaller: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DebugIntentSender: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DevelopmentSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminAdd: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Memory: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceInfoSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Status: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DisplaySettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Display: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DockSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.IccLockSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.InstalledAppDetails: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LanguageSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LocalePickerInSetupWizard: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LocalePicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ManageAccountsSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ManageApplications: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MasterClear: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MediaFormat: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.PhysicalKeyboardSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.PrivacySettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ProxySelector: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RadioInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RunningServices: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsLicenseActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SoundSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TestingSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TetherSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TextToSpeechSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UsageStats: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UserDictionarySettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.VoiceInputOutputSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnTypeSelection: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.AdvancedSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiAPITest: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiApSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiConfigInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiStatusTest: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.WirelessSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ZoneList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ZonePicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.soundrecorder.SoundRecorder: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.spare_parts.SpareParts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.term.TermPreferences: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.term.Term: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.VoiceDialerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.cache.CacheService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.ActiveWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.CropImage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Gallery: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MonitoredActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MovieView: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Photographs: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Wallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.picasa.PicasaService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void sendStickyBroadcast(android.content.Intent)> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.DownloadVoiceData: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.EngineSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.GetSampleText: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.Pico: void sendStickyBroadcast(android.content.Intent)> (3)
<android.net.wifi.WifiStateTracker: void handleDisconnectedState(android.net.NetworkInfo$DetailedState,boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitz()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.ServiceStateTracker: void updateSpnDisplay()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitz()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)> (3)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (2)
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.WifiService: boolean setWifiApEnabledBlocking(boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.WifiService: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService: boolean setWifiEnabledBlocking(boolean,boolean,int)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<android.net.wifi.WifiStateTracker: void scheduleDisconnect()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnectionFailed(java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.WifiService: boolean access$2100(com.android.server.WifiService,boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.WifiService: void access$600(com.android.server.WifiService,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService: boolean access$1600(com.android.server.WifiService,boolean,boolean,int)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void onChange(boolean)> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.server.ConnectivityService: void access$600(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.internal.util.HierarchicalState: void enter()> (11)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionFailed(java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (1)
<com.android.server.WifiService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void completeConstruction()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void performTransitions()> (2)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (2)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnectionFailed(java.lang.String)> ()
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> (24)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifySignalStrength()> (1)
<com.android.internal.util.HierarchicalStateMachine: void start()> (7)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean setupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean trySetupData(java.lang.String)> (7)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyDefaultData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCdmaDataDetached()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String)> (12)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDefaultData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onGprsAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onGprsDetached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean access$400(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void cleanUpConnection(boolean,java.lang.String)> (11)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startPeriodicPdpPoll()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void runPingTest()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void cleanUpConnection(boolean,java.lang.String)> (16)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void access$300(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onNVReady()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.DataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void access$3200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPdpStateChanged(android.os.AsyncResult,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void restartRadio()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onCleanUpConnection(boolean,java.lang.String)> (4)
<com.android.internal.telephony.DataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$2: void run()> (1)
<com.android.internal.telephony.DataConnectionTracker: void restartRadio()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2$1: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (3)
<com.android.internal.telephony.PhoneBase: void dispose()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (380)
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.accounts.ChooseAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ActivityGroup: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.AliasActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.Application: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.FullBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.IntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.LauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.TabActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.service.urlrenderer.UrlRendererService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.speech.RecognitionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.IsolatedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.mock.MockApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.TestBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.TestListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.tts.TtsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.TestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BookmarkSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserBookmarksPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserDownloadPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserHistoryPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.Browser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.WebsiteSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.widget.BookmarkWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.calculator2.Calculator: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AgendaActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AlertService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.calendar.CalendarActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.DayActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.DismissAllAlarmsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.EditEvent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.EventInfoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.LaunchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.MonthActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.SelectCalendarsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.WeekActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.Camera: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.NoSearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.VideoCamera: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.certinstaller.CertFileList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.certinstaller.CertFile: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.certinstaller.CertInstallerMain: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.certinstaller.CertInstaller: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.AttachImage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.CallDetailActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactOptionsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.contacts.ContactsListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.DialtactsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ExportVCardActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ImportVCardActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.RecentCallsListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.SearchResultsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.contacts.TwelveKeyDialer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ui.EditContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ui.QuickContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.util.EmptyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.contacts.ViewContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.defcontainer.DefaultContainerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmAlert: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.AlarmClock: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmKlaxon: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.DeskClock: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SetAlarm: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AccountsTester: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppHwConfigList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppHwPref: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Connectivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.DataList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Details: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.DevelopmentSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Development: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.EnterURL: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.InstrumentationList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.LogViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.MediaScannerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PackageBrowser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PackageSummary: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PermissionDetails: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PointerLocation: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.ProcessInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.RunningProcesses: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.ShowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.SyncAdapterDriver: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.UnderdevelopedSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.AccountFolderList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.AccountShortcutPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.Debug: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.FolderMessageList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MailboxList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageCompose: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageView: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSecurity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupExchange: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.UpgradeAccounts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.Welcome: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.Email: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.MailService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.CalendarSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.ContactsSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.SyncManager: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.LatinIMESettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.LatinIME: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ChooserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.DisableCarModeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.NetInitiatedActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.RingtonePickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.launcher2.LauncherApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.launcher2.Launcher: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.launcher2.WallpaperChooser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.MmsApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.transaction.SmsReceiverService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mms.transaction.TransactionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mms.ui.ClassZeroActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ComposeMessageActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ConversationList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.DeliveryReportActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ManageSimMessages: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideEditorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideshowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideshowEditActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.CreatePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.DeleteItems: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPlaybackActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPlaybackService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MusicPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.PlaylistBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.QueryBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.RenamePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.ScanningProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.StreamStarter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.TrackBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.VideoBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.WeekSelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.InstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.UninstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.ADNList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.BluetoothHeadsetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.CallFeaturesSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.CdmaCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.CdmaOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.CellBroadcastSms: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.ChangeIccPinScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.DataUsage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.DeleteFdnContactScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EditFdnContactScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyCallbackModeService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.EmergencyCallHandler: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyDialer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EnableFdnScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EnableIccPinScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FakePhoneActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FdnList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FdnSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GetPin2Screen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.InCallScreenShowActivation: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.InCallScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.NetworkQueryService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.NetworkSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.OutgoingCallBroadcaster: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.PhoneApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.Settings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.SimContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.applications.ApplicationLauncher: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.calendar.CalendarDebug: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.downloads.DownloadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.media.MediaScannerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.settings.SettingsBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.provision.DefaultActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.ChoiceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.google.GoogleSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.LoadAverageService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.server.PackageManagerBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.ShutdownActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.status.UsbStorageActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.SystemBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.vpn.VpnServiceBinder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.settings.AccessibilitySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AccountPreferenceBase: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AccountSyncSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ActivityPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AddAccountSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ApnEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ApnSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.settings.BandMode: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.battery_history.BatteryHistory: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.BatteryInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.DockService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPassword: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPatternExample: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPatternTutorial: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPattern: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ConfirmLockPassword: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ConfirmLockPattern: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.CreateShortcut: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.settings.CredentialInstaller: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DebugIntentSender: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DevelopmentSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DeviceAdminAdd: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DeviceAdminSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Status: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Display: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DockSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.IccLockSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.InstalledAppDetails: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.LanguageSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.LocalePickerInSetupWizard: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.LocalePicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ManageAccountsSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ManageApplications: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.MasterClear: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.MediaFormat: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.PhysicalKeyboardSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ProxySelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.RadioInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.RunningServices: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SettingsLicenseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.TestingSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.UsageStats: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.UserDictionarySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.VoiceInputOutputSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiAPITest: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiApSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiConfigInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiStatusTest: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ZoneList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ZonePicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.soundrecorder.SoundRecorder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.spare_parts.SpareParts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.term.TermPreferences: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.term.Term: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.voicedialer.VoiceDialerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.cache.CacheService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.ActiveWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.CropImage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Gallery: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.MonitoredActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.MovieView: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Photographs: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Wallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.picasa.PicasaService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.DownloadVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.EngineSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.GetSampleText: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.Pico: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (1)
<android.app.ActivityManagerNative: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void removeStickyBroadcast(android.content.Intent)> (4)
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> (380)
<com.android.server.DeviceStorageMonitorService: void cancelNotification()> (1)
<android.net.wifi.WifiStateTracker: void notifySupplicantLost()> (1)
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.accounts.ChooseAccountActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.Activity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.Application: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.FullBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.IntentService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)> (3)
<android.preference.PreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.service.urlrenderer.UrlRendererService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.speech.RecognitionService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.ActivityUnitTestCase$MockParent: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.TestBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.TestListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.tts.TtsService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.TestActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BookmarkSearch: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBookmarksPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserDownloadPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserHistoryPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.Browser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.WebsiteSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkWidgetService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.calculator2.Calculator: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AgendaActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AlertService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.CalendarActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.DayActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.DismissAllAlarmsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.EditEvent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.EventInfoActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.LaunchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.MonthActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.SelectCalendarsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.WeekActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.Camera: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.NoSearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.VideoCamera: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertFileList: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertFile: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertInstallerMain: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertInstaller: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.AttachImage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallDetailActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactOptionsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.ContactsListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.DialtactsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ExportVCardActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ImportVCardActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.RecentCallsListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.SearchResultsActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.contacts.TwelveKeyDialer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.ContactsPreferencesActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.EditContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.QuickContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ui.ShowOrCreateActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.util.EmptyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.ViewContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.defcontainer.DefaultContainerService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlert: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.AlarmClock: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmKlaxon: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SetAlarm: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AccountsTester: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwConfigList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwPref: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.BadBehaviorActivity$BadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Connectivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DataList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Details: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DevelopmentSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Development: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.EnterURL: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.InstrumentationList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.LogViewer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.MediaScannerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageBrowser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageSummary: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PermissionDetails: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PointerLocation: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ProcessInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.RunningProcesses: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ShowActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.SyncAdapterDriver: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.UnderdevelopedSettings: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.AccountFolderList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.AccountShortcutPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Debug: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.FolderMessageList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MailboxList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageCompose: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageView: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSecurity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupCheckSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupExchange: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupIncoming: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupNames: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupOutgoing: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.UpgradeAccounts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Welcome: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.Email: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorServiceAlternate: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.MailService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.CalendarSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ContactsSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.SyncManager: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIMEBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.LatinIMESettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIME: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ChooserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.DisableCarModeActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.NetInitiatedActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ResolverActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.RingtonePickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.service.wallpaper.ImageWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.LauncherApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.Launcher: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.WallpaperChooser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.MmsApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.transaction.SmsReceiverService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.ui.ClassZeroActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ComposeMessageActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConversationList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.DeliveryReportActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ManageSimMessages: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideEditorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowEditActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.CreatePlaylist: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.DeleteItems: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.music.MusicBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.PlaylistBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.QueryBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.RenamePlaylist: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ScanningProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.StreamStarter: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.TrackBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.VideoBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.WeekSelector: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.InstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ADNList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.BluetoothHeadsetService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.CallFeaturesSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CellBroadcastSms: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ChangeIccPinScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DataUsage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DeleteFdnContactScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EditFdnContactScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.EmergencyCallHandler: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyDialer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableFdnScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableIccPinScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FakePhoneActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GetPin2Screen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreenShowActivation: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.NetworkQueryService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.NetworkSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.OutgoingCallBroadcaster: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.PhoneApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.Settings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SimContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.applications.ApplicationLauncher: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarAppWidgetService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.calendar.CalendarDebug: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.downloads.DownloadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.media.MediaScannerService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.settings.SettingsBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.ChoiceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.server.LoadAverageService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.server.PackageManagerBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.status.UsbStorageActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.SystemBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.server.vpn.VpnServiceBinder: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.AccessibilitySettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountPreferenceBase: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AccountSyncSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ActivityPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AddAccountSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApplicationSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AppWidgetPickActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.BandMode: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.battery_history.BatteryHistory: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.BatteryInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DockService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockGeneric: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPassword: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternExample: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternTutorial: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPattern: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPassword: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPattern: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CreateShortcut: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.CredentialInstaller: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DebugIntentSender: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DevelopmentSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminAdd: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Memory: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceInfoSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Status: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DisplaySettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Display: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DockSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.IccLockSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.InstalledAppDetails: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LanguageSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LocalePickerInSetupWizard: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.LocalePicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ManageAccountsSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ManageApplications: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MasterClear: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MediaFormat: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.PhysicalKeyboardSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.PrivacySettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ProxySelector: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RadioInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RunningServices: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsLicenseActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SoundSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TestingSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TetherSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TextToSpeechSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UsageStats: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UserDictionarySettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.VoiceInputOutputSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.vpn.VpnTypeSelection: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.AdvancedSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiAPITest: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiApSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiConfigInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiStatusTest: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.WirelessSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ZoneList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ZonePicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.soundrecorder.SoundRecorder: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.spare_parts.SpareParts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.term.TermPreferences: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.term.Term: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.VoiceDialerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.cache.CacheService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.ActiveWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.CropImage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Gallery: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MonitoredActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MovieView: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Photographs: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Wallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.picasa.PicasaService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void removeStickyBroadcast(android.content.Intent)> (4)
<com.google.android.voicesearch.LatinIMEWithVoice: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.DownloadVoiceData: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.EngineSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.GetSampleText: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.Pico: void removeStickyBroadcast(android.content.Intent)> (3)
<android.net.wifi.WifiMonitor$MonitorThread: void run()> (2)
<android.net.wifi.WifiMonitor: void startMonitoring()> (1)
<android.net.wifi.WifiStateTracker: void startEventLoop()> (1)
Permission:android.permission.RECEIVE_BOOT_COMPLETED
1329 Callers:
<com.android.server.AppWidgetService: void systemReady(boolean)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<android.server.search.SearchManagerService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: void activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (3)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (4)
<com.android.server.am.ActivityManagerService: void completeResumeLocked(com.android.server.am.HistoryRecord)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.HistoryRecord,com.android.server.am.HistoryRecord,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void broadcastTimeout()> (2)
<com.android.server.am.ActivityManagerService: void serviceTimeout(com.android.server.am.ProcessRecord)> (3)
<com.android.server.am.HistoryRecord: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService$7: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void access$300(com.android.server.am.ActivityManagerService)> (3)
<com.android.server.am.ActivityManagerService: void processNextBroadcast(boolean)> (3)
<com.android.server.am.ActivityManagerService: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord)> (5)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut()> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut()> (2)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (2)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void access$200(com.android.server.am.ActivityManagerService,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean requestServiceBindingLocked(com.android.server.am.ServiceRecord,com.android.server.am.IntentBindRecord,boolean)> (3)
<com.android.server.am.ActivityManagerService: void bringDownServiceLocked(com.android.server.am.ServiceRecord,boolean)> (7)
<com.android.server.am.ActivityManagerService: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void removeConnectionLocked(com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.HistoryRecord)> (3)
<com.android.server.am.ActivityManagerService: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean)> (2)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut()> (1)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (8)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (3)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void scheduleBroadcastsLocked()> (7)
<com.android.server.am.ActivityManagerService: void requestServiceBindingsLocked(com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean)> (6)
<com.android.server.am.ActivityManagerService: void killServicesLocked(com.android.server.am.ProcessRecord,boolean)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.server.am.HistoryRecord: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityThread$PackageInfo$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$7: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.PackageManagerService$12: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityThread$ApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (1)
<com.android.server.am.ActivityManagerService: void performReceive(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ()
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int)> (9)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int)> (2)
<com.android.server.am.ActivityManagerService: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean access$700(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void access$500(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<android.app.ApplicationThreadNative: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: void deliverToRegisteredReceiver(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> (9)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.HistoryRecord)> (5)
<com.android.server.am.ActivityManagerService: int access$100(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService$ServiceRestarter: void run()> (1)
<com.android.server.am.ActivityManagerService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithUid(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean)> (4)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (2)
<com.android.server.am.ActivityManagerService: void trimApplications()> (4)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<android.app.ApplicationThreadNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)> (1)
<android.os.FileObserver$ObserverThread: void onEvent(int,int,java.lang.String)> ()
<android.os.MessageQueue: android.os.Message next()> (1)
<android.util.EventLog$Event: java.lang.Object decodeObject()> (2)
<android.util.EventLog$Event: java.lang.Object getData()> ()
<android.util.EventLog: void readTagsFile()> (2)
<android.util.Log: int wtf(java.lang.String,java.lang.String)> (5)
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> (9)
<com.android.providers.calendar.CalendarUpgradeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.contacts.ContactsUpgradeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.app.ActivityManagerNative: void killApplicationWithUid(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean)> (3)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo)> (4)
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<android.app.ActivityThread$ApplicationThread: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.Looper: void loop()> (18)
<android.util.EventLog: int getTagCode(java.lang.String)> ()
<android.util.EventLog: java.lang.String getTagName(int)> ()
<android.os.Debug: void setFieldsOn(java.lang.Class,boolean)> (1)
<android.os.PowerManager$WakeLock: void finalize()> ()
<com.android.development.BadBehaviorActivity$5: void onClick(android.view.View)> (1)
<com.android.server.MasterClearReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.TrustManager[])> (1)
<com.android.development.BadBehaviorActivity$6: void onClick(android.view.View)> (1)
<com.android.development.BadBehaviorActivity$BadController: boolean activityStarting(android.content.Intent,java.lang.String)> (2)
<com.android.development.BadBehaviorActivity$BadReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.BadBehaviorActivity$BadService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.development.BadBehaviorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(boolean,java.util.ArrayList)> (2)
<com.android.server.PowerManagerService: void crash(java.lang.String)> (2)
<com.android.server.Watchdog: void run()> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<android.app.IActivityManager: void killApplicationWithUid(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void access$000(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<android.app.ActivityThread: void main(java.lang.String[])> ()
<android.media.AudioService$AudioSystemThread: void run()> (2)
<android.os.HandlerThread: void run()> (39)
<android.webkit.WebSyncManager: void run()> (2)
<android.webkit.WebViewCore$WebCoreThread: void run()> (1)
<com.android.internal.location.GpsLocationProvider$GpsLocationProviderThread: void run()> (1)
<com.android.music.MediaPlaybackActivity$Worker: void run()> (1)
<com.android.phone.PhoneInterfaceManager$CheckSimPin: void run()> (2)
<com.android.phone.Ringer$Worker: void run()> (1)
<com.android.providers.media.MediaScannerService: void run()> (1)
<com.android.server.am.ActivityManagerService$AThread: void run()> (2)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.server.LocationManagerService: void run()> (1)
<com.android.server.NotificationPlayer$CreationAndCompletionThread: void run()> (2)
<com.android.server.WifiWatchdogService$WifiWatchdogThread: void run()> (2)
<com.android.server.WindowManagerService$PolicyThread: void run()> (2)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<android.os.Debug: void setFieldsOn(java.lang.Class)> ()
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()> (8)
<android.app.IActivityController$Stub$Proxy: boolean activityStarting(android.content.Intent,java.lang.String)> ()
<android.app.IActivityController$Stub: boolean activityStarting(android.content.Intent,java.lang.String)> (2)
<android.os.IPowerManager$Stub$Proxy: void crash(java.lang.String)> ()
<android.os.IPowerManager$Stub: void crash(java.lang.String)> (2)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.PackageManagerService: void killApplication(java.lang.String,int)> (2)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.media.AudioService: void createAudioSystemThread()> (1)
<android.accounts.AccountManagerService: void <init>(android.content.Context)> (1)
<android.app.IntentService: void onCreate()> (4)
<android.content.AsyncQueryHandler: void <init>(android.content.ContentResolver)> (53)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.pim.ContactsAsyncHelper: void <init>()> (2)
<android.webkit.WebViewWorker: android.webkit.WebViewWorker getHandler()> (22)
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (9)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.calendar.AlertService: void onCreate()> (1)
<com.android.calendar.ContactsAsyncHelper: void <init>()> (2)
<com.android.camera.CameraHolder: void <init>()> (1)
<com.android.contacts.ContactPhotoLoader$LoaderThread: void run()> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void onCreate()> (2)
<com.android.internal.telephony.gsm.stk.IconLoader: com.android.internal.telephony.gsm.stk.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<com.android.internal.telephony.RIL: void <init>(android.content.Context,int,int)> (2)
<com.android.internal.telephony.test.ModelInterpreter: void init()> (2)
<com.android.internal.telephony.test.SimulatedCommands: void <init>()> ()
<com.android.internal.util.HierarchicalStateMachine: void <init>(java.lang.String)> (8)
<com.android.mms.transaction.SmsReceiverService: void onCreate()> (1)
<com.android.mms.transaction.TransactionService: void onCreate()> (1)
<com.android.providers.applications.ApplicationsProvider: boolean onCreate()> (1)
<com.android.providers.media.MediaProvider: boolean onCreate()> (1)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.server.MountService: void <init>(android.content.Context)> (1)
<com.android.server.PackageManagerService: void <init>(android.content.Context,boolean)> (1)
<com.android.server.PowerManagerService$1: void run()> (1)
<com.android.server.PowerManagerService: void init(android.content.Context,com.android.server.LightsService,android.app.IActivityManager,com.android.server.BatteryService)> (1)
<com.android.server.ThrottleService: void systemReady()> (1)
<com.android.server.WifiService: void <init>(android.content.Context,android.net.wifi.WifiStateTracker)> (1)
<com.android.settings.ApnSettings: boolean restoreDefaultApn()> (1)
<com.android.settings.bluetooth.DockService: void onCreate()> (1)
<com.android.settings.RunningServices: void onResume()> (2)
<com.cooliris.app.App: void <init>(android.content.Context)> (6)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.picasa.PicasaService: void <init>()> (3)
<android.webkit.CookieSyncManager: void run()> (1)
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> (2)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.server.NotificationPlayer: void startSound(com.android.server.NotificationPlayer$Command)> (1)
<com.android.server.WifiWatchdogService: void createThread()> (1)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()> ()
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> (1)
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()> (1)
<android.app.IActivityController: boolean activityStarting(android.content.Intent,java.lang.String)> (1)
<android.app.IActivityController$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void crash(java.lang.String)> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int)> (4)
<com.android.server.PackageManagerService: boolean deletePackageLI(java.lang.String,boolean,int,com.android.server.PackageManagerService$PackageRemovedInfo)> (4)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.calendar.DismissAllAlarmsService: void onCreate()> (2)
<com.android.defcontainer.DefaultContainerService: void onCreate()> (2)
<com.cooliris.cache.CacheService: void onCreate()> (2)
<android.widget.QuickContactBadge$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<android.widget.QuickContactBadge$QueryHandler: void <init>(android.widget.QuickContactBadge,android.content.ContentResolver)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler: void <init>(com.android.calendar.AgendaWindowAdapter,android.content.ContentResolver)> (1)
<com.android.calendar.AlertActivity$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.calendar.AlertActivity$QueryHandler: void <init>(com.android.calendar.AlertActivity,android.content.ContentResolver)> (1)
<com.android.calendar.EditEvent$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.calendar.EditEvent$QueryHandler: void <init>(com.android.calendar.EditEvent,android.content.ContentResolver)> (1)
<com.android.calendar.EventInfoActivity$PresenceQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.calendar.EventInfoActivity$PresenceQueryHandler: void <init>(com.android.calendar.EventInfoActivity,android.content.Context,android.content.ContentResolver)> (1)
<com.android.calendar.SelectCalendarsAdapter$AsyncCalendarsUpdater: void <init>(android.content.ContentResolver)> (1)
<com.android.calendar.SelectCalendarsAdapter$AsyncCalendarsUpdater: void <init>(com.android.calendar.SelectCalendarsAdapter,android.content.ContentResolver)> (1)
<com.android.contacts.ContactsListActivity$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.contacts.ContactsListActivity$QueryHandler: void <init>(android.content.Context)> (1)
<com.android.contacts.RecentCallsListActivity$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.contacts.RecentCallsListActivity$QueryHandler: void <init>(android.content.Context)> (1)
<com.android.contacts.SpecialCharSequenceMgr$QueryHandler: void <init>(android.content.ContentResolver)> (2)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void <init>(android.content.Context,com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener)> (3)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void <init>(com.android.internal.telephony.CallerInfoAsyncQuery,android.content.Context)> (1)
<com.android.internal.widget.ContactHeaderWidget$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.internal.widget.ContactHeaderWidget$QueryHandler: void <init>(com.android.internal.widget.ContactHeaderWidget,android.content.ContentResolver)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void <init>(com.android.mms.ui.ComposeMessageActivity,android.content.ContentResolver)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void <init>(com.android.mms.ui.ConversationList,android.content.ContentResolver)> (1)
<com.android.mms.ui.ManageSimMessages$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.mms.ui.ManageSimMessages$QueryHandler: void <init>(com.android.mms.ui.ManageSimMessages,android.content.ContentResolver,com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void <init>(android.content.ContentResolver)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void <init>(com.android.mms.ui.MessageListAdapter$AvatarCache,android.content.ContentResolver)> (1)
<com.android.mms.ui.SearchActivity$2: void <init>(android.content.ContentResolver)> (1)
<com.android.mms.ui.SearchActivity$2: void <init>(com.android.mms.ui.SearchActivity,android.content.ContentResolver,java.lang.String,android.widget.ListView)> (1)
<com.android.music.AlbumBrowserActivity$AlbumListAdapter$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.AlbumBrowserActivity$AlbumListAdapter$QueryHandler: void <init>(com.android.music.AlbumBrowserActivity$AlbumListAdapter,android.content.ContentResolver)> (1)
<com.android.music.ArtistAlbumBrowserActivity$ArtistAlbumListAdapter$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.ArtistAlbumBrowserActivity$ArtistAlbumListAdapter$QueryHandler: void <init>(com.android.music.ArtistAlbumBrowserActivity$ArtistAlbumListAdapter,android.content.ContentResolver)> (1)
<com.android.music.MusicPicker$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.MusicPicker$QueryHandler: void <init>(com.android.music.MusicPicker,android.content.Context)> (1)
<com.android.music.PlaylistBrowserActivity$PlaylistListAdapter$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.PlaylistBrowserActivity$PlaylistListAdapter$QueryHandler: void <init>(com.android.music.PlaylistBrowserActivity$PlaylistListAdapter,android.content.ContentResolver)> (1)
<com.android.music.QueryBrowserActivity$QueryListAdapter$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.QueryBrowserActivity$QueryListAdapter$QueryHandler: void <init>(com.android.music.QueryBrowserActivity$QueryListAdapter,android.content.ContentResolver)> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler: void <init>(com.android.music.TrackBrowserActivity$TrackListAdapter,android.content.ContentResolver)> (1)
<com.android.phone.ADNList$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.phone.ADNList$QueryHandler: void <init>(com.android.phone.ADNList,android.content.ContentResolver)> (1)
<com.android.phone.DeleteFdnContactScreen$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.phone.DeleteFdnContactScreen$QueryHandler: void <init>(com.android.phone.DeleteFdnContactScreen,android.content.ContentResolver)> (1)
<com.android.phone.EditFdnContactScreen$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.phone.EditFdnContactScreen$QueryHandler: void <init>(com.android.phone.EditFdnContactScreen,android.content.ContentResolver)> (2)
<com.android.phone.NotificationMgr$QueryHandler: void <init>(android.content.ContentResolver)> (1)
<com.android.phone.NotificationMgr$QueryHandler: void <init>(com.android.phone.NotificationMgr,android.content.ContentResolver)> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.webkit.CacheManager: boolean createCacheDirectory()> (2)
<android.webkit.CacheManager: boolean removeAllCacheFiles()> (4)
<android.webkit.FrameLoader: boolean executeLoad()> (1)
<android.webkit.FrameLoader: boolean handleLocalFile(java.lang.String,android.webkit.LoadListener,android.webkit.WebSettings)> (1)
<android.webkit.FrameLoader: void startCacheLoad(android.webkit.CacheManager$CacheResult)> (1)
<android.webkit.LoadListener: boolean checkCache(java.util.Map)> (2)
<android.webkit.LoadListener: void cancel()> (3)
<android.webkit.LoadListener: void commitLoad()> (5)
<android.webkit.LoadListener: void doRedirect()> (2)
<android.webkit.LoadListener: void downloadFile()> ()
<android.webkit.LoadListener: void handleEndData()> (2)
<android.webkit.LoadListener: void handleHeaders(android.net.http.Headers)> (2)
<android.webkit.LoadListener: void tearDown()> (5)
<android.webkit.WebViewCore: void sendNotifyProgressFinished()> ()
<android.webkit.WebViewDatabase: boolean endCacheTransaction()> (2)
<android.webkit.WebViewDatabase: boolean startCacheTransaction()> (2)
<android.webkit.BrowserFrame: void setProgress(int)> ()
<android.webkit.WebViewCore$EventHub: void sendMessage(android.os.Message)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageDelayed(android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageAtFrontOfQueue(android.os.Message)> (1)
<android.app.LauncherActivity$ActivityAdapter$ArrayFilter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (1)
<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (14)
<android.widget.ArrayAdapter$ArrayFilter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (1)
<android.widget.AutoCompleteTextView: void performFiltering(java.lang.CharSequence,int)> (3)
<android.widget.CursorFilter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (1)
<android.widget.Filter: void filter(java.lang.CharSequence)> (10)
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int,int,int)> (3)
<android.widget.SimpleAdapter$SimpleFilter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (1)
<com.android.settings.ManageApplications$AppInfoAdapter$AppFilter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.camera.CameraHolder: com.android.camera.CameraHolder instance()> (6)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: void <init>(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.RIL: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.io.InputStream,java.io.OutputStream)> ()
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<com.android.internal.telephony.cdma.CdmaDataConnection: void <init>(java.lang.String)> (1)
<com.android.internal.telephony.DataConnection: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String)> (4)
<com.android.internal.telephony.DataConnection: void <init>(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void <init>(java.lang.String)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void <init>(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void <init>(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void <init>(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM: void <init>(java.lang.String)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.server.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,boolean)> (1)
<com.android.settings.ApnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.Photographs: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean supplyPin(java.lang.String)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.server.NotificationPlayer: void access$500(com.android.server.NotificationPlayer,com.android.server.NotificationPlayer$Command)> (1)
<com.android.server.WifiWatchdogService: void <init>(android.content.Context,android.net.wifi.WifiStateTracker)> (1)
<com.android.commands.monkey.Monkey$ActivityController: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.BadBehaviorActivity$BadController: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.BadBehaviorActivity$1: void onClick(android.view.View)> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int)> (5)
<com.android.server.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: boolean deletePackageX(java.lang.String,boolean,boolean,int)> (1)
<com.android.server.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (2)
<android.widget.QuickContactBadge: void init()> (2)
<com.android.calendar.AgendaWindowAdapter: void <init>(com.android.calendar.AgendaActivity,com.android.calendar.AgendaListView)> (1)
<com.android.calendar.AlertActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.EditEvent: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.EventInfoActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.SelectCalendarsAdapter: void <init>(android.content.Context,android.database.Cursor,com.android.calendar.SelectCalendarsActivity)> (1)
<com.android.contacts.ContactsListActivity: void onCreate(android.os.Bundle)> (4)
<com.android.contacts.RecentCallsListActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleAdnEntry(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.contacts.ui.QuickContactWindow: void <init>(android.content.Context)> (1)
<com.android.contacts.ui.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ViewContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void <init>(com.android.internal.telephony.CallerInfoAsyncQuery,android.content.Context,com.android.internal.telephony.CallerInfoAsyncQuery$1)> (1)
<com.android.internal.widget.ContactHeaderWidget: void resetAsyncQueryHandler()> (6)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ConversationList: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache: void <init>(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.AlbumBrowserActivity$AlbumListAdapter: void <init>(android.content.Context,com.android.music.AlbumBrowserActivity,int,android.database.Cursor,java.lang.String[],int[])> (1)
<com.android.music.ArtistAlbumBrowserActivity$ArtistAlbumListAdapter: void <init>(android.content.Context,com.android.music.ArtistAlbumBrowserActivity,android.database.Cursor,int,java.lang.String[],int[],int,java.lang.String[],int[])> (1)
<com.android.music.MusicPicker: void onCreate(android.os.Bundle)> (1)
<com.android.music.PlaylistBrowserActivity$PlaylistListAdapter: void <init>(android.content.Context,com.android.music.PlaylistBrowserActivity,int,android.database.Cursor,java.lang.String[],int[])> (1)
<com.android.music.QueryBrowserActivity$QueryListAdapter: void <init>(android.content.Context,com.android.music.QueryBrowserActivity,int,android.database.Cursor,java.lang.String[],int[])> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter: void <init>(android.content.Context,com.android.music.TrackBrowserActivity,int,android.database.Cursor,java.lang.String[],int[],boolean,boolean)> (1)
<com.android.phone.ADNList: void onCreate(android.os.Bundle)> (3)
<com.android.phone.DeleteFdnContactScreen: void deleteContact()> (1)
<com.android.phone.EditFdnContactScreen: void addContact()> (1)
<com.android.phone.EditFdnContactScreen: void updateContact()> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult createCacheFile(java.lang.String,int,android.net.http.Headers,java.lang.String,long,boolean)> (2)
<android.webkit.CacheManager: void init(android.content.Context)> (1)
<android.webkit.CacheManager: void setCacheDisabled(boolean)> ()
<android.webkit.WebViewCore: void clearCache(boolean)> (1)
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)> (6)
<android.webkit.BrowserFrame: android.webkit.LoadListener startLoadingResource(int,java.lang.String,java.lang.String,java.util.HashMap,byte[],long,int,boolean,boolean,boolean,java.lang.String,java.lang.String)> ()
<android.webkit.FrameLoader: boolean handleCache()> (1)
<android.webkit.LoadListener: void guessMimeType()> (2)
<android.webkit.LoadListener: void handleAuthResponse(java.lang.String,java.lang.String)> (4)
<android.webkit.LoadListener: void handleSslErrorResponse(boolean)> (1)
<android.webkit.LoadListener: void sendMessageInternal(android.os.Message)> (8)
<android.webkit.LoadListener: void handleError(int,java.lang.String)> (4)
<android.webkit.CacheManager: boolean disableTransaction()> (2)
<android.webkit.CacheManager: boolean endTransaction()> (2)
<android.webkit.CacheManager: boolean enableTransaction()> (2)
<android.webkit.CacheManager: boolean startTransaction()> (2)
<android.webkit.WebViewCore$EventHub: void access$6300(android.webkit.WebViewCore$EventHub,android.os.Message)> (12)
<android.webkit.WebViewCore$EventHub: void access$6500(android.webkit.WebViewCore$EventHub,android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void access$6400(android.webkit.WebViewCore$EventHub,android.os.Message)> (3)
<android.widget.AutoCompleteTextView$DropDownListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.ExpandableListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.GridView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.ListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.calendar.AgendaListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.contacts.PinnedHeaderListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.contacts.SplitAggregateView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.app.AlertController$RecycleListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.view.menu.ExpandedMenuView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.MessageListView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.music.TouchInterceptor: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.quicksearchbox.ui.SuggestionsView: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.app.SearchDialog$SearchAutoComplete: void performFiltering(java.lang.CharSequence,int)> (1)
<android.webkit.WebTextView: void performFiltering(java.lang.CharSequence,int)> (1)
<android.widget.AutoCompleteTextView: void doAfterTextChanged()> (6)
<android.app.LauncherActivity$ActivityAdapter$ArrayFilter: void filter(java.lang.CharSequence)> (1)
<android.widget.AbsListView: void setFilterText(java.lang.String)> (14)
<android.widget.ArrayAdapter$ArrayFilter: void filter(java.lang.CharSequence)> (1)
<android.widget.CursorFilter: void filter(java.lang.CharSequence)> (1)
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int)> (3)
<android.widget.SimpleAdapter$SimpleFilter: void filter(java.lang.CharSequence)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void onContentChanged()> (2)
<com.android.contacts.ContactsListActivity: void onSearchTextChanged()> (4)
<com.android.settings.ManageApplications$AppInfoAdapter$AppFilter: void filter(java.lang.CharSequence)> (1)
<com.android.email.activity.AddressTextView: void performFiltering(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.RecipientsEditor: void performFiltering(java.lang.CharSequence,int,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.camera.CameraButtonIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.Camera: void closeCamera()> (3)
<com.android.camera.Camera: void ensureCameraDevice()> (1)
<com.android.camera.MenuHelper: void startCameraActivity(android.app.Activity,java.lang.String)> (2)
<com.android.camera.VideoCamera: void closeCamera()> (4)
<com.android.camera.VideoCamera: void startPreview()> (3)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: com.android.internal.telephony.gsm.stk.CommandParamsFactory getInstance(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.BaseCommands: void <init>(android.content.Context)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnection: void <init>(com.android.internal.telephony.cdma.CDMAPhone,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void <init>(com.android.internal.telephony.gsm.GSMPhone,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.ITelephony: boolean supplyPin(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NotificationPlayer$CmdThread: void run()> (2)
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package access$1900(com.android.server.PackageManagerService,java.io.File,int,int)> (1)
<com.android.server.PackageManagerService: boolean deleteSystemPackageLI(android.content.pm.PackageParser$Package,int,com.android.server.PackageManagerService$PackageRemovedInfo)> (1)
<com.android.server.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.PackageManagerService: void scanDirLI(java.io.File,int,int)> (1)
<com.android.server.PackageManagerService: void installPackageLI(com.android.server.PackageManagerService$InstallArgs,boolean,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: boolean access$2900(com.android.server.PackageManagerService,java.lang.String,boolean,boolean,int)> (1)
<com.android.server.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: int doQueuedBackups(com.android.internal.backup.IBackupTransport)> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void run()> (5)
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int)> (5)
<com.android.quicksearchbox.ui.ContactBadge: void init()> (1)
<com.android.calendar.AgendaListView: void <init>(com.android.calendar.AgendaActivity)> (1)
<com.android.calendar.SelectCalendarsActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.SearchResultsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,boolean,android.widget.EditText)> (2)
<com.android.contacts.ui.QuickContactWindow: void <init>(android.content.Context,com.android.contacts.ui.QuickContactWindow$OnDismissListener)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: void allocate(android.content.Context,android.net.Uri)> (2)
<com.android.internal.widget.ContactHeaderWidget: void bindFromEmail(java.lang.String)> ()
<com.android.internal.widget.ContactHeaderWidget: void bindFromPhoneNumber(java.lang.String)> ()
<com.android.internal.widget.ContactHeaderWidget: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.internal.widget.ContactHeaderWidget: void startContactQuery(android.net.Uri,boolean)> (1)
<com.android.internal.widget.ContactHeaderWidget: void startPhotoQuery(long,android.net.Uri,boolean)> (1)
<com.android.internal.widget.ContactHeaderWidget: void wipeClean()> ()
<com.android.mms.ui.MessageListAdapter: void <init>(android.content.Context,android.database.Cursor,android.widget.ListView,boolean,java.util.regex.Pattern)> (2)
<com.android.music.AlbumBrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.ArtistAlbumBrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.PlaylistBrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.QueryBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.TrackBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.phone.FdnList: void onCreate(android.os.Bundle)> (2)
<com.android.phone.SimContacts: void onCreate(android.os.Bundle)> (2)
<com.android.phone.DeleteFdnContactScreen: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.phone.EditFdnContactScreen: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult createCacheFile(java.lang.String,int,android.net.http.Headers,java.lang.String,boolean)> ()
<android.webkit.BrowserFrame: void <init>(android.content.Context,android.webkit.WebViewCore,android.webkit.CallbackProxy,android.webkit.WebSettings,java.util.Map)> (1)
<android.webkit.WebViewCore: void access$2600(android.webkit.WebViewCore,boolean)> (4)
<android.webkit.WebSyncManager: void <init>(android.content.Context,java.lang.String)> (2)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map)> (1)
<com.android.browser.BrowserSettings: void clearFormData(android.content.Context)> (1)
<com.android.browser.BrowserSettings: void clearPasswords(android.content.Context)> (1)
<android.webkit.FrameLoader: boolean handleHTTPLoad()> (2)
<android.webkit.LoadListener: void parseContentTypeHeader(java.lang.String)> (2)
<android.webkit.HttpAuthHandler: void handleAuthRequest(android.webkit.LoadListener)> (1)
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)> (2)
<android.webkit.HttpAuthHandler: void cancel()> (5)
<android.webkit.SslErrorHandler: void handleSslErrorResponse(android.webkit.LoadListener,android.net.http.SslError,boolean)> (4)
<android.webkit.LoadListener: boolean handleSslErrorRequest(android.net.http.SslError)> (1)
<android.webkit.LoadListener: void certificate(android.net.http.SslCertificate)> (1)
<android.webkit.LoadListener: void data(byte[],int)> (3)
<android.webkit.LoadListener: void endData()> (3)
<android.webkit.LoadListener: void error(int,java.lang.String)> (10)
<android.webkit.LoadListener: void headers(android.net.http.Headers)> (2)
<android.webkit.LoadListener: void status(int,int,int,java.lang.String)> (5)
<android.webkit.WebViewCore: void contentDraw()> (4)
<android.webkit.WebViewCore: void contentScrollBy(int,int,boolean)> ()
<android.webkit.WebViewCore: void contentScrollTo(int,int)> ()
<android.webkit.WebViewCore: void contentSpawnScrollTo(int,int)> ()
<android.webkit.WebViewCore: void sendMessage(android.os.Message)> ()
<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)> (6)
<android.webkit.WebViewCore: void sendMessage(int,int,int)> (19)
<android.webkit.WebViewCore: void sendMessage(int,int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void sendMessage(int,int)> (2)
<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)> (26)
<android.webkit.WebViewCore: void sendMessage(int)> (14)
<android.webkit.WebViewCore: void viewSizeChanged(int,int,int,float,int,int,boolean)> (1)
<android.webkit.WebViewCore: void sendMessageDelayed(int,java.lang.Object,long)> (1)
<android.webkit.WebViewCore: void destroy()> (1)
<android.webkit.WebViewCore: void sendMessageAtFrontOfQueue(int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void setupViewport(boolean)> (2)
<android.app.SearchDialog$SearchAutoComplete: void doAfterTextChanged()> (1)
<android.webkit.WebTextView: void doAfterTextChanged()> (1)
<android.widget.AutoCompleteTextView$MyWatcher: void afterTextChanged(android.text.Editable)> (1)
<android.widget.MultiAutoCompleteTextView: void doAfterTextChanged()> (1)
<com.android.email.activity.AddressTextView: void doAfterTextChanged()> (1)
<com.android.mms.ui.RecipientsEditor: void doAfterTextChanged()> (1)
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)> (5)
<android.widget.AutoCompleteTextView$DropDownListView: void setFilterText(java.lang.String)> (1)
<android.widget.ExpandableListView: void setFilterText(java.lang.String)> (1)
<android.widget.GridView: void setFilterText(java.lang.String)> (1)
<android.widget.ListView: void setFilterText(java.lang.String)> (2)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: void setFilterText(java.lang.String)> (1)
<com.android.calendar.AgendaListView: void setFilterText(java.lang.String)> (1)
<com.android.contacts.PinnedHeaderListView: void setFilterText(java.lang.String)> (1)
<com.android.contacts.SplitAggregateView: void setFilterText(java.lang.String)> (1)
<com.android.internal.app.AlertController$RecycleListView: void setFilterText(java.lang.String)> (1)
<com.android.internal.view.menu.ExpandedMenuView: void setFilterText(java.lang.String)> (1)
<com.android.mms.ui.MessageListView: void setFilterText(java.lang.String)> (1)
<com.android.music.TouchInterceptor: void setFilterText(java.lang.String)> (1)
<com.android.quicksearchbox.ui.SuggestionsView: void setFilterText(java.lang.String)> (1)
<com.android.email.activity.AddressTextView: void performFiltering(java.lang.CharSequence,int)> (2)
<com.android.mms.ui.RecipientsEditor: void performFiltering(java.lang.CharSequence,int)> (2)
<com.android.contacts.ContactsListActivity: void onRestart()> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity: void afterTextChanged(android.text.Editable)> (4)
<com.android.contacts.SearchResultsActivity: void onSearchTextChanged()> (1)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.camera.Camera: void onPause()> (1)
<com.android.camera.Camera: void setPreviewDisplay(android.view.SurfaceHolder)> (2)
<com.android.camera.Camera: void startPreview()> (3)
<com.android.camera.MenuHelper: void gotoCameraMode(android.app.Activity)> (1)
<com.android.camera.MenuHelper: void gotoVideoMode(android.app.Activity)> (1)
<com.android.camera.VideoCamera: void onPause()> (1)
<com.android.camera.VideoCamera: void resetCameraParameters()> (1)
<com.android.camera.VideoCamera: void setPreviewDisplay(android.view.SurfaceHolder)> (2)
<com.android.camera.VideoCamera: void access$700(com.android.camera.VideoCamera)> (1)
<com.android.camera.VideoCamera: void onResume()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void run()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NotificationPlayer: void enqueueLocked(com.android.server.NotificationPlayer$Command)> (2)
<com.android.server.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.PackageManagerService: void access$2100(com.android.server.PackageManagerService,com.android.server.PackageManagerService$InstallArgs,boolean,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService$7: void run()> (1)
<com.android.server.PackageManagerService: void access$3700(com.android.server.PackageManagerService,boolean,boolean)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void run()> (2)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<android.widget.QuickContactBadge: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.contacts.ContactListItemView: android.widget.QuickContactBadge getQuickContact()> (1)
<com.android.quicksearchbox.ui.ContactBadge: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.calendar.AgendaActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String)> ()
<com.android.contacts.ui.QuickContactActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,android.net.Uri,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.internal.widget.ContactHeaderWidget: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.widget.ContactHeaderWidget: void bindFromContactUriInternal(android.net.Uri,boolean)> (2)
<com.android.internal.widget.ContactHeaderWidget$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.ui.ComposeMessageActivity: void initMessageList()> (1)
<com.android.mms.ui.ManageSimMessages$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.webkit.WebViewCore: void initialize()> (2)
<android.webkit.CookieSyncManager: void <init>(android.content.Context,java.lang.String)> (1)
<android.webkit.CookieSyncManager: void <init>(android.content.Context)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<android.webkit.DataLoader: void <init>(java.lang.String,android.webkit.LoadListener)> (1)
<android.webkit.Network: void handleAuthRequest(android.webkit.LoadListener)> (1)
<com.android.browser.BrowserActivity$17: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (6)
<com.android.browser.BrowserActivity$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.BrowserActivity$16: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.SslErrorHandler: boolean checkSslPrefTable(android.webkit.LoadListener,android.net.http.SslError)> (2)
<android.webkit.SslErrorHandler: void proceed()> (2)
<android.webkit.SslErrorHandler: void cancel()> (5)
<android.net.http.EventHandler: boolean handleSslErrorRequest(android.net.http.SslError)> (1)
<android.net.http.EventHandler: void certificate(android.net.http.SslCertificate)> (2)
<android.net.http.EventHandler: void data(byte[],int)> (1)
<android.webkit.StreamLoader: boolean sendData()> (6)
<android.net.http.EventHandler: void endData()> (2)
<android.webkit.StreamLoader: void closeStreamAndSendEndData()> (6)
<android.net.http.EventHandler: void error(int,java.lang.String)> (2)
<android.webkit.ContentLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.DataLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.FileLoader: boolean setupStreamAndSendStatus()> (1)
<android.net.http.EventHandler: void headers(android.net.http.Headers)> (2)
<android.webkit.StreamLoader: void sendHeaders()> (6)
<android.net.http.EventHandler: void status(int,int,int,java.lang.String)> (2)
<android.webkit.CacheLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.BrowserFrame: void didFirstLayout()> (6)
<android.webkit.WebViewCore: void resumeUpdatePicture(android.webkit.WebViewCore)> (6)
<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()> (4)
<android.webkit.WebView$InvokeListBox$1: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView: void deleteSelection(int,int)> (1)
<android.webkit.WebView: void passToJavaScript(java.lang.String,android.view.KeyEvent)> (1)
<android.webkit.WebView: void replaceTextfieldText(int,int,java.lang.String,int,int)> (2)
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)> (1)
<android.webkit.PluginFullScreenHolder: void onStop()> (1)
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)> (5)
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)> (5)
<android.webkit.WebView$InvokeListBox$2: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView$InvokeListBox$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.webkit.WebView$InvokeListBox$4: void onCancel(android.content.DialogInterface)> (1)
<android.webkit.WebView: void centerKeyPressOnTextField()> (3)
<android.webkit.WebView: void clearCache(boolean)> (1)
<android.webkit.WebView: void dumpDomTree(boolean)> (2)
<android.webkit.WebView: void dumpRenderTree(boolean)> (2)
<android.webkit.WebView: void goBackOrForward(int,boolean)> (1)
<android.webkit.WebView: void requestLabel(int,int)> (1)
<android.webkit.WebView: void setActive(boolean)> (3)
<android.webkit.WebView: void setFocusControllerInactive()> (4)
<android.webkit.WebView: void setNetworkAvailable(boolean)> (2)
<android.webkit.WebView: void setSelection(int,int)> (3)
<android.webkit.WebView: void switchOutDrawHistory()> (13)
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<android.webkit.WebView: void scrollFocusedTextInput(float,int)> (1)
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> (3)
<android.webkit.WebView: void setBackgroundColor(int)> (3)
<android.webkit.WebView: boolean sendViewSizeZoom()> (4)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.String[])> (1)
<android.webkit.WebViewCore$4: void invoke(java.lang.String,boolean,boolean)> (1)
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> ()
<android.webkit.WebView: void addPackageName(java.lang.String)> (1)
<android.webkit.WebView: void addPackageNames(java.util.Set)> (1)
<android.webkit.WebView: void cancelWebCoreTouchEvent(int,int,boolean)> (2)
<android.webkit.WebView: void documentAsText(android.os.Message)> ()
<android.webkit.WebView: void documentHasImages(android.os.Message)> ()
<android.webkit.WebView: void externalRepresentation(android.os.Message)> ()
<android.webkit.WebView: void letPluginHandleNavKey(int,long,boolean)> (3)
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (6)
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> (3)
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> ()
<android.webkit.WebView: void removePackageName(java.lang.String)> (1)
<android.webkit.WebView: void sendMotionUp(int,int,int,int,int)> ()
<android.webkit.WebView: void sendMoveFocus(int,int)> ()
<android.webkit.WebView: void sendMoveMouseIfLatest(boolean)> ()
<android.webkit.WebView: void sendMoveMouse(int,int,int,int)> ()
<android.webkit.WebView: void setJsFlags(java.lang.String)> (1)
<android.webkit.WebView: void setNetworkType(java.lang.String,java.lang.String)> (1)
<android.webkit.WebViewCore: void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)> (2)
<android.webkit.WebView: void clearHistory()> (1)
<android.webkit.WebView: void clearSslPreferences()> ()
<android.webkit.WebView: void clearView()> ()
<android.webkit.WebView: void debugDump()> (1)
<android.webkit.WebView: void dumpV8Counters()> (1)
<android.webkit.WebView: void freeMemory()> (1)
<android.webkit.WebView: void onPause()> (1)
<android.webkit.WebView: void onResume()> (1)
<android.webkit.WebView: void pauseTimers()> (1)
<android.webkit.WebView: void reload()> (1)
<android.webkit.WebView: void resumeTimers()> (1)
<android.webkit.WebView: void stopLoading()> (3)
<android.webkit.WebViewCore: void access$1800(android.webkit.WebViewCore,int,int,int,float,int,int,boolean)> (4)
<android.webkit.WebView: void destroy()> (6)
<android.webkit.WebView: void doShortPress()> (2)
<android.webkit.WebViewCore: void didFirstLayout(boolean)> ()
<android.webkit.WebViewCore: void updateViewport()> ()
<android.widget.GridView: void onRestoreInstanceState(android.os.Parcelable)> (3)
<android.widget.ListView: void onRestoreInstanceState(android.os.Parcelable)> (17)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onRestart()> (3)
<com.android.contacts.SearchResultsActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.SearchResultsActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$5600(com.android.camera.Camera)> (1)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void restartPreview()> (3)
<com.android.camera.VideoCamera: boolean switchToCameraMode()> (2)
<com.android.camera.Camera: boolean switchToVideoMode()> (2)
<com.android.camera.VideoCamera: void onSharedPreferencesChanged()> (1)
<com.android.camera.VideoCamera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.VideoCamera$1: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$1: void run()> (2)
<com.android.server.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> (1)
<com.android.server.NotificationPlayer: void stop()> (3)
<com.android.server.PackageManagerService$5: void run()> (1)
<com.android.server.PackageManagerService$11: void run()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<android.widget.QuickContactBadge: void <init>(android.content.Context)> (3)
<com.android.quicksearchbox.ui.ContactBadge: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.contacts.TwelveKeyDialer: void afterTextChanged(android.text.Editable)> (2)
<com.android.contacts.ui.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.internal.widget.ContactHeaderWidget: void <init>(android.content.Context)> (3)
<com.android.internal.widget.ContactHeaderWidget: void access$300(com.android.internal.widget.ContactHeaderWidget,android.net.Uri,boolean)> (1)
<com.android.internal.widget.ContactHeaderWidget: void bindFromContactLookupUri(android.net.Uri)> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<android.webkit.WebViewCore: void access$500(android.webkit.WebViewCore)> (1)
<android.webkit.WebViewCore: void initializeSubwindow()> (1)
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)> (3)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.webkit.HttpAuthHandler: void processNextLoader()> (4)
<com.android.browser.Tab$SubWindowClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageView$CustomWebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsLicenseActivity$1: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsSafetyLegalActivity$1: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<android.webkit.Network: boolean checkSslPrefTable(android.webkit.LoadListener,android.net.http.SslError)> (1)
<android.webkit.SslErrorHandler: boolean processNextLoader()> (1)
<com.android.browser.Tab$2$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (8)
<com.android.browser.Tab$2$5: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.Tab$2$6: void onClick(android.content.DialogInterface,int)> (1)
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.net.http.Connection: void processRequests(android.net.http.Request)> (4)
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.net.http.Request: void readResponse(android.net.http.AndroidHttpClientConnection)> (1)
<android.webkit.CacheLoader: boolean sendData()> (1)
<android.webkit.ContentLoader: boolean sendData()> (1)
<android.webkit.DataLoader: boolean sendData()> (1)
<android.webkit.FileLoader: boolean sendData()> (1)
<android.webkit.StreamLoader: void load()> (5)
<android.webkit.CacheLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.ContentLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.DataLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.FileLoader: void closeStreamAndSendEndData()> (1)
<android.net.http.Connection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (4)
<android.net.http.Request: void error(int,int)> (1)
<android.webkit.StreamLoader: boolean setupStreamAndSendStatus()> (2)
<android.webkit.CacheLoader: void sendHeaders()> (1)
<android.webkit.ContentLoader: void sendHeaders()> (1)
<android.webkit.DataLoader: void sendHeaders()> (1)
<android.webkit.FileLoader: void sendHeaders()> (1)
<android.webkit.BrowserFrame: boolean handleUrl(java.lang.String)> ()
<android.webkit.WebView: void cancelTouch()> (2)
<android.webkit.WebView: void doFling()> (1)
<android.webkit.WebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (1)
<android.webkit.WebView: void onScrollChanged(int,int,int,int)> (7)
<android.webkit.WebView: void setNewZoomScale(float,boolean,boolean)> (5)
<android.webkit.WebTextView: void onTextChanged(java.lang.CharSequence,int,int,int)> (3)
<android.webkit.WebTextView: void sendDomEvent(android.view.KeyEvent)> (3)
<android.webkit.WebTextView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.webkit.WebView: boolean performLongClick()> (7)
<com.android.browser.BrowserSettings: void clearCache(android.content.Context)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<android.webkit.WebView: void goBackOrForward(int)> (3)
<android.webkit.WebTextView: void setType(int)> (1)
<android.webkit.WebView: void onAttachedToWindow()> (3)
<android.webkit.WebView: void onDetachedFromWindow()> (3)
<android.webkit.WebView: void onWindowFocusChanged(boolean)> (3)
<android.webkit.WebTextView: void onEditorAction(int)> (4)
<android.webkit.WebView: void clearTextEntry(boolean)> (11)
<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)> (3)
<com.android.browser.BrowserActivity: void onNetworkToggle(boolean)> (1)
<com.android.browser.Tab$2: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> (1)
<android.webkit.WebTextView: void onSelectionChanged(int,int)> (3)
<android.webkit.WebTextView: void setDefaultSelection()> (3)
<android.webkit.WebView$1: void onVisibilityChanged(boolean)> (1)
<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)> (5)
<android.webkit.WebView: boolean zoomIn()> (3)
<android.webkit.WebView: boolean zoomOut()> (3)
<android.webkit.CallbackProxy: void switchOutDrawHistory()> (2)
<android.webkit.WebTextView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView: boolean textFieldDrag(android.view.MotionEvent)> (1)
<com.android.browser.Tab: boolean restoreState(android.os.Bundle)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.WebView: boolean setFrame(int,int,int,int)> (3)
<android.webkit.WebView: void contentSizeChanged(boolean)> (1)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.Object)> (1)
<com.android.browser.BrowserActivity: void packageChanged(java.lang.String,boolean)> (1)
<com.android.browser.BrowserActivity: void addPackageNames(java.util.Set)> (1)
<android.webkit.WebView: void access$4100(android.webkit.WebView,int,int,boolean)> (2)
<android.webkit.WebView: void doTrackball(long)> (1)
<com.android.browser.Tab: void activateVoiceSearchMode(android.content.Intent)> (2)
<com.android.email.activity.MessageCompose: void displayQuotedText(java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessageView$LoadAttachmentsTask: void onPostExecute(com.android.email.provider.EmailContent$Attachment[])> (1)
<com.android.email.activity.MessageView: void onShowPictures()> (1)
<com.android.email.activity.MessageView: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.WebView: void loadUrl(java.lang.String)> (14)
<com.android.browser.BrowserActivity$UrlData: void loadIn(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.BrowserActivity: void sendNetworkType(java.lang.String,java.lang.String)> (1)
<android.webkit.WebView: void drawPage(android.graphics.Canvas)> ()
<com.android.browser.TabControl: boolean recreateWebView(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.TabControl: void freeMemory()> (1)
<com.android.browser.Tab: void pause()> (2)
<com.android.browser.Tab: void resume()> (2)
<com.android.browser.BrowserActivity: boolean pauseWebViewTimers()> (3)
<com.android.browser.BrowserActivity: void resumeWebViewTimers()> (2)
<com.android.browser.BrowserActivity: void stopLoading()> (3)
<com.android.browser.TabControl: void stopAllLoading()> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onStop()> (1)
<android.webkit.WebView: void finalize()> ()
<com.android.browser.Tab: void destroy()> (4)
<com.android.browser.Tab: void dismissSubWindow()> (3)
<com.android.email.activity.MessageCompose: void onDestroy()> (1)
<com.android.email.activity.MessageView: void onDestroy()> (1)
<com.android.htmlviewer.HTMLViewerActivity: void onDestroy()> (1)
<android.webkit.WebView: void access$4700(android.webkit.WebView)> (2)
<android.widget.AutoCompleteTextView$DropDownListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<android.widget.ExpandableListView: void onRestoreInstanceState(android.os.Parcelable)> (5)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.calendar.AgendaListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.contacts.ContactsListActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.PinnedHeaderListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.contacts.SplitAggregateView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.internal.app.AlertController$RecycleListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.internal.view.menu.ExpandedMenuView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.mms.ui.MessageListView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.music.MusicPicker$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.music.TouchInterceptor: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.quicksearchbox.ui.SuggestionsView: void onRestoreInstanceState(android.os.Parcelable)> (4)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.camera.Camera$4: void run()> (1)
<com.android.camera.Camera: void access$700(com.android.camera.Camera)> (2)
<com.android.camera.Camera: void onClick(android.view.View)> (1)
<com.android.camera.VideoCamera: boolean access$1100(com.android.camera.VideoCamera)> (1)
<com.android.camera.VideoCamera: boolean onSwitchChanged(com.android.camera.Switcher,boolean)> (1)
<com.android.camera.Camera: boolean access$6100(com.android.camera.Camera)> (1)
<com.android.camera.Camera: boolean onSwitchChanged(com.android.camera.Switcher,boolean)> (1)
<com.android.camera.VideoCamera: void access$1300(com.android.camera.VideoCamera)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void <init>(android.content.Context)> (3)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.TwelveKeyDialer: void setFormattedDigits(java.lang.String)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.contacts.ViewContactActivity: void startEntityQuery()> (4)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<android.webkit.CallbackProxy: android.webkit.WebView createWindow(boolean,boolean)> (1)
<com.android.browser.Browser: void onCreate()> (1)
<android.webkit.WebView: void <init>(android.content.Context)> (8)
<android.webkit.SslErrorHandler: void fastProcessQueuedSslErrors()> (4)
<com.android.browser.BrowserActivity$12: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.BrowserActivity$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$SubWindowClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.email.activity.MessageView$CustomWebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.settings.SettingsLicenseActivity$1: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.settings.SettingsSafetyLegalActivity$1: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<android.net.http.Connection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.net.http.ConnectionThread: void run()> (2)
<android.net.http.HttpConnection: void processRequests(android.net.http.Request)> (1)
<android.net.http.HttpsConnection: void processRequests(android.net.http.Request)> (1)
<android.net.http.RequestHandle: void processRequest()> (2)
<android.webkit.CacheLoader: void load()> (4)
<android.webkit.ContentLoader: void load()> (2)
<android.webkit.DataLoader: void load()> (2)
<android.webkit.FileLoader: void load()> (2)
<android.net.http.Connection: boolean openHttpConnection(android.net.http.Request)> (3)
<android.net.http.HttpConnection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (1)
<android.net.http.HttpsConnection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (1)
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> (2)
<android.webkit.WebView: void access$1600(android.webkit.WebView)> (1)
<android.webkit.WebView: void drawContent(android.graphics.Canvas)> (2)
<android.webkit.WebView: void computeScroll()> (3)
<android.webkit.WebView: void recordNewContentSize(int,int,boolean)> (3)
<android.webkit.WebView: boolean zoomWithPreview(float,boolean)> (4)
<android.webkit.WebView: void access$1100(android.webkit.WebView,float,boolean,boolean)> (5)
<android.webkit.WebView: void displaySoftKeyboard(boolean)> (1)
<android.webkit.WebView: void doDoubleTap()> (2)
<android.webkit.WebView: void updateDefaultZoomDensity(int)> (1)
<android.webkit.WebView: void goBack()> (4)
<android.webkit.WebView: void goForward()> (1)
<android.webkit.WebView: void rebuildWebTextView()> (9)
<android.webkit.WebView: void access$5700(android.webkit.WebView,boolean)> (2)
<android.webkit.WebView: void invokeZoomPicker()> ()
<com.android.browser.BrowserActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.PluginFullScreenHolder: boolean onTrackballEvent(android.view.MotionEvent)> (1)
<android.webkit.WebTextView: boolean onTrackballEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView$1: void onZoom(boolean)> (1)
<android.webkit.WebView$9: void onClick(android.view.View)> (1)
<android.webkit.WebView$10: void onClick(android.view.View)> (1)
<android.webkit.BrowserFrame: void loadFinished(java.lang.String,int,boolean)> ()
<com.android.browser.TabControl: boolean restoreState(android.os.Bundle)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (16)
<com.android.browser.BrowserActivity: void access$200(com.android.browser.BrowserActivity,java.lang.String,boolean)> (1)
<com.android.browser.BrowserActivity: void access$2300(com.android.browser.BrowserActivity,java.util.Set)> (1)
<com.android.browser.Tab$5: void onIndexChanged(android.webkit.WebHistoryItem,int)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessage(com.android.email.provider.EmailContent$Message,com.android.email.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessageGuarded(com.android.email.provider.EmailContent$Message,com.android.email.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageView$LoadAttachmentsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void access$2200(com.android.email.activity.MessageView,java.lang.String,java.lang.String)> (1)
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void loadUrl(android.webkit.WebView,java.lang.String)> (5)
<com.android.browser.ErrorConsoleView$1: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void messageChanged()> (3)
<com.android.settings.TetherSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.email.activity.MessageView$MessageViewHandler: void attachmentProgress(boolean)> (1)
<com.android.email.activity.MessageView$MessageViewHandler: void progress(boolean)> (1)
<com.android.email.activity.MessageView$MessageViewHandler: void loadContentUri(java.lang.String)> (1)
<com.android.browser.BrowserActivity: void loadUrlDataIn(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (3)
<com.android.browser.BrowserActivity: void access$000(com.android.browser.BrowserActivity,java.lang.String,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onLowMemory()> (1)
<com.android.browser.TabControl: void pauseCurrentTab()> (1)
<com.android.browser.Tab: void putInBackground()> (3)
<com.android.browser.TabControl: void resumeCurrentTab()> (1)
<com.android.browser.Tab: void putInForeground()> (1)
<com.android.browser.BrowserActivity: void goBackOnePageOrQuit()> (2)
<com.android.browser.BrowserActivity: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.browser.BrowserActivity: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.browser.TitleBar: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void destroy()> (1)
<com.android.browser.BrowserActivity: void dismissSubWindow(com.android.browser.Tab)> (6)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.camera.Camera$JpegPictureCallback: void onPictureTaken(byte[],android.hardware.Camera)> (1)
<com.android.camera.VideoCamera$3: void run()> (1)
<com.android.camera.Switcher$OnSwitchListener: boolean onSwitchChanged(com.android.camera.Switcher,boolean)> (1)
<com.android.camera.Camera$7: void run()> (1)
<com.android.camera.VideoCamera$MyHeadUpDisplayListener$1: void run()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> (1)
<com.android.commands.bmgr.Bmgr: void doRestorePackage(java.lang.String)> (1)
<com.android.contacts.TwelveKeyDialer: boolean resolveIntent()> (3)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (5)
<com.android.contacts.ViewContactActivity: boolean makeItemDefault(android.view.MenuItem)> (1)
<com.android.contacts.ViewContactActivity: void access$100(com.android.contacts.ViewContactActivity)> (1)
<com.android.contacts.ViewContactActivity: void joinAggregate(long)> (1)
<com.android.contacts.ViewContactActivity: void onResume()> (1)
<android.webkit.BrowserFrame: android.webkit.BrowserFrame createWindow(boolean,boolean)> ()
<com.android.browser.TabControl: android.webkit.WebView createNewWebView()> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (2)
<android.webkit.SslErrorHandler: void handleSslErrorRequest(android.webkit.LoadListener)> (1)
<android.net.http.RequestQueue$ActivePool: void startup()> (1)
<android.net.http.RequestHandle: void createAndQueueNewRequest()> (2)
<android.webkit.Network: boolean requestURL(java.lang.String,java.util.Map,byte[],android.webkit.LoadListener)> (2)
<android.net.http.HttpConnection: boolean openHttpConnection(android.net.http.Request)> (1)
<android.net.http.HttpsConnection: boolean openHttpConnection(android.net.http.Request)> (1)
<android.webkit.HTML5VideoViewProxy$PosterDownloader$1: void run()> (1)
<android.webkit.WebView$ScaleDetectorListener: boolean onScaleBegin(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView: void access$1500(android.webkit.WebView,android.graphics.Canvas)> (1)
<android.webkit.WebView: void onDraw(android.graphics.Canvas)> (3)
<android.webkit.WebView: void access$6000(android.webkit.WebView,int,int,boolean)> (2)
<android.webkit.WebView: void notifyFindDialogDismissed()> (1)
<android.webkit.WebView: void setFindIsUp(boolean)> (2)
<android.webkit.WebView: void centerFitRect(int,int,int,int)> (2)
<android.webkit.WebView$PostScale: void run()> (1)
<android.webkit.WebView$ScaleDetectorListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView$ScaleDetectorListener: void onScaleEnd(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView: void access$6900(android.webkit.WebView,boolean)> (4)
<android.webkit.WebView: void access$8800(android.webkit.WebView)> (4)
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.settings.SettingsSafetyLegalActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (6)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (3)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.browser.BrowserActivity$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.BrowserActivity$18: void onPostExecute(java.util.Set)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object[])> (1)
<com.android.email.activity.MessageView$LoadBodyTask: void onPostExecute(java.lang.String[])> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTab(java.lang.String)> (3)
<com.android.browser.BrowserActivity: void loadUrlFromContext(android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: boolean moveToNewer()> (2)
<com.android.email.activity.MessageView: boolean moveToOlder()> (3)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MessageView$ControllerResults: void loadAttachmentCallback(com.android.email.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageView$ControllerResults: void loadMessageForViewCallback(com.android.email.mail.MessagingException,long,int)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(com.android.browser.BrowserActivity$UrlData,boolean,java.lang.String)> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean,java.lang.String,java.lang.String)> (3)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$2: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Tab$SubWindowChromeClient: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.camera.Switcher: void tryToSetSwitch(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> ()
<com.android.contacts.TwelveKeyDialer: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.contacts.ViewContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ViewContactActivity$1: void onChange(boolean)> (1)
<android.webkit.Network: void handleSslErrorRequest(android.webkit.LoadListener)> (1)
<android.net.http.RequestQueue: void <init>(android.content.Context,int)> (1)
<android.net.http.RequestHandle: void setupAuthResponse()> (2)
<android.webkit.WebView$DragTrackerHandler: void buildBitmap(int,int)> (1)
<com.android.browser.FindDialog: void dismiss()> (2)
<android.webkit.WebView: void access$9700(android.webkit.WebView,int,int,int,int)> (5)
<com.android.browser.BrowserSettings$Observer: void update(java.util.Observable,java.lang.Object)> (2)
<com.android.browser.Tab$2: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)> (1)
<com.android.internal.app.AlertActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.BrowserActivity: boolean switchToTab(int)> (7)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.browser.BrowserActivity$18: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView$LoadBodyTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.BrowserActivity: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab access$700(com.android.browser.BrowserActivity,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void access$500(com.android.browser.BrowserActivity,android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: void onDelete()> (2)
<com.android.email.activity.MessageView: void onRespond(int,int)> (1)
<com.android.email.Controller$Result: void loadAttachmentCallback(com.android.email.mail.MessagingException,long,long,int)> (5)
<com.android.email.Controller$Result: void loadMessageForViewCallback(com.android.email.mail.MessagingException,long,int)> (4)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(java.lang.String,boolean,java.lang.String)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> (2)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.BrowserActivity: void closeCurrentWindow()> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.camera.Switcher: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.LoadListener: void handleSslError(android.net.http.SslError)> (2)
<android.net.http.RequestQueue: void <init>(android.content.Context)> (2)
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> (1)
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.webkit.WebView$DragTrackerHandler: boolean draw(android.graphics.Canvas)> (1)
<com.android.browser.FindDialog$2: void onClick(android.view.View)> (1)
<com.android.browser.Tab: boolean createSubWindow()> (1)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: boolean handleMenuItem(int)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.email.Controller$ServiceCallback: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.Controller: void loadAttachment(long,long,long,long,com.android.email.Controller$Result)> (2)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.Controller: void loadMessageForView(long,com.android.email.Controller$Result)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1200(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.camera.Switcher: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void retainQueue()> (1)
<android.webkit.Network: void <init>(android.content.Context)> (1)
<android.webkit.LoadListener: void makeAuthResponse(java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessageView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.MessagingListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.MessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.email.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.email.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.activity.MessageView: void onDownloadAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.activity.MessageView: void onViewAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.MessagingListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.activity.MessageView: void reloadUiFromMessage(com.android.email.provider.EmailContent$Message,boolean)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void start()> (1)
<android.webkit.Network: android.webkit.Network getInstance(android.content.Context)> (10)
<com.android.email.GroupMessagingListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentFinished(long,long,long)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (2)
<com.android.email.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.email.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (3)
<com.android.email.GroupMessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewFinished(long)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewStarted(long)> (2)
<com.android.email.activity.MessageView: void access$1900(com.android.email.activity.MessageView,com.android.email.provider.EmailContent$Message,boolean)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.HTML5VideoViewProxy: void loadPoster(java.lang.String)> ()
<com.android.email.MessagingController$8: void run()> (1)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener)> (1)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.SyncManager$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.EasSyncService: void doProgressCallback(long,long,int)> (2)
<com.android.exchange.EasSyncService: void doStatusCallback(long,long,int)> (2)
<com.android.exchange.SyncManager$1: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.MessagingController$7: void run()> (1)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (1)
<com.android.email.activity.MessageView$LoadMessageTask: void onPostExecute(com.android.email.provider.EmailContent$Message)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.email.Controller$12: void run()> (2)
<com.android.exchange.EasOutboxService: void doProgressCallback(long,long,int)> (1)
<com.android.exchange.EasSyncService: void getAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasOutboxService: void doStatusCallback(long,long,int)> (1)
<com.android.email.Controller$4: void run()> (2)
<com.android.email.activity.MessageView$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.exchange.EasOutboxService: void getAttachment(com.android.exchange.PartRequest)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.server.AccessibilityManagerService: void registerPackageChangeAndBootCompletedBroadcastReceiver()> (1)
<com.android.server.AccessibilityManagerService: void <init>(android.content.Context)> (1)
Permission:android.permission.MOUNT_FORMAT_FILESYSTEMS
9 Callers:
<com.android.server.MountService: int formatVolume(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int formatVolume(java.lang.String)> (2)
<android.os.storage.IMountService: int formatVolume(java.lang.String)> (2)
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.MediaFormat$1$1: void run()> (2)
<com.android.server.MountService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.MediaFormat$1: void onClick(android.view.View)> (1)
Permission:android.permission.KILL_BACKGROUND_PROCESSES
8 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (1)
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
Permission:android.permission.READ_PHONE_STATE
370 Callers:
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.PhoneSubInfo: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.contacts.SpecialCharSequenceMgr: void showIMEIPanel(android.content.Context,boolean)> (1)
<com.android.contacts.SpecialCharSequenceMgr: void showMEIDPanel(android.content.Context,boolean)> (1)
<com.android.email.Utility: java.lang.String getConsistentDeviceId(android.content.Context)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleIMEIDisplay(android.content.Context,java.lang.String,boolean)> (1)
<com.android.exchange.SyncManager: java.lang.String getDeviceIdInternal(android.content.Context)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,boolean,android.widget.EditText)> (2)
<com.android.exchange.SyncManager: java.lang.String getDeviceId(android.content.Context)> (3)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupExchange: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.SyncManager: java.lang.String getDeviceId()> (3)
<com.android.exchange.SyncManager: void onCreate()> (1)
<com.android.contacts.TwelveKeyDialer: void afterTextChanged(android.text.Editable)> (2)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String)> (2)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.contacts.TwelveKeyDialer: void setFormattedDigits(java.lang.String)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String)> (1)
<com.android.exchange.provider.ExchangeProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.contacts.TwelveKeyDialer: boolean resolveIntent()> (3)
<com.android.contacts.TwelveKeyDialer: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> (1)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()> (1)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (3)
<android.accounts.AccountManagerService$SimWatcher: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ThrottleService$DataRecorder: java.io.File getDataFile()> (2)
<com.android.server.ThrottleService$DataRecorder: void checkForSubscriberId()> (2)
<com.android.server.ThrottleService$DataRecorder: void record()> (2)
<com.android.server.ThrottleService$DataRecorder: void retrieve()> (2)
<com.android.server.ThrottleService$DataRecorder: boolean setNextPeriod(java.util.Calendar,java.util.Calendar)> (1)
<com.android.server.ThrottleService$DataRecorder: void addData(long,long)> (1)
<com.android.server.ThrottleService$DataRecorder: void <init>(android.content.Context,com.android.server.ThrottleService)> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onRebootRecovery()> (1)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> (4)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)> (2)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageUtils: boolean isLocalNumber(java.lang.String)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean canAddToContacts(com.android.mms.data.Contact)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.data.Contact$ContactsCache: void access$500(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2000(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: void buildAddAddressToContactMenuItem(android.view.Menu)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$5: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (3)
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> (2)
<com.android.contacts.RecentCallsListActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void initVoicemailButton()> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.PhoneUtils$4: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (5)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> (2)
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (12)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.contacts.TwelveKeyDialer: void onPause()> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.server.status.StatusBarPolicy: void <init>(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.server.status.StatusBarPolicy: void installIcons(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<com.android.phone.PhoneInterfaceManager: void enforceReadPermission()> (1)
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.provider.GalEmailAddressAdapter$1: void run()> (1)
Permission:android.permission.WRITE_CONTACTS
419 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (2)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.ViewContactActivity: void setAggregationException(long,int)> (1)
<com.android.contacts.ViewContactActivity: void joinAggregate(long)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (4)
<com.android.contacts.ContactsListActivity: android.database.Cursor doFilter(java.lang.String)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getPeopleFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.database.Cursor doFilter(java.lang.String)> (1)
<com.android.providers.contacts.SocialProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.contacts.ui.QuickContactWindow: android.net.Uri getDataUri(android.net.Uri)> (1)
<com.android.contacts.ui.QuickContactWindow: void show(android.net.Uri,android.graphics.Rect,int,java.lang.String[])> (1)
<com.android.contacts.ui.QuickContactActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.ui.QuickContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsListActivity$2: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactFilterUri(java.lang.String)> (6)
<com.android.contacts.ContactsListActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (4)
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getContactFilterUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri access$1000(com.android.contacts.ContactsListActivity,java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity: void startQuery()> (8)
<com.android.contacts.SearchResultsActivity: android.net.Uri getUriToQuery()> (1)
<com.android.contacts.ContactsListActivity: boolean checkProviderState(boolean)> (6)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void onContentChanged()> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (4)
<com.android.contacts.ContactsListActivity: void onRestart()> (5)
<com.android.contacts.ContactsListActivity: void onResume()> (5)
<com.android.contacts.SearchResultsActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.SearchResultsActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onRestart()> (3)
<com.android.contacts.SearchResultsActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onResume()> (3)
<com.android.contacts.SearchResultsActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$1: void onChange(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.contacts.PhoneDisambigDialog: void onClick(android.content.DialogInterface,int)> (2)
<com.android.contacts.PhoneDisambigDialog: void show()> (1)
<com.android.contacts.ContactsListActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (5)
<com.android.contacts.ContactsListActivity: boolean callContact(android.database.Cursor)> (6)
<com.android.contacts.ContactsListActivity: boolean smsContact(android.database.Cursor)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.ContactsListActivity: boolean callSelection()> (4)
<com.android.contacts.ContactsListActivity: boolean onContextItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity: void onClick(android.view.View)> (4)
<com.android.contacts.SearchResultsActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.SearchResultsActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.SearchResultsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onClick(android.view.View)> (1)
<com.android.contacts.SearchResultsActivity: void onClick(android.view.View)> (1)
<com.android.server.DemoDataSet: void add(android.content.Context)> (1)
<com.android.server.DemoThread: void run()> (1)
<com.android.contacts.RecentCallsListActivity: void resetNewCallsFlag()> (1)
<com.android.contacts.RecentCallsListActivity: void onResume()> (2)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (10)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getSelectedUri(int)> (1)
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,java.lang.String,java.lang.String,android.content.Context,boolean)> (3)
<com.android.contacts.model.GoogleSource: void attemptMyContactsMembership(com.android.contacts.model.EntityDelta,android.content.Context)> (1)
<com.android.contacts.model.GoogleSource: void createMyContactsIfNotExist(android.accounts.Account,android.content.Context)> (2)
<com.android.contacts.ui.EditContactActivity: void createContact(android.accounts.Account)> (2)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSdCard(android.content.Context,android.accounts.Account)> (1)
<com.android.contacts.util.AccountSelectionUtil: void doImportFromSim(android.content.Context,android.accounts.Account)> (1)
<com.android.contacts.ui.EditContactActivity: void access$200(com.android.contacts.ui.EditContactActivity,android.accounts.Account)> (1)
<com.android.contacts.ui.EditContactActivity: void selectAccountAndCreateContact(java.util.ArrayList)> (1)
<com.android.contacts.util.AccountSelectionUtil: void doImport(android.content.Context,int,android.accounts.Account)> (2)
<com.android.contacts.ui.EditContactActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(com.android.contacts.ui.EditContactActivity,java.util.ArrayList)> (1)
<com.android.contacts.ContactsListActivity: void handleImportRequest(int)> (4)
<com.android.contacts.util.AccountSelectionUtil$AccountSelectedListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (4)
<com.android.contacts.SearchResultsActivity: void handleImportRequest(int)> (1)
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ContactsListActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.SearchResultsActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object)> (6)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (2)
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void updateCallLog(com.android.contacts.RecentCallsListActivity$CallerInfoQuery,com.android.contacts.RecentCallsListActivity$ContactInfo)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: boolean queryContactInfo(com.android.contacts.RecentCallsListActivity$CallerInfoQuery)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void run()> (1)
<com.android.contacts.ViewContactActivity: boolean makeItemDefault(android.view.MenuItem)> (1)
<com.android.contacts.ViewContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ui.EditContactActivity: void joinAggregate(long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (4)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.contacts.RecentCallsListActivity$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.contacts.ui.EditContactActivity: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)> (1)
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.EntitySet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.ui.EditContactActivity,com.android.contacts.model.EntitySet[])> (1)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (6)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<android.pim.vcard.VCardEntry: android.net.Uri pushIntoContentResolver(android.content.ContentResolver)> (1)
<android.pim.vcard.VCardEntryCommitter: void onEntryCreated(android.pim.vcard.VCardEntry)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getJoinSuggestionsUri(java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.AttachImage: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.RecentCallsListActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.providers.contacts.LegacyContactImporter: void insertCall(android.database.Cursor)> (1)
<com.android.providers.contacts.LegacyContactImporter: void importCalls()> (1)
<com.android.providers.contacts.LegacyContactImporter: void importContactsFromLegacyDb()> (1)
<com.android.providers.contacts.LegacyContactImporter: boolean importContacts()> (1)
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)> (1)
<com.android.contacts.model.EntitySet: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> (6)
<com.android.contacts.ContactsListActivity: boolean deleteSelection()> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.SearchResultsActivity: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean deleteSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean deleteSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean deleteSelection()> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (8)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> (1)
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (4)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.internal.widget.ContactHeaderWidget$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactIdLoaded(android.database.Cursor,int,int)> (1)
<com.android.contacts.ViewContactActivity: void startEntityQuery()> (4)
<com.android.calendar.EventInfoActivity: void showContactInfo(com.android.calendar.EventInfoActivity$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.MessageView: void onClickSender()> (1)
<com.android.contacts.ImportVCardActivity$VCardReadThread: void run()> (2)
<com.android.contacts.ViewContactActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$400(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor,int,int)> (1)
<com.android.contacts.ViewContactActivity: void access$100(com.android.contacts.ViewContactActivity)> (1)
<com.android.contacts.ViewContactActivity: void onResume()> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.contacts.ImportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ViewContactActivity$1: void onChange(boolean)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.ui.ConversationListItemData)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.EntitySet: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<android.pim.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.Phone,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Void doInBackground(android.app.Activity,com.android.contacts.ui.ContactsPreferencesActivity$AccountSet[])> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.SEND_SMS
137 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
Permission:android.permission.SYSTEM_ALERT_WINDOW
9 Callers:
<com.android.internal.policy.impl.PhoneWindowManager: int checkAddPermission(android.view.WindowManager$LayoutParams)> (1)
<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams)> (1)
<com.android.server.WindowManagerService: int addWindow(com.android.server.WindowManagerService$Session,android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (1)
<com.android.server.WindowManagerService$Session: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (3)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WindowManagerService$Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.RESTART_PACKAGES
8 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (1)
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
Permission:android.permission.CHANGE_NETWORK_STATE
311 Callers:
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setIpForwardingEnabled(boolean)> ()
<android.os.INetworkManagementService$Stub: void setIpForwardingEnabled(boolean)> (2)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.INetworkManagementService: void setIpForwardingEnabled(boolean)> (5)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffMasterTetherSettings()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnMasterTetherSettings()> (2)
<com.android.internal.util.HierarchicalState: void enter()> (11)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffMasterTetherSettings()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffMasterTetherSettings()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnMasterTetherSettings()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnMasterTetherSettings()> (2)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void completeConstruction()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void performTransitions()> (2)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.internal.util.HierarchicalStateMachine: void start()> (7)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> ()
<android.os.INetworkManagementService$Stub: void startTethering(java.lang.String[])> (2)
<android.os.INetworkManagementService: void startTethering(java.lang.String[])> (1)
<com.android.server.NetworkManagementService: void stopTethering()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopTethering()> ()
<android.os.INetworkManagementService$Stub: void stopTethering()> (2)
<android.os.INetworkManagementService: void stopTethering()> (2)
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void tetherInterface(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void tetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService: void tetherInterface(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void untetherInterface(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void untetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService: void untetherInterface(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(java.lang.String[])> ()
<android.os.INetworkManagementService$Stub: void setDnsForwarders(java.lang.String[])> (2)
<android.os.INetworkManagementService: void setDnsForwarders(java.lang.String[])> (1)
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void enableNat(java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void enableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void enableNat(java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void disableNat(java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void disableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void disableNat(java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void detachPppd(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void detachPppd(java.lang.String)> (2)
<android.os.INetworkManagementService: void detachPppd(java.lang.String)> ()
<com.android.server.NetworkManagementService: void startUsbRNDIS()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startUsbRNDIS()> ()
<android.os.INetworkManagementService$Stub: void startUsbRNDIS()> (2)
<android.os.INetworkManagementService: void startUsbRNDIS()> (1)
<com.android.server.connectivity.Tethering: boolean enableUsbRndis(boolean)> (1)
<com.android.server.connectivity.Tethering: boolean access$2200(com.android.server.connectivity.Tethering,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.internal.util.HierarchicalState: void exit()> (20)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeExitMethods(com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NetworkManagementService: void stopUsbRNDIS()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopUsbRNDIS()> ()
<android.os.INetworkManagementService$Stub: void stopUsbRNDIS()> (2)
<android.os.INetworkManagementService: void stopUsbRNDIS()> (1)
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.WifiService: boolean setWifiApEnabledBlocking(boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.WifiService: boolean access$2100(com.android.server.WifiService,boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.server.NetworkManagementService: void stopAccessPoint()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint()> ()
<android.os.INetworkManagementService$Stub: void stopAccessPoint()> (2)
<android.os.INetworkManagementService: void stopAccessPoint()> (2)
<com.android.server.WifiService: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService: void access$600(com.android.server.WifiService,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.server.WifiService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceThrottle(java.lang.String,int,int)> ()
<android.os.INetworkManagementService$Stub: void setInterfaceThrottle(java.lang.String,int,int)> (2)
<android.os.INetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> (3)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.ThrottleService$MyHandler: void clearThrottleAndNotification()> (1)
<com.android.server.ThrottleService$MyHandler: void onIfaceUp()> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.ConnectivityService: void enforceChangePermission()> (7)
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int)> (2)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHost(int,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHost(int,int)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: int turnOnMobileConnection()> (3)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffMobileConnection()> (2)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.mms.transaction.Transaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (6)
<com.android.development.Connectivity$11: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$13: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$9: void onClick(android.view.View)> (1)
<com.android.internal.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: int turnOnMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: int turnOnMobileConnection()> (2)
<com.android.development.Connectivity$10: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$12: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffMobileConnection()> (2)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.mms.transaction.NotificationTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.ReadRecTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.RetrieveTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.SendTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.server.ConnectivityService: void enforceTetherChangePermission()> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (1)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
Permission:android.permission.ACCESS_COARSE_LOCATION
123 Callers:
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (12)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.contacts.TwelveKeyDialer: void onPause()> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.server.status.StatusBarPolicy: void <init>(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.status.StatusBarPolicy: void installIcons(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,long,float,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> (2)
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> (2)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> (1)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.cooliris.media.ReverseGeocoder: java.lang.String computeMostGranularCommonLocation(com.cooliris.media.MediaSet)> (2)
<android.location.LocationManager: android.location.LocationProvider best(java.util.List)> (1)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (4)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateSetViewDetailModeStrings(android.content.Context,com.cooliris.media.MediaSet,int)> (1)
<com.cooliris.media.ReverseGeocoder: boolean process(com.cooliris.media.MediaSet)> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.Camera: void startReceivingLocationUpdates()> (3)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateDetailModeStrings(android.content.Context,java.util.ArrayList)> (1)
<com.cooliris.media.ReverseGeocoder: void run()> (2)
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<android.webkit.GeolocationService: void start()> ()
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (2)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (1)
<com.cooliris.media.HudLayer$14: void run()> (1)
<com.cooliris.media.ReverseGeocoder: void <init>(android.content.Context)> (1)
<com.android.camera.Camera: void access$900(com.android.camera.Camera)> (3)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$6300(com.android.camera.Camera)> (1)
<com.cooliris.app.App: void <init>(android.content.Context)> (6)
<com.android.camera.Camera$MyHeadUpDisplayListener$1: void run()> (1)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.Photographs: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(boolean)> (2)
<android.location.ILocationManager: java.util.List getProviders(boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (1)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
Permission:android.permission.CALL_PHONE
20 Callers:
<com.android.phone.PhoneInterfaceManager: void enforceCallPermission()> (2)
<com.android.phone.PhoneInterfaceManager: boolean endCall()> (2)
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean endCall()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean endCall()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: void call(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony: boolean endCall()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: void call(java.lang.String)> ()
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void dialRecipient()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
Permission:android.permission.WRITE_SETTINGS
600 Callers:
<com.android.server.PowerManagerService: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> ()
<android.os.IPowerManager$Stub: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void setStayOnSetting(int)> (1)
<com.android.server.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> (2)
<com.android.server.DemoDataSet: android.net.Uri addShortcut(java.lang.String,android.content.Intent)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void updateShortcut(char,android.content.Intent)> (1)
<com.android.server.DemoDataSet: void addDefaultData()> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.server.DemoDataSet: void add(android.content.Context)> (1)
<com.android.server.DemoThread: void run()> (1)
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (10)
<android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver: void register()> (1)
<com.android.browser.SystemAllowGeolocationOrigins: void start()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void <init>(android.content.Context)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.server.AccessibilityManagerService: void registerSettingsContentObservers()> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init>(com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.ThrottleService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.WifiWatchdogService: void registerForSettingsChanges()> (1)
<android.net.wifi.WifiStateTracker: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void <init>(android.content.Context,com.android.internal.policy.impl.PhoneWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void <init>(android.content.Context)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.server.AccessibilityManagerService: void <init>(android.content.Context)> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.status.StatusBarService,com.android.server.LightsService)> (1)
<com.android.server.ThrottleService: void systemReady()> (1)
<com.android.server.WifiWatchdogService: void <init>(android.content.Context,android.net.wifi.WifiStateTracker)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void <init>(android.content.Context,com.android.internal.policy.impl.LockPatternKeyguardViewTest$1)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void setUp()> (1)
<com.android.server.WindowManagerService$PolicyThread: void run()> (2)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> (13)
<android.media.MediaScanner$MyMediaScannerClient: void setSettingIfNotSet(java.lang.String,android.net.Uri,long)> (1)
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> (1)
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> (2)
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> (40)
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)> ()
<com.android.deskclock.Alarms: void saveNextAlarm(android.content.Context,java.lang.String)> (2)
<com.android.music.MusicUtils: void setRingtone(android.content.Context,long)> (3)
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (2)
<com.android.settings.DateTimeSettings: void set24Hour(boolean)> (2)
<com.android.settings.DateTimeSettings: void setDateFormat(java.lang.String)> (1)
<com.android.settings.wifi.AdvancedSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.AdvancedSettings: void updateSettingsProvider()> (2)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri endFile(android.media.MediaScanner$FileCacheEntry,boolean,boolean,boolean,boolean,boolean)> (1)
<com.android.settings.DefaultRingtonePreference: void onSaveRingtone(android.net.Uri)> (1)
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)> (2)
<android.media.AudioService$AudioHandler: void persistRingerMode()> (1)
<android.media.AudioService$AudioHandler: void persistVibrateSetting()> (1)
<android.media.AudioService$AudioHandler: void persistVolume(android.media.AudioService$VolumeStreamState,boolean,boolean)> (1)
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> (1)
<com.android.contacts.ui.ContactsPreferences: void setDisplayOrder(int)> (1)
<com.android.contacts.ui.ContactsPreferences: void setSortOrder(int)> (1)
<com.android.deskclock.SettingsActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.development.DevelopmentSettings$5: void onClick(android.view.View)> (1)
<com.android.development.DevelopmentSettings: void writeCompatibilityOptions()> (1)
<com.android.development.DevelopmentSettings: void writePointerLocationOptions()> (1)
<com.android.internal.policy.impl.GlobalActions: void changeAirplaneModeSystemSetting(boolean)> (1)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.EmergencyCallHandler: void onCreate(android.os.Bundle)> (1)
<com.android.quicksearchbox.SearchSettings: void setShowWebSuggestions(android.content.Context,boolean)> (1)
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> (1)
<com.android.server.PackageManagerService: boolean setInstallLocation(int)> (2)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeOn(boolean)> (2)
<com.android.settings.ApplicationSettings: void handleUpdateAppInstallLocation(java.lang.String)> (1)
<com.android.settings.BrightnessPreference: void onDialogClosed(boolean)> (1)
<com.android.settings.BrightnessPreference: void setMode(int)> (2)
<com.android.settings.DevelopmentSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DockSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.PhysicalKeyboardSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.RingerVolumePreference: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SoundSettings: void setPhoneVibrateSettingValue(java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleBrightness(android.content.Context)> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.spare_parts.SpareParts: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.spare_parts.SpareParts: void writeEndButtonPreference(java.lang.Object)> (1)
<com.android.deskclock.Alarms: void disableAlert(android.content.Context)> (1)
<com.android.deskclock.Alarms: void enableAlert(android.content.Context,com.android.deskclock.Alarm,long)> (2)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.QueryBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<android.app.ActivityManagerNative: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettingsSetupWizard: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.settings.DateTimeSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.DateTimeSettingsSetupWizard: void set24Hour(boolean)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void setDateFormat(java.lang.String)> (1)
<com.android.settings.wifi.AdvancedSettings: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.settings.wifi.AdvancedSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri doScanFile(java.lang.String,java.lang.String,long,long,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.HistoryRecord)> (5)
<com.android.development.DevelopmentSettings: void writeXmppOptions()> (1)
<com.android.contacts.ui.ContactsPreferencesActivity: void doSaveAction()> (2)
<com.android.development.DevelopmentSettings: void access$700(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void access$1700(com.android.development.DevelopmentSettings)> (1)
<com.android.internal.policy.impl.GlobalActions: void access$300(com.android.internal.policy.impl.GlobalActions,boolean)> (2)
<com.android.phone.CallFeaturesSetting: void onCreate(android.os.Bundle)> (2)
<com.android.quicksearchbox.google.GoogleSettings: void storeShowWebSuggestionsPreference()> (1)
<android.app.ActivityManagerNative: void setAlwaysFinish(boolean)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)> ()
<android.content.pm.IPackageManager$Stub: boolean setInstallLocation(int)> (2)
<com.android.settings.AirplaneModeEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeInECM(boolean,boolean)> (1)
<com.android.settings.ApplicationSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.BrightnessPreference: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.deskclock.Alarms: void setNextAlert(android.content.Context)> (7)
<com.android.deskclock.Alarms: boolean enableSnoozeAlert(android.content.Context)> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettingsSetupWizard: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<android.media.MediaScanner: android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void scanFile(java.lang.String,java.lang.String,long,long)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void scanFile(java.lang.String,long,long)> (1)
<com.android.development.DevelopmentSettings: void access$1400(com.android.development.DevelopmentSettings)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity: void onBackPressed()> (2)
<com.android.contacts.ui.ContactsPreferencesActivity: void onClick(android.view.View)> (1)
<com.android.development.DevelopmentSettings$4: void onClick(android.view.View)> (1)
<com.android.development.DevelopmentSettings$8: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onToggle(boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.quicksearchbox.google.GoogleSettings: boolean onPreferenceClick(android.preference.Preference)> (1)
<android.app.IActivityManager: void setAlwaysFinish(boolean)> (1)
<android.content.pm.IPackageManager: boolean setInstallLocation(int)> (1)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.WirelessSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.deskclock.AlarmInitReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.Alarms: long addAlarm(android.content.Context,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.Alarms: long setAlarm(android.content.Context,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.Alarms: void deleteAlarm(android.content.Context,int)> (3)
<com.android.deskclock.Alarms: void enableAlarm(android.content.Context,int,boolean)> (3)
<com.android.deskclock.Alarms: void saveSnoozeAlert(android.content.Context,int,long)> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.AppPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.development.DevelopmentSettings: void writeDebugOptions()> (2)
<com.android.providers.media.MediaScannerService: android.net.Uri scanFile(java.lang.String,java.lang.String)> (1)
<android.media.MediaScannerClient: void scanFile(java.lang.String,java.lang.String,long,long)> ()
<android.media.MediaScannerClient: void scanFile(java.lang.String,long,long)> ()
<com.android.development.DevelopmentSettings$7: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onToggle(boolean)> (1)
<com.android.development.DevelopmentSettings: void writeFinishOptions()> (1)
<com.android.commands.pm.Pm: void runSetInstallLocation()> (1)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.deskclock.SetAlarm: long saveAlarm()> (3)
<com.android.deskclock.AlarmClock$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm$4: void onClick(android.view.View)> (1)
<com.android.deskclock.SetAlarm$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.AlarmClock: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.deskclock.AlarmClock: void updateIndicatorAndAlarm(boolean,android.widget.ImageView,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze()> (3)
<com.android.development.DevelopmentSettings: void access$100(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.providers.media.MediaScannerService: android.net.Uri access$100(com.android.providers.media.MediaScannerService,java.lang.String,java.lang.String)> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onPress()> (3)
<com.android.development.DevelopmentSettings: void access$400(com.android.development.DevelopmentSettings)> (1)
<com.android.commands.pm.Pm: void run(java.lang.String[])> (1)
<com.android.deskclock.SetAlarm: long access$500(com.android.deskclock.SetAlarm)> (2)
<com.android.deskclock.SetAlarm: long saveAlarmAndEnableRevert()> (2)
<com.android.deskclock.SetAlarm: void onBackPressed()> (3)
<com.android.deskclock.AlarmClock: void access$100(com.android.deskclock.AlarmClock,boolean,android.widget.ImageView,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (3)
<com.android.deskclock.AlarmAlert: void snooze()> (1)
<com.android.development.DevelopmentSettings$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.GlobalActions$1: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.development.DevelopmentSettings$3: void onClick(android.view.View)> (1)
<com.android.commands.pm.Pm: void main(java.lang.String[])> ()
<com.android.deskclock.SetAlarm$3: void onClick(android.view.View)> (1)
<com.android.deskclock.SetAlarm: long access$1000(com.android.deskclock.SetAlarm)> (1)
<com.android.deskclock.SetAlarm: void onTimeSet(android.widget.TimePicker,int,int)> (1)
<com.android.deskclock.AlarmClock$AlarmTimeAdapter$1: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlertFullScreen$2: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm$6: void run()> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearShortcut(char)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (11)
<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)> (1)
<android.net.wifi.WifiStateTracker$SettingsObserver: void <init>(android.net.wifi.WifiStateTracker,android.os.Handler)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar)> (1)
<android.widget.DateTimeView: void registerReceivers()> (1)
<com.android.contacts.ui.ContactsPreferences$SettingsObserver: void register()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.quicksearchbox.SearchSettings: void registerShowWebSuggestionsSettingObserver(android.content.Context,android.database.ContentObserver)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (2)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<com.android.contacts.ui.ContactsPreferences: void <init>(android.content.Context)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.settings.RingerVolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.contacts.ContactsListActivity: void onCreate(android.os.Bundle)> (4)
<com.android.contacts.ui.ContactsPreferencesActivity: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.SearchResultsActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> (24)
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> ()
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)> (44)
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)> (1)
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> (3)
<com.android.server.AccessibilityManagerService$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)> (2)
<com.android.server.InputMethodManagerService: boolean chooseNewDefaultIMELocked()> (2)
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> (3)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService: void setCurRecognizer(android.content.ComponentName)> (2)
<com.android.server.WifiService: void persistApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<com.android.settings.AccessibilitySettings: void persistEnabledAccessibilityServices()> (3)
<com.android.settings.LanguageSettings: void onPause()> (3)
<com.android.settings.ProxySelector: boolean saveToDb()> (1)
<com.android.settings.TextToSpeechSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TextToSpeechSettings: void initDefaultSettings()> (1)
<com.android.settings.TextToSpeechSettings: void loadEngines()> (3)
<com.android.settings.TextToSpeechSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TextToSpeechSettings: void useCurrentLocAsDefault()> (1)
<com.android.settings.TextToSpeechSettings: void useSupportedLocAsDefault()> (1)
<com.android.settings.VoiceInputOutputSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.server.BluetoothA2dpService: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (4)
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (4)
<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)> (6)
<com.android.phone.BluetoothHeadsetService$HeadsetPriority: void set(android.bluetooth.BluetoothDevice,int)> (5)
<com.android.phone.CallFeaturesSetting: void handleTTYChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void handleQueryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void handleSetCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void resetCdmaRoamingModeToDefault()> (1)
<com.android.phone.CdmaRoamingListPreference: void onDialogClosed(boolean)> (2)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleGetVPResponse(android.os.Message)> (1)
<com.android.phone.CellBroadcastSms: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.Settings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.Settings$MyHandler: void handleGetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void resetNetworkModeToDefault()> (1)
<com.android.provision.DefaultActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.BackupManagerService: void setAutoRestore(boolean)> (2)
<com.android.server.BackupManagerService: void setBackupEnabled(boolean)> (3)
<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)> (2)
<com.android.server.ConnectivityService: void persistNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void setBackgroundDataSetting(boolean)> (2)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.WifiService: boolean getPersistedWifiEnabled()> (2)
<com.android.server.WifiService: boolean setNumAllowedChannelsBlocking(int,boolean)> (1)
<com.android.server.WifiService: boolean testAndClearWifiSavedState()> (2)
<com.android.server.WifiService: void persistWifiEnabled(boolean)> (2)
<com.android.settings.AccessibilitySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AccessibilitySettings: void handleEnableAccessibilityStateChange(android.preference.CheckBoxPreference)> (1)
<com.android.settings.AccessibilitySettings: void onResume()> (3)
<com.android.settings.ApplicationSettings: void setNonMarketAppsAllowed(boolean)> (2)
<com.android.settings.DevelopmentSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)> (6)
<com.android.providers.settings.SettingsHelper: void setGpsLocation(java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleGps(android.content.Context)> (1)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (5)
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: java.lang.String selectBackupTransport(java.lang.String)> (2)
<com.android.server.InputMethodManagerService: boolean access$000(com.android.server.InputMethodManagerService)> (2)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap)> (2)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService: void systemReady()> (1)
<com.android.server.WifiService: boolean setWifiApEnabledBlocking(boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.settings.AccessibilitySettings: void access$100(com.android.settings.AccessibilitySettings)> (1)
<com.android.settings.AccessibilitySettings: void handleEnableAccessibilityServiceStateChange(android.preference.CheckBoxPreference)> (1)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.ProxySelector$1: void onClick(android.view.View)> (1)
<com.android.settings.TextToSpeechSettings: void onInit(int)> (1)
<com.android.settings.TextToSpeechSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TextToSpeechSettings: void access$000(com.android.settings.TextToSpeechSettings)> (1)
<com.android.settings.TextToSpeechSettings: void initDefaultLang()> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void setBoolean(java.lang.String,boolean)> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)> (5)
<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)> (5)
<com.android.internal.widget.LockPatternUtils: void setPermanentlyLocked(boolean)> (2)
<com.android.internal.widget.LockPatternUtils: void setTactileFeedbackEnabled(boolean)> (3)
<com.android.internal.widget.LockPatternUtils: void setVisiblePatternEnabled(boolean)> (3)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.phone.BluetoothHeadsetService$HeadsetPriority: void bump(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$HeadsetPriority: void rebalance()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(int,int,int)> (4)
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setAutoRestore(boolean)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setBackupEnabled(boolean)> (2)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setBackupProvisioned(boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setBackgroundDataSetting(boolean)> ()
<android.net.IConnectivityManager$Stub: void setBackgroundDataSetting(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<com.android.server.WifiService: void doUpdateWifiState()> (1)
<com.android.server.WifiService: void startWifi()> (1)
<com.android.server.WifiService: boolean access$2200(com.android.server.WifiService,int,boolean)> (1)
<com.android.server.WifiService: boolean access$300(com.android.server.WifiService)> (1)
<com.android.server.WifiService: boolean setWifiEnabledBlocking(boolean,boolean,int)> (1)
<com.android.server.WifiService: void access$400(com.android.server.WifiService,boolean)> (1)
<com.android.settings.ApplicationSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ApplicationSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void setLong(java.lang.String,long)> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt()> (2)
<com.android.internal.widget.LockPatternUtils: long setLockoutAttemptDeadline()> (4)
<com.android.internal.widget.LockPatternUtils: void clearLock()> (3)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> (4)
<com.android.providers.settings.SettingsHelper: boolean restoreValue(java.lang.String,java.lang.String)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (8)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.app.backup.IBackupManager: java.lang.String selectBackupTransport(java.lang.String)> (1)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WifiService: boolean access$2100(com.android.server.WifiService,boolean,int,android.net.wifi.WifiConfiguration)> (1)
<com.android.settings.AccessibilitySettings$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.TextToSpeechSettings$3: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetoothA2dp: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean connectSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$500(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void saveLockPattern(java.util.List)> (1)
<com.android.providers.settings.DatabaseHelper: void upgradeLockPatternLocation(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.settings.ChooseLockPattern: void saveChosenPatternAndFinish()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuGoesToLockScreenWhenDeviceNotSecure()> ()
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void reportFailedUnlockAttempt()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void setTactileFeedbackEnabled(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void setVisiblePatternEnabled(boolean)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.phone.BluetoothHeadsetService: void access$1900(com.android.phone.BluetoothHeadsetService,int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect()> (2)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(int,int)> (2)
<android.app.backup.IBackupManager: void setAutoRestore(boolean)> (2)
<android.app.backup.IBackupManager: void setBackupEnabled(boolean)> (2)
<android.app.backup.IBackupManager: void setBackupProvisioned(boolean)> ()
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void setBackgroundDataSetting(boolean)> (1)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<com.android.server.WifiService: void access$1900(com.android.server.WifiService)> (1)
<com.android.server.WifiService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiService: boolean access$1600(com.android.server.WifiService,boolean,boolean,int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: java.lang.String getSalt()> (1)
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: long setLockoutAttemptDeadline()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.settings.ConfirmLockPattern$2: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void clearLock()> (1)
<com.android.settings.ChooseLockGeneric: void updateUnlockMethodAndFinish(int)> (2)
<com.android.settings.ChooseLockPassword: void handleNext()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: void saveLockPassword(java.lang.String,int)> (1)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings(android.app.backup.BackupDataInput,android.net.Uri)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.AccessibilityManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.commands.bmgr.Bmgr: void doTransport()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<com.android.providers.settings.DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.settings.ChooseLockPattern: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void reportFailedUnlockAttempt()> (3)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService$6: void disconnectHeadset()> (2)
<com.android.phone.BluetoothHeadsetService: boolean doNextAutoConnect()> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService)> (3)
<com.android.phone.BluetoothHeadsetService: void access$1200(com.android.phone.BluetoothHeadsetService,int,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int)> (2)
<com.android.providers.settings.SettingsHelper: void setAutoRestore(boolean)> (1)
<com.android.settings.PrivacySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.commands.bmgr.Bmgr: void doEnable()> (1)
<com.android.settings.PrivacySettings: void setBackupEnabled(boolean)> (2)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> (2)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: byte[] passwordToHash(java.lang.String)> (1)
<com.android.internal.widget.LockPatternUtils: boolean checkPassword(java.lang.String)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.settings.ChooseLockGeneric: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ChooseLockGeneric: void updatePreferencesOrFinish()> (2)
<com.android.settings.ChooseLockPassword: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ChooseLockPassword: void onClick(android.view.View)> (1)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.bluetooth.IBluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void disconnectHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: void disconnectHeadset()> (3)
<com.android.phone.BluetoothHeadsetService: boolean access$2400(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$600(com.android.phone.BluetoothHeadsetService,int)> (2)
<com.android.settings.PrivacySettings: void onClick(android.content.DialogInterface,int)> (1)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.settings.ManageAccountsSettings: void setBackgroundDataInt(boolean)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleSync(android.content.Context)> (1)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockLockPatternUtils: boolean checkPassword(java.lang.String)> (1)
<com.android.settings.ConfirmLockPassword: void handleNext()> (2)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.settings.ChooseLockGeneric: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.ChooseLockGeneric: void onCreate(android.os.Bundle)> (2)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<android.bluetooth.BluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.bluetooth.IBluetoothHeadset: void disconnectHeadset()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadset(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ManageAccountsSettings: void access$000(com.android.settings.ManageAccountsSettings,boolean)> (1)
<com.android.settings.ConfirmLockPassword: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ConfirmLockPassword: void onClick(android.view.View)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean disconnectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAllProfiles()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onProfileCheckedStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,boolean)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadset()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void autoConnectHeadset()> (1)
<com.android.settings.ManageAccountsSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean processCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer()> (2)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void access$2200(com.android.phone.BluetoothHeadsetService)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void processCommands()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$000(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean connectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void queueCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (6)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBondingStateChanged(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onContextItemSelected(android.view.MenuItem)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setOnlineMode(boolean,boolean)> (2)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onProfileStateChanged(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnectConnected(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothEventRedirector$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onOnlineModeCheckedStateChanged(boolean)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refresh()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (6)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onResume()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void askDisconnect()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceAppeared(android.bluetooth.BluetoothDevice,short,android.bluetooth.BluetoothClass,java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceDisappeared(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void syncBluetoothState()> (2)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: int getBluetoothState()> (8)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onCreateContextMenu(android.view.ContextMenu)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
Permission:android.permission.PERSISTENT_ACTIVITY
319 Callers:
<com.android.server.am.ActivityManagerService: void setPersistent(android.os.IBinder,boolean)> (1)
<android.app.ActivityManagerNative: void setPersistent(android.os.IBinder,boolean)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setPersistent(android.os.IBinder,boolean)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.Activity: void setPersistent(boolean)> (313)
<android.accounts.AccountAuthenticatorActivity: void setPersistent(boolean)> (1)
<android.accounts.ChooseAccountActivity: void setPersistent(boolean)> (2)
<android.accounts.GrantCredentialsPermissionActivity: void setPersistent(boolean)> (1)
<android.app.ActivityGroup: void setPersistent(boolean)> (1)
<android.app.AliasActivity: void setPersistent(boolean)> (1)
<android.app.ExpandableListActivity: void setPersistent(boolean)> (1)
<android.app.LauncherActivity: void setPersistent(boolean)> (2)
<android.app.ListActivity: void setPersistent(boolean)> (1)
<android.app.TabActivity: void setPersistent(boolean)> (2)
<android.preference.PreferenceActivity: void setPersistent(boolean)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setPersistent(boolean)> (3)
<android.test.ActivityUnitTestCase$MockParent: void setPersistent(boolean)> (1)
<android.test.TestBrowserActivity: void setPersistent(boolean)> (2)
<android.test.TestListActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setPersistent(boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setPersistent(boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setPersistent(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setPersistent(boolean)> (1)
<com.android.bluetooth.opp.TestActivity: void setPersistent(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setPersistent(boolean)> (2)
<com.android.browser.AddBookmarkPage: void setPersistent(boolean)> (1)
<com.android.browser.BookmarkSearch: void setPersistent(boolean)> (1)
<com.android.browser.BrowserActivity: void setPersistent(boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void setPersistent(boolean)> (1)
<com.android.browser.BrowserDownloadPage: void setPersistent(boolean)> (2)
<com.android.browser.BrowserHistoryPage: void setPersistent(boolean)> (2)
<com.android.browser.BrowserPreferencesPage: void setPersistent(boolean)> (3)
<com.android.browser.CombinedBookmarkHistoryActivity: void setPersistent(boolean)> (3)
<com.android.browser.WebsiteSettingsActivity: void setPersistent(boolean)> (2)
<com.android.calculator2.Calculator: void setPersistent(boolean)> (1)
<com.android.calendar.AgendaActivity: void setPersistent(boolean)> (1)
<com.android.calendar.AlertActivity: void setPersistent(boolean)> (1)
<com.android.calendar.CalendarActivity: void setPersistent(boolean)> (1)
<com.android.calendar.CalendarPreferenceActivity: void setPersistent(boolean)> (3)
<com.android.calendar.DayActivity: void setPersistent(boolean)> (2)
<com.android.calendar.EditEvent: void setPersistent(boolean)> (1)
<com.android.calendar.EventInfoActivity: void setPersistent(boolean)> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setPersistent(boolean)> (1)
<com.android.calendar.LaunchActivity: void setPersistent(boolean)> (1)
<com.android.calendar.MonthActivity: void setPersistent(boolean)> (1)
<com.android.calendar.SelectCalendarsActivity: void setPersistent(boolean)> (2)
<com.android.calendar.WeekActivity: void setPersistent(boolean)> (2)
<com.android.camera.Camera: void setPersistent(boolean)> (2)
<com.android.camera.NoSearchActivity: void setPersistent(boolean)> (1)
<com.android.camera.VideoCamera: void setPersistent(boolean)> (2)
<com.android.certinstaller.CertFileList: void setPersistent(boolean)> (4)
<com.android.certinstaller.CertFile: void setPersistent(boolean)> (3)
<com.android.certinstaller.CertInstallerMain: void setPersistent(boolean)> (4)
<com.android.certinstaller.CertInstaller: void setPersistent(boolean)> (1)
<com.android.contacts.AttachImage: void setPersistent(boolean)> (1)
<com.android.contacts.CallDetailActivity: void setPersistent(boolean)> (2)
<com.android.contacts.ContactOptionsActivity: void setPersistent(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void setPersistent(boolean)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void setPersistent(boolean)> (3)
<com.android.contacts.ContactsListActivity: void setPersistent(boolean)> (2)
<com.android.contacts.ContactsLiveFolders$AllContacts: void setPersistent(boolean)> (1)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void setPersistent(boolean)> (1)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void setPersistent(boolean)> (1)
<com.android.contacts.DialtactsActivity: void setPersistent(boolean)> (3)
<com.android.contacts.ExportVCardActivity: void setPersistent(boolean)> (1)
<com.android.contacts.ImportVCardActivity: void setPersistent(boolean)> (1)
<com.android.contacts.RecentCallsListActivity: void setPersistent(boolean)> (2)
<com.android.contacts.SearchResultsActivity: void setPersistent(boolean)> (3)
<com.android.contacts.TwelveKeyDialer: void setPersistent(boolean)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity: void setPersistent(boolean)> (2)
<com.android.contacts.ui.EditContactActivity: void setPersistent(boolean)> (1)
<com.android.contacts.ui.QuickContactActivity: void setPersistent(boolean)> (1)
<com.android.contacts.ui.ShowOrCreateActivity: void setPersistent(boolean)> (1)
<com.android.contacts.ViewContactActivity: void setPersistent(boolean)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void setPersistent(boolean)> (1)
<com.android.deskclock.AlarmAlert: void setPersistent(boolean)> (2)
<com.android.deskclock.AlarmClock: void setPersistent(boolean)> (1)
<com.android.deskclock.DeskClock: void setPersistent(boolean)> (1)
<com.android.deskclock.SetAlarm: void setPersistent(boolean)> (3)
<com.android.deskclock.SettingsActivity: void setPersistent(boolean)> (3)
<com.android.development.AccountsTester: void setPersistent(boolean)> (1)
<com.android.development.AppHwConfigList: void setPersistent(boolean)> (2)
<com.android.development.AppHwPref: void setPersistent(boolean)> (1)
<com.android.development.AppPicker: void setPersistent(boolean)> (2)
<com.android.development.BadBehaviorActivity: void setPersistent(boolean)> (1)
<com.android.development.Connectivity: void setPersistent(boolean)> (1)
<com.android.development.DataList: void setPersistent(boolean)> (2)
<com.android.development.Details: void setPersistent(boolean)> (1)
<com.android.development.DevelopmentSettings: void setPersistent(boolean)> (1)
<com.android.development.Development: void setPersistent(boolean)> (3)
<com.android.development.EnterURL: void setPersistent(boolean)> (2)
<com.android.development.InstrumentationList: void setPersistent(boolean)> (2)
<com.android.development.LogViewer: void setPersistent(boolean)> (1)
<com.android.development.MediaScannerActivity: void setPersistent(boolean)> (1)
<com.android.development.PackageBrowser: void setPersistent(boolean)> (2)
<com.android.development.PackageSummary: void setPersistent(boolean)> (1)
<com.android.development.PermissionDetails: void setPersistent(boolean)> (1)
<com.android.development.PointerLocation: void setPersistent(boolean)> (1)
<com.android.development.ProcessInfo: void setPersistent(boolean)> (1)
<com.android.development.RunningProcesses: void setPersistent(boolean)> (2)
<com.android.development.ShowActivity: void setPersistent(boolean)> (1)
<com.android.development.SyncAdapterDriver: void setPersistent(boolean)> (1)
<com.android.development.UnderdevelopedSettings: void setPersistent(boolean)> (3)
<com.android.email.activity.AccountFolderList: void setPersistent(boolean)> (2)
<com.android.email.activity.AccountShortcutPicker: void setPersistent(boolean)> (2)
<com.android.email.activity.Debug: void setPersistent(boolean)> (1)
<com.android.email.activity.FolderMessageList: void setPersistent(boolean)> (1)
<com.android.email.activity.MailboxList: void setPersistent(boolean)> (2)
<com.android.email.activity.MessageCompose: void setPersistent(boolean)> (1)
<com.android.email.activity.MessageList: void setPersistent(boolean)> (2)
<com.android.email.activity.MessageView: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSecurity: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSettings: void setPersistent(boolean)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupBasics: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupCheckSettings: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupExchange: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupIncoming: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupNames: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupOptions: void setPersistent(boolean)> (1)
<com.android.email.activity.setup.AccountSetupOutgoing: void setPersistent(boolean)> (1)
<com.android.email.activity.UpgradeAccounts: void setPersistent(boolean)> (2)
<com.android.email.activity.Welcome: void setPersistent(boolean)> (1)
<com.android.htmlviewer.HTMLViewerActivity: void setPersistent(boolean)> (1)
<com.android.inputmethod.latin.InputLanguageSelection: void setPersistent(boolean)> (3)
<com.android.inputmethod.latin.LatinIMESettings: void setPersistent(boolean)> (3)
<com.android.inputmethod.voice.LatinIMEWithVoiceSettings: void setPersistent(boolean)> (4)
<com.android.internal.app.AlertActivity: void setPersistent(boolean)> (1)
<com.android.internal.app.ChooserActivity: void setPersistent(boolean)> (3)
<com.android.internal.app.DisableCarModeActivity: void setPersistent(boolean)> (1)
<com.android.internal.app.ExternalMediaFormatActivity: void setPersistent(boolean)> (2)
<com.android.internal.app.NetInitiatedActivity: void setPersistent(boolean)> (2)
<com.android.internal.app.ResolverActivity: void setPersistent(boolean)> (2)
<com.android.internal.app.RingtonePickerActivity: void setPersistent(boolean)> (2)
<com.android.launcher2.Launcher: void setPersistent(boolean)> (1)
<com.android.launcher2.WallpaperChooser: void setPersistent(boolean)> (1)
<com.android.mms.ui.ClassZeroActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.ConfirmRateLimitActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.ConversationList: void setPersistent(boolean)> (2)
<com.android.mms.ui.DeliveryReportActivity: void setPersistent(boolean)> (2)
<com.android.mms.ui.EditSlideDurationActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void setPersistent(boolean)> (1)
<com.android.mms.ui.MessagingPreferenceActivity: void setPersistent(boolean)> (3)
<com.android.mms.ui.SearchActivity: void setPersistent(boolean)> (2)
<com.android.mms.ui.SlideEditorActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.SlideshowActivity: void setPersistent(boolean)> (1)
<com.android.mms.ui.SlideshowEditActivity: void setPersistent(boolean)> (2)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void setPersistent(boolean)> (1)
<com.android.music.AlbumBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.ArtistAlbumBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.CreatePlaylist: void setPersistent(boolean)> (1)
<com.android.music.DeleteItems: void setPersistent(boolean)> (1)
<com.android.music.MediaPickerActivity: void setPersistent(boolean)> (2)
<com.android.music.MediaPlaybackActivity: void setPersistent(boolean)> (1)
<com.android.music.MusicBrowserActivity: void setPersistent(boolean)> (1)
<com.android.music.MusicPicker: void setPersistent(boolean)> (2)
<com.android.music.PlaylistBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.QueryBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.RenamePlaylist: void setPersistent(boolean)> (1)
<com.android.music.ScanningProgress: void setPersistent(boolean)> (1)
<com.android.music.StreamStarter: void setPersistent(boolean)> (1)
<com.android.music.TrackBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.VideoBrowserActivity: void setPersistent(boolean)> (2)
<com.android.music.WeekSelector: void setPersistent(boolean)> (1)
<com.android.packageinstaller.InstallAppProgress: void setPersistent(boolean)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void setPersistent(boolean)> (1)
<com.android.packageinstaller.UninstallAppProgress: void setPersistent(boolean)> (1)
<com.android.packageinstaller.UninstallerActivity: void setPersistent(boolean)> (1)
<com.android.phone.ADNList: void setPersistent(boolean)> (2)
<com.android.phone.CallFeaturesSetting: void setPersistent(boolean)> (3)
<com.android.phone.CdmaCallOptions: void setPersistent(boolean)> (3)
<com.android.phone.CdmaOptions: void setPersistent(boolean)> (3)
<com.android.phone.CellBroadcastSms: void setPersistent(boolean)> (3)
<com.android.phone.ChangeIccPinScreen: void setPersistent(boolean)> (1)
<com.android.phone.DataUsage: void setPersistent(boolean)> (3)
<com.android.phone.DeleteFdnContactScreen: void setPersistent(boolean)> (1)
<com.android.phone.EditFdnContactScreen: void setPersistent(boolean)> (1)
<com.android.phone.EmergencyCallbackModeExitDialog: void setPersistent(boolean)> (1)
<com.android.phone.EmergencyCallHandler: void setPersistent(boolean)> (1)
<com.android.phone.EmergencyDialer: void setPersistent(boolean)> (1)
<com.android.phone.EnableFdnScreen: void setPersistent(boolean)> (1)
<com.android.phone.EnableIccPinScreen: void setPersistent(boolean)> (1)
<com.android.phone.FakePhoneActivity: void setPersistent(boolean)> (1)
<com.android.phone.FdnList: void setPersistent(boolean)> (3)
<com.android.phone.FdnSetting: void setPersistent(boolean)> (3)
<com.android.phone.GetPin2Screen: void setPersistent(boolean)> (1)
<com.android.phone.GsmUmtsAdditionalCallOptions: void setPersistent(boolean)> (4)
<com.android.phone.GsmUmtsCallForwardOptions: void setPersistent(boolean)> (4)
<com.android.phone.GsmUmtsCallOptions: void setPersistent(boolean)> (3)
<com.android.phone.GsmUmtsOptions: void setPersistent(boolean)> (3)
<com.android.phone.InCallScreenShowActivation: void setPersistent(boolean)> (1)
<com.android.phone.InCallScreen: void setPersistent(boolean)> (1)
<com.android.phone.NetworkSetting: void setPersistent(boolean)> (3)
<com.android.phone.OutgoingCallBroadcaster: void setPersistent(boolean)> (1)
<com.android.phone.Settings: void setPersistent(boolean)> (3)
<com.android.phone.SimContacts: void setPersistent(boolean)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void setPersistent(boolean)> (3)
<com.android.providers.applications.ApplicationLauncher: void setPersistent(boolean)> (2)
<com.android.providers.calendar.CalendarDebug: void setPersistent(boolean)> (2)
<com.android.provision.DefaultActivity: void setPersistent(boolean)> (1)
<com.android.quicksearchbox.ChoiceActivity: void setPersistent(boolean)> (1)
<com.android.quicksearchbox.google.GoogleSearch: void setPersistent(boolean)> (1)
<com.android.quicksearchbox.google.GoogleSettings: void setPersistent(boolean)> (3)
<com.android.quicksearchbox.SearchableItemsSettings: void setPersistent(boolean)> (3)
<com.android.quicksearchbox.SearchActivity: void setPersistent(boolean)> (1)
<com.android.quicksearchbox.SearchSettings: void setPersistent(boolean)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void setPersistent(boolean)> (2)
<com.android.server.ShutdownActivity: void setPersistent(boolean)> (1)
<com.android.server.status.UsbStorageActivity: void setPersistent(boolean)> (1)
<com.android.settings.AccessibilitySettings: void setPersistent(boolean)> (3)
<com.android.settings.AccountPreferenceBase: void setPersistent(boolean)> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void setPersistent(boolean)> (5)
<com.android.settings.AccountSyncSettings: void setPersistent(boolean)> (4)
<com.android.settings.ActivityPicker: void setPersistent(boolean)> (2)
<com.android.settings.AddAccountSettings: void setPersistent(boolean)> (4)
<com.android.settings.ApnEditor: void setPersistent(boolean)> (3)
<com.android.settings.ApnSettings: void setPersistent(boolean)> (3)
<com.android.settings.ApplicationSettings: void setPersistent(boolean)> (3)
<com.android.settings.AppWidgetPickActivity: void setPersistent(boolean)> (3)
<com.android.settings.BandMode: void setPersistent(boolean)> (1)
<com.android.settings.battery_history.BatteryHistory: void setPersistent(boolean)> (1)
<com.android.settings.BatteryInfo: void setPersistent(boolean)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void setPersistent(boolean)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void setPersistent(boolean)> (3)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setPersistent(boolean)> (3)
<com.android.settings.bluetooth.RequestPermissionActivity: void setPersistent(boolean)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void setPersistent(boolean)> (2)
<com.android.settings.ChooseLockGeneric: void setPersistent(boolean)> (3)
<com.android.settings.ChooseLockPassword: void setPersistent(boolean)> (1)
<com.android.settings.ChooseLockPatternExample: void setPersistent(boolean)> (1)
<com.android.settings.ChooseLockPatternTutorial: void setPersistent(boolean)> (1)
<com.android.settings.ChooseLockPattern: void setPersistent(boolean)> (1)
<com.android.settings.ConfirmLockPassword: void setPersistent(boolean)> (1)
<com.android.settings.ConfirmLockPattern: void setPersistent(boolean)> (1)
<com.android.settings.CreateShortcut: void setPersistent(boolean)> (3)
<com.android.settings.CredentialInstaller: void setPersistent(boolean)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void setPersistent(boolean)> (4)
<com.android.settings.DateTimeSettings: void setPersistent(boolean)> (3)
<com.android.settings.DebugIntentSender: void setPersistent(boolean)> (1)
<com.android.settings.DevelopmentSettings: void setPersistent(boolean)> (3)
<com.android.settings.DeviceAdminAdd: void setPersistent(boolean)> (1)
<com.android.settings.DeviceAdminSettings: void setPersistent(boolean)> (2)
<com.android.settings.deviceinfo.Memory: void setPersistent(boolean)> (3)
<com.android.settings.DeviceInfoSettings: void setPersistent(boolean)> (3)
<com.android.settings.deviceinfo.Status: void setPersistent(boolean)> (3)
<com.android.settings.DisplaySettings: void setPersistent(boolean)> (3)
<com.android.settings.Display: void setPersistent(boolean)> (1)
<com.android.settings.DockSettings: void setPersistent(boolean)> (3)
<com.android.settings.fuelgauge.PowerUsageDetail: void setPersistent(boolean)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void setPersistent(boolean)> (3)
<com.android.settings.IccLockSettings: void setPersistent(boolean)> (3)
<com.android.settings.InstalledAppDetails: void setPersistent(boolean)> (1)
<com.android.settings.LanguageSettings: void setPersistent(boolean)> (3)
<com.android.settings.LocalePickerInSetupWizard: void setPersistent(boolean)> (3)
<com.android.settings.LocalePicker: void setPersistent(boolean)> (2)
<com.android.settings.ManageAccountsSettings: void setPersistent(boolean)> (4)
<com.android.settings.ManageApplications: void setPersistent(boolean)> (3)
<com.android.settings.MasterClear: void setPersistent(boolean)> (1)
<com.android.settings.MediaFormat: void setPersistent(boolean)> (1)
<com.android.settings.PhysicalKeyboardSettings: void setPersistent(boolean)> (3)
<com.android.settings.PrivacySettings: void setPersistent(boolean)> (3)
<com.android.settings.ProxySelector: void setPersistent(boolean)> (1)
<com.android.settings.quicklaunch.BookmarkPicker: void setPersistent(boolean)> (2)
<com.android.settings.quicklaunch.QuickLaunchSettings: void setPersistent(boolean)> (3)
<com.android.settings.RadioInfo: void setPersistent(boolean)> (1)
<com.android.settings.RunningServices: void setPersistent(boolean)> (2)
<com.android.settings.SecuritySettings: void setPersistent(boolean)> (3)
<com.android.settings.SettingsLicenseActivity: void setPersistent(boolean)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void setPersistent(boolean)> (2)
<com.android.settings.Settings: void setPersistent(boolean)> (3)
<com.android.settings.SoundSettings: void setPersistent(boolean)> (3)
<com.android.settings.SyncActivityTooManyDeletes: void setPersistent(boolean)> (1)
<com.android.settings.TestingSettings: void setPersistent(boolean)> (3)
<com.android.settings.TetherSettings: void setPersistent(boolean)> (3)
<com.android.settings.TextToSpeechSettings: void setPersistent(boolean)> (3)
<com.android.settings.UsageStats: void setPersistent(boolean)> (1)
<com.android.settings.UserDictionarySettings: void setPersistent(boolean)> (2)
<com.android.settings.VoiceInputOutputSettings: void setPersistent(boolean)> (3)
<com.android.settings.vpn.VpnEditor: void setPersistent(boolean)> (3)
<com.android.settings.vpn.VpnSettings: void setPersistent(boolean)> (3)
<com.android.settings.vpn.VpnTypeSelection: void setPersistent(boolean)> (3)
<com.android.settings.wifi.AdvancedSettings: void setPersistent(boolean)> (3)
<com.android.settings.wifi.WifiAPITest: void setPersistent(boolean)> (3)
<com.android.settings.wifi.WifiApSettings: void setPersistent(boolean)> (3)
<com.android.settings.wifi.WifiConfigInfo: void setPersistent(boolean)> (1)
<com.android.settings.wifi.WifiInfo: void setPersistent(boolean)> (3)
<com.android.settings.wifi.WifiSettings: void setPersistent(boolean)> (3)
<com.android.settings.wifi.WifiStatusTest: void setPersistent(boolean)> (1)
<com.android.settings.WirelessSettings: void setPersistent(boolean)> (3)
<com.android.settings.ZoneList: void setPersistent(boolean)> (2)
<com.android.settings.ZonePicker: void setPersistent(boolean)> (2)
<com.android.soundrecorder.SoundRecorder: void setPersistent(boolean)> (1)
<com.android.spare_parts.SpareParts: void setPersistent(boolean)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void setPersistent(boolean)> (1)
<com.android.term.TermPreferences: void setPersistent(boolean)> (3)
<com.android.term.Term: void setPersistent(boolean)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void setPersistent(boolean)> (1)
<com.android.voicedialer.VoiceDialerActivity: void setPersistent(boolean)> (1)
<com.cooliris.media.ActiveWallpaper: void setPersistent(boolean)> (1)
<com.cooliris.media.CropImage: void setPersistent(boolean)> (2)
<com.cooliris.media.Gallery: void setPersistent(boolean)> (1)
<com.cooliris.media.MonitoredActivity: void setPersistent(boolean)> (1)
<com.cooliris.media.MovieView: void setPersistent(boolean)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void setPersistent(boolean)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void setPersistent(boolean)> (1)
<com.cooliris.media.Photographs: void setPersistent(boolean)> (1)
<com.cooliris.media.Wallpaper: void setPersistent(boolean)> (1)
<com.google.android.voicesearch.LatinIMEWithVoiceSettings: void setPersistent(boolean)> (4)
<com.svox.pico.CheckVoiceData: void setPersistent(boolean)> (1)
<com.svox.pico.DownloadVoiceData: void setPersistent(boolean)> (1)
<com.svox.pico.EngineSettings: void setPersistent(boolean)> (3)
<com.svox.pico.GetSampleText: void setPersistent(boolean)> (1)
<com.svox.pico.Pico: void setPersistent(boolean)> (1)
Permission:android.permission.READ_CALENDAR
178 Callers:
<com.android.providers.calendar.CalendarProvider2: void updateEventAttendeeStatus(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> (2)
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.exchange.SyncManager$CalendarObserver: void <init>(com.android.exchange.SyncManager,android.os.Handler,com.android.email.provider.EmailContent$Account)> (1)
<com.android.exchange.SyncManager: void registerCalendarObserver(com.android.email.provider.EmailContent$Account)> (1)
<com.android.exchange.SyncManager: long checkMailboxes()> (1)
<com.android.exchange.SyncManager: void run()> (1)
<com.android.calendar.EditEvent: void onCreate(android.os.Bundle)> (1)
<android.provider.Calendar$Calendars: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.util.List doInBackground(java.lang.Void[])> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.AlertActivity: void onResume()> (1)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (4)
<android.content.CursorEntityIterator: java.lang.Object next()> (5)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations: void updatedExtendedProperty(java.lang.String,java.lang.String,long)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOwner(long)> (1)
<com.android.calendar.EventInfoActivity: void createExceptionResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.calendar.EventInfoActivity: boolean saveResponse(android.content.ContentResolver)> (1)
<com.android.calendar.EventInfoActivity: void onPause()> (1)
<com.android.providers.calendar.CalendarAppWidgetService: android.database.Cursor getUpcomingInstancesCursor(android.content.ContentResolver,long,long)> (1)
<com.android.providers.calendar.CalendarAppWidgetService: void performUpdate(android.content.Context,int[],java.util.Set,long)> (1)
<com.android.providers.calendar.CalendarAppWidgetService: void run()> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> (1)
<com.android.calendar.AgendaWindowAdapter: void doQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.AgendaWindowAdapter: void access$1400(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean access$600(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,int)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.AgendaWindowAdapter: void refresh(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaListView: void goTo(android.text.format.Time,boolean)> (3)
<com.android.calendar.AgendaListView: void refresh(boolean)> (2)
<com.android.calendar.AgendaActivity: void goTo(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaActivity: void goToToday()> (1)
<com.android.calendar.AgendaActivity: void onResume()> (1)
<com.android.calendar.AgendaActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AgendaActivity$2: void onChange(boolean)> (1)
<com.android.calendar.AgendaActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.Navigator: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.Navigator: void goToToday()> (1)
<com.android.calendar.MonthView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.MenuHelper: boolean onOptionsItemSelected(android.app.Activity,android.view.MenuItem,com.android.calendar.Navigator)> (3)
<com.android.calendar.AgendaActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.CalendarActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.calendar.MonthActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.DayActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.WeekActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.calendar.EventInfoActivity: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.SyncManager$CalendarObserver$1: void run()> (1)
<com.android.calendar.SelectCalendarsActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int)> (3)
<com.android.calendar.AgendaListView: void deleteSelectedEvent()> (1)
<com.android.calendar.CalendarView: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.calendar.CalendarView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.calendar.WeekView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.calendar.EventInfoActivity: boolean isDuplicateName(java.lang.String)> (1)
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String,java.lang.String)> (1)
<com.android.calendar.Event: void loadEvents(android.content.Context,java.util.ArrayList,long,int,int,java.util.concurrent.atomic.AtomicInteger)> (1)
<com.android.calendar.EventLoader$LoadEventsRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoadRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoaderThread: void run()> (2)
<com.android.calendar.EventLoader: void startBackgroundThread()> (2)
<com.android.calendar.CalendarActivity: void onResume()> (3)
<com.android.calendar.MonthActivity: void onResume()> (1)
<com.android.calendar.DayActivity: void onResume()> (2)
<com.android.calendar.WeekActivity: void onResume()> (2)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (7)
<com.android.providers.calendar.CalendarProvider2: boolean fixAllDayTime(android.net.Uri,android.content.ContentValues)> (2)
<com.android.providers.calendar.CalendarProvider2: int deleteFromTable(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTable(java.lang.String,android.content.ContentValues,android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: void modifyCalendarSubscription(long,boolean)> (2)
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingCalendars(java.lang.String)> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.CalendarView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (3)
<com.android.calendar.CalendarView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.calendar.DayView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (1)
<com.android.calendar.WeekView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.WeekView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.email.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.email.provider.EmailContent$Account,java.lang.String)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.email.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.email.provider.EmailContent$Account)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<android.provider.Calendar$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int)> (1)
<com.android.calendar.EventLoader$LoadEventDaysRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<android.provider.Calendar$CalendarAlerts: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (4)
<android.provider.Calendar$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> (1)
<android.provider.Calendar$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> (1)
<android.provider.Calendar$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> (2)
<com.android.calendar.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.calendar.AlertService: void doTimeChanged()> (1)
<com.android.providers.calendar.CalendarProvider2: void rescheduleMissedAlarms()> (2)
<com.android.calendar.AlertActivity: void onStop()> (1)
<com.android.calendar.AlertService: void processMessage(android.os.Message)> (1)
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void doUpdateTimezoneDependentFields()> (1)
<com.android.providers.calendar.CalendarProvider2: void regenerateInstancesTable()> (1)
<com.android.providers.calendar.CalendarProvider2: void access$000(com.android.providers.calendar.CalendarProvider2,boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void access$200(com.android.providers.calendar.CalendarProvider2)> (1)
<com.android.providers.calendar.CalendarProvider2: void doProcessEventRawTimes(java.lang.String,java.lang.String)> (1)
<com.android.calendar.SelectCalendarsAdapter$RefreshCalendars: void run()> (2)
<com.android.calendar.SelectCalendarsAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> (2)
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox)> (1)
<com.android.calendar.AlertActivity$2: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void wipe()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void wipe()> (1)
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$700(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.AlertActivity: void access$700(com.android.calendar.AlertActivity)> (2)
<com.android.calendar.AlertActivity$3: void onClick(android.view.View)> (1)
<com.android.calendar.EditEvent: boolean save()> (3)
<com.android.calendar.EditEvent: boolean access$1500(com.android.calendar.EditEvent)> (1)
<com.android.calendar.EditEvent: void onBackPressed()> (1)
<com.android.calendar.EditEvent: void onClick(android.view.View)> (1)
<com.android.calendar.EditEvent$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.SelectCalendarsAdapter: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void onClick(android.view.View)> (1)
<com.android.calendar.AlertActivity: void dismissAlarm(long)> (1)
<com.android.calendar.AlertActivity: void access$400(com.android.calendar.AlertActivity,long)> (1)
<com.android.calendar.AlertActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.EventInfoActivity: void updateResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.calendar.EditEvent: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.DismissAllAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.EditEvent: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.DeleteEventHelper$1: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])> (1)
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)> ()
Permission:android.permission.PROCESS_OUTGOING_CALLS
1 Callers:
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.CHANGE_CONFIGURATION
40 Callers:
<com.android.server.am.ActivityManagerService: int startActivityMayWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.app.IActivityManager$WaitResult,android.content.res.Configuration)> (3)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (8)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void setSystemLocale(java.lang.String,java.lang.String)> (4)
<com.android.providers.settings.SettingsHelper: void setLocaleData(byte[])> (1)
<com.android.server.UiModeManagerService: void updateConfigurationLocked(boolean)> (2)
<com.android.server.WindowManagerService: void sendNewConfiguration()> (8)
<com.android.settings.Display: void onClick(android.view.View)> (1)
<com.android.settings.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.spare_parts.SpareParts: void writeFontSizePreference(java.lang.Object)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemLocale(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setSystemLocale(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.MccTable: void setLocaleFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (3)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.LocalePickerInSetupWizard: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (5)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.GET_PACKAGE_SIZE
19 Callers:
<com.android.server.PackageManagerService: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> ()
<android.content.pm.IPackageManager$Stub: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (1)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (1)
<android.content.pm.PackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (6)
<com.android.settings.InstalledAppDetails: void onResume()> (1)
<com.android.settings.InstalledAppDetails: void processClearMsg(android.os.Message)> (1)
<com.android.settings.InstalledAppDetails: void processMoveMsg(android.os.Message)> (1)
<com.android.settings.ManageApplications$PkgSizeObserver: void invokeGetSizeInfo(java.lang.String)> (1)
<com.android.settings.ManageApplications$SizeObserver: void invokeGetSize(java.lang.String,java.util.concurrent.CountDownLatch)> (1)
<com.android.settings.InstalledAppDetails: void access$000(com.android.settings.InstalledAppDetails,android.os.Message)> (1)
<com.android.settings.InstalledAppDetails: void access$500(com.android.settings.InstalledAppDetails,android.os.Message)> (1)
<com.android.settings.ManageApplications$TaskRunner: void run()> (2)
<com.android.settings.ManageApplications$TaskRunner: void <init>(com.android.settings.ManageApplications,java.util.List)> (1)
<com.android.settings.ManageApplications: void initComputeSizes()> (1)
<com.android.settings.ManageApplications: void access$2200(com.android.settings.ManageApplications)> (1)
Permission:android.permission.RECEIVE_SMS
167 Callers:
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf()> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getAllMessagesFromIcc()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.AUTHENTICATE_ACCOUNTS
46 Callers:
<android.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)> (7)
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
Permission:android.permission.SET_ALWAYS_FINISH
8 Callers:
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> (1)
<android.app.ActivityManagerNative: void setAlwaysFinish(boolean)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setAlwaysFinish(boolean)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.DevelopmentSettings: void writeFinishOptions()> (1)
<com.android.development.DevelopmentSettings: void access$400(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings$3: void onClick(android.view.View)> (1)
Permission:android.permission.DISABLE_KEYGUARD
17 Callers:
<com.android.server.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> ()
<android.view.IWindowManager$Stub: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void disableKeyguard(android.os.IBinder,java.lang.String)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()> ()
<com.android.server.WindowManagerService: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> ()
<android.view.IWindowManager$Stub: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager: void reenableKeyguard(android.os.IBinder)> (1)
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()> ()
<com.android.server.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
Permission:android.permission.CLEAR_APP_CACHE
19 Callers:
<com.android.server.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<android.content.pm.IPackageManager$Stub: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (1)
<com.android.server.DeviceStorageMonitorService: void clearCache()> (1)
<android.content.pm.PackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.PackageManagerService: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> ()
<android.content.pm.IPackageManager$Stub: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
<android.app.ContextImpl$ApplicationPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
<android.content.pm.PackageManager: void freeStorage(long,android.content.IntentSender)> ()
Permission:android.permission.ACCESS_NETWORK_STATE
929 Callers:
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listInterfaces()> (2)
<android.os.INetworkManagementService: java.lang.String[] listInterfaces()> (3)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean configureUsbIface(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: java.lang.String findActiveUpstreamIface()> (3)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean access$600(com.android.server.connectivity.Tethering,boolean)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: java.lang.String findActiveUpstreamIface()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: java.lang.String findActiveUpstreamIface()> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastError(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.HierarchicalState: void enter()> (11)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1000(com.android.server.connectivity.Tethering$TetherInterfaceSM,int)> (5)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastErrorAndTransitionToInitialState(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void completeConstruction()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void performTransitions()> (2)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.util.HierarchicalStateMachine: void start()> (7)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllPdpList()> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,com.android.server.ConnectivityService$1)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<com.android.server.ConnectivityService$ConnectivityThread: void run()> (2)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.server.ConnectivityService$ConnectivityThread: com.android.server.ConnectivityService getServiceInstance(android.content.Context)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean getIpForwardingEnabled()> ()
<android.os.INetworkManagementService$Stub: boolean getIpForwardingEnabled()> (2)
<android.os.INetworkManagementService: boolean getIpForwardingEnabled()> ()
<com.android.server.NetworkManagementService: boolean isTetheringStarted()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean isTetheringStarted()> ()
<android.os.INetworkManagementService$Stub: boolean isTetheringStarted()> (2)
<android.os.INetworkManagementService: boolean isTetheringStarted()> ()
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listTetheredInterfaces()> (2)
<android.os.INetworkManagementService: java.lang.String[] listTetheredInterfaces()> ()
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] getDnsForwarders()> (2)
<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()> ()
<com.android.server.NetworkManagementService: java.lang.String[] listTtys()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listTtys()> (2)
<android.os.INetworkManagementService: java.lang.String[] listTtys()> ()
<com.android.server.NetworkManagementService: boolean isUsbRNDISStarted()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean isUsbRNDISStarted()> ()
<android.os.INetworkManagementService$Stub: boolean isUsbRNDISStarted()> (2)
<android.os.INetworkManagementService: boolean isUsbRNDISStarted()> (1)
<com.android.server.connectivity.Tethering: boolean enableUsbRndis(boolean)> (1)
<com.android.server.connectivity.Tethering: boolean access$2200(com.android.server.connectivity.Tethering,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.internal.util.HierarchicalState: void exit()> (20)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDefaultState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void invokeExitMethods(com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NetworkManagementService: long getInterfaceCounter(java.lang.String,boolean)> (2)
<com.android.server.NetworkManagementService: long getInterfaceRxCounter(java.lang.String)> (2)
<com.android.server.NetworkManagementService: long getInterfaceTxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: long getInterfaceRxCounter(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: long getInterfaceRxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: long getInterfaceTxCounter(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: long getInterfaceTxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService: long getInterfaceRxCounter(java.lang.String)> (1)
<android.os.INetworkManagementService: long getInterfaceTxCounter(java.lang.String)> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.NetworkManagementService: int getInterfaceThrottle(java.lang.String,boolean)> (2)
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> (2)
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: int getInterfaceRxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: int getInterfaceTxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> ()
<com.android.server.ThrottleService: void enforceAccessPermission()> (7)
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)> (2)
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> (2)
<com.android.server.ThrottleService: java.lang.String getHelpUri()> (2)
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)> (2)
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)> (2)
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)> (3)
<com.android.server.ThrottleService: long getResetTime(java.lang.String)> (4)
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)> ()
<android.net.IThrottleManager$Stub: int getCliffLevel(java.lang.String,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)> ()
<android.net.IThrottleManager$Stub: int getThrottle(java.lang.String)> (2)
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()> ()
<android.net.IThrottleManager$Stub: java.lang.String getHelpUri()> (2)
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)> ()
<android.net.IThrottleManager$Stub: long getByteCount(java.lang.String,int,int,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)> ()
<android.net.IThrottleManager$Stub: long getCliffThreshold(java.lang.String,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)> ()
<android.net.IThrottleManager$Stub: long getPeriodStartTime(java.lang.String)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)> ()
<android.net.IThrottleManager$Stub: long getResetTime(java.lang.String)> (2)
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.net.IThrottleManager: int getCliffLevel(java.lang.String,int)> (1)
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IThrottleManager: int getThrottle(java.lang.String)> ()
<android.net.IThrottleManager: java.lang.String getHelpUri()> (1)
<android.net.IThrottleManager: long getByteCount(java.lang.String,int,int,int)> (1)
<android.net.IThrottleManager: long getCliffThreshold(java.lang.String,int)> (1)
<android.net.IThrottleManager: long getPeriodStartTime(java.lang.String)> (1)
<android.net.IThrottleManager: long getResetTime(java.lang.String)> (1)
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)> (1)
<com.android.server.ThrottleService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ThrottleManager: java.lang.String getHelpUri()> (1)
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)> ()
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)> (1)
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)> ()
<android.net.ThrottleManager: long getResetTime(java.lang.String)> ()
<com.android.phone.DataUsageListener: void updatePolicy()> (2)
<com.android.phone.DataUsage: void onCreate(android.os.Bundle)> (2)
<com.android.phone.DataUsageListener: void access$100(com.android.phone.DataUsageListener)> (1)
<com.android.phone.DataUsageListener: void resume()> (2)
<com.android.phone.DataUsageListener$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.DataUsage: void onResume()> (3)
<com.android.phone.Settings: void onResume()> (3)
<com.android.server.ConnectivityService: void enforceAccessPermission()> (5)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> (2)
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> (6)
<com.android.server.ConnectivityService: int getNetworkPreference()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean getMobileDataEnabled()> ()
<android.net.IConnectivityManager$Stub: boolean getMobileDataEnabled()> (2)
<com.android.server.ConnectivityService: android.net.NetworkStateTracker tryFailover(int)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> ()
<android.net.IConnectivityManager$Stub: int getNetworkPreference()> (2)
<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.IConnectivityManager: boolean getMobileDataEnabled()> (3)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager: int getNetworkPreference()> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (7)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> (1)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.ConnectivityManager: int getNetworkPreference()> ()
<android.net.http.RequestQueue: void setProxyConfig()> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.net.NetworkInfo getActiveNetworkInfo(android.content.Context)> (1)
<com.android.exchange.AbstractSyncService: boolean hasConnectivity()> (2)
<com.android.exchange.SyncManager: void waitForConnectivity()> (1)
<com.android.providers.downloads.Helpers: boolean isNetworkRoaming(android.content.Context)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.providers.downloads.Helpers: boolean isNetworkAvailable(android.content.Context)> (2)
<com.android.mms.transaction.RetryScheduler: boolean isConnected()> (1)
<com.android.mms.transaction.TransactionService: boolean isNetworkAvailable()> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: int turnOnMobileConnection()> (3)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.http.RequestQueue: void access$300(android.net.http.RequestQueue)> (1)
<android.net.http.RequestQueue: void enablePlatformNotifications()> (1)
<com.android.browser.search.OpenSearchSearchEngine: boolean isNetworkConnected(android.content.Context)> (1)
<com.android.exchange.EasOutboxService: boolean hasConnectivity()> (1)
<com.android.exchange.EasSyncService: boolean hasConnectivity()> (2)
<com.android.exchange.SyncManager: void run()> (1)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: boolean isNetworkConnected()> (1)
<com.android.providers.downloads.DownloadThread: void run()> (3)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.development.Connectivity$11: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$13: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$9: void onClick(android.view.View)> (1)
<com.android.internal.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: int turnOnMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: int turnOnMobileConnection()> (2)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.net.http.RequestQueue$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.Network: void enablePlatformNotifications()> (2)
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.providers.downloads.DownloadService: void updateFromProvider()> (3)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult query(java.lang.String)> (2)
<com.android.providers.downloads.DownloadService: void insertDownload(android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<android.webkit.Network: android.webkit.Network getInstance(android.content.Context)> (10)
<android.webkit.WebView: void enablePlatformNotifications()> (1)
<com.android.browser.search.SearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.providers.downloads.DownloadService: void access$000(com.android.providers.downloads.DownloadService)> (2)
<com.android.providers.downloads.DownloadService: void onCreate()> (1)
<com.android.providers.downloads.DownloadService: void onStart(android.content.Intent,int)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (1)
<com.android.providers.downloads.DownloadService: void access$1200(com.android.providers.downloads.DownloadService,android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.providers.downloads.DownloadService: void access$1500(com.android.providers.downloads.DownloadService,android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<android.webkit.FrameLoader: boolean executeLoad()> (1)
<android.webkit.LoadListener: boolean handleSslErrorRequest(android.net.http.SslError)> (1)
<android.webkit.LoadListener: void doRedirect()> (2)
<android.webkit.LoadListener: void handleEndData()> (2)
<android.webkit.LoadListener: void handleHeaders(android.net.http.Headers)> (2)
<android.webkit.LoadListener: void handleSslError(android.net.http.SslError)> (2)
<android.webkit.WebViewCore$EventHub: void sendMessage(android.os.Message)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageDelayed(android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageAtFrontOfQueue(android.os.Message)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.browser.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.providers.downloads.DownloadService$DownloadManagerContentObserver: void onChange(boolean)> (1)
<com.android.providers.downloads.DownloadService$MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<android.webkit.BrowserFrame: android.webkit.LoadListener startLoadingResource(int,java.lang.String,java.lang.String,java.util.HashMap,byte[],long,int,boolean,boolean,boolean,java.lang.String,java.lang.String)> ()
<android.net.http.EventHandler: boolean handleSslErrorRequest(android.net.http.SslError)> (1)
<android.webkit.LoadListener: void sendMessageInternal(android.os.Message)> (8)
<android.webkit.WebViewCore$EventHub: void access$6300(android.webkit.WebViewCore$EventHub,android.os.Message)> (12)
<android.webkit.WebViewCore$EventHub: void access$6500(android.webkit.WebViewCore$EventHub,android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void access$6400(android.webkit.WebViewCore$EventHub,android.os.Message)> (3)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (2)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.webkit.LoadListener: void certificate(android.net.http.SslCertificate)> (1)
<android.webkit.LoadListener: void data(byte[],int)> (3)
<android.webkit.LoadListener: void endData()> (3)
<android.webkit.LoadListener: void error(int,java.lang.String)> (10)
<android.webkit.LoadListener: void headers(android.net.http.Headers)> (2)
<android.webkit.LoadListener: void status(int,int,int,java.lang.String)> (5)
<android.webkit.WebViewCore: void contentDraw()> (4)
<android.webkit.WebViewCore: void contentScrollBy(int,int,boolean)> ()
<android.webkit.WebViewCore: void contentScrollTo(int,int)> ()
<android.webkit.WebViewCore: void contentSpawnScrollTo(int,int)> ()
<android.webkit.WebViewCore: void sendMessage(android.os.Message)> ()
<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)> (6)
<android.webkit.WebViewCore: void sendMessage(int,int,int)> (19)
<android.webkit.WebViewCore: void sendMessage(int,int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void sendMessage(int,int)> (2)
<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)> (26)
<android.webkit.WebViewCore: void sendMessage(int)> (14)
<android.webkit.WebViewCore: void viewSizeChanged(int,int,int,float,int,int,boolean)> (1)
<android.webkit.WebViewCore: void sendMessageDelayed(int,java.lang.Object,long)> (1)
<android.webkit.WebViewCore: void destroy()> (1)
<android.webkit.WebViewCore: void sendMessageAtFrontOfQueue(int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void setupViewport(boolean)> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestionProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<android.net.http.Connection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.net.http.EventHandler: void certificate(android.net.http.SslCertificate)> (2)
<android.net.http.EventHandler: void data(byte[],int)> (1)
<android.webkit.FrameLoader: boolean handleLocalFile(java.lang.String,android.webkit.LoadListener,android.webkit.WebSettings)> (1)
<android.webkit.StreamLoader: boolean sendData()> (6)
<android.net.http.EventHandler: void endData()> (2)
<android.webkit.StreamLoader: void closeStreamAndSendEndData()> (6)
<android.net.http.EventHandler: void error(int,java.lang.String)> (2)
<android.webkit.ContentLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.DataLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.FileLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.FrameLoader: boolean handleCache()> (1)
<android.webkit.FrameLoader: boolean handleHTTPLoad()> (2)
<android.net.http.EventHandler: void headers(android.net.http.Headers)> (2)
<android.webkit.StreamLoader: void sendHeaders()> (6)
<android.net.http.EventHandler: void status(int,int,int,java.lang.String)> (2)
<android.webkit.CacheLoader: boolean setupStreamAndSendStatus()> (1)
<android.webkit.BrowserFrame: void didFirstLayout()> (6)
<android.webkit.WebViewCore: void resumeUpdatePicture(android.webkit.WebViewCore)> (6)
<android.webkit.WebViewCore: void sendNotifyProgressFinished()> ()
<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()> (4)
<android.webkit.WebView$InvokeListBox$1: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView: void deleteSelection(int,int)> (1)
<android.webkit.WebView: void passToJavaScript(java.lang.String,android.view.KeyEvent)> (1)
<android.webkit.WebView: void replaceTextfieldText(int,int,java.lang.String,int,int)> (2)
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)> (1)
<android.webkit.PluginFullScreenHolder: void onStop()> (1)
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)> (5)
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)> (5)
<android.webkit.WebView$InvokeListBox$2: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView$InvokeListBox$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.webkit.WebView$InvokeListBox$4: void onCancel(android.content.DialogInterface)> (1)
<android.webkit.WebView: void centerKeyPressOnTextField()> (3)
<android.webkit.WebView: void clearCache(boolean)> (1)
<android.webkit.WebView: void dumpDomTree(boolean)> (2)
<android.webkit.WebView: void dumpRenderTree(boolean)> (2)
<android.webkit.WebView: void goBackOrForward(int,boolean)> (1)
<android.webkit.WebView: void requestLabel(int,int)> (1)
<android.webkit.WebView: void setActive(boolean)> (3)
<android.webkit.WebView: void setFocusControllerInactive()> (4)
<android.webkit.WebView: void setNetworkAvailable(boolean)> (2)
<android.webkit.WebView: void setSelection(int,int)> (3)
<android.webkit.WebView: void switchOutDrawHistory()> (13)
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<android.webkit.WebView: void scrollFocusedTextInput(float,int)> (1)
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> (3)
<android.webkit.WebView: void setBackgroundColor(int)> (3)
<android.webkit.WebView: boolean sendViewSizeZoom()> (4)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.String[])> (1)
<android.webkit.WebViewCore$4: void invoke(java.lang.String,boolean,boolean)> (1)
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> ()
<android.webkit.WebView: void addPackageName(java.lang.String)> (1)
<android.webkit.WebView: void addPackageNames(java.util.Set)> (1)
<android.webkit.WebView: void cancelWebCoreTouchEvent(int,int,boolean)> (2)
<android.webkit.WebView: void documentAsText(android.os.Message)> ()
<android.webkit.WebView: void documentHasImages(android.os.Message)> ()
<android.webkit.WebView: void externalRepresentation(android.os.Message)> ()
<android.webkit.WebView: void letPluginHandleNavKey(int,long,boolean)> (3)
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (6)
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> (3)
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> ()
<android.webkit.WebView: void removePackageName(java.lang.String)> (1)
<android.webkit.WebView: void sendMotionUp(int,int,int,int,int)> ()
<android.webkit.WebView: void sendMoveFocus(int,int)> ()
<android.webkit.WebView: void sendMoveMouseIfLatest(boolean)> ()
<android.webkit.WebView: void sendMoveMouse(int,int,int,int)> ()
<android.webkit.WebView: void setJsFlags(java.lang.String)> (1)
<android.webkit.WebView: void setNetworkType(java.lang.String,java.lang.String)> (1)
<android.webkit.WebViewCore: void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)> (2)
<android.webkit.WebView: void clearHistory()> (1)
<android.webkit.WebView: void clearSslPreferences()> ()
<android.webkit.WebView: void clearView()> ()
<android.webkit.WebView: void debugDump()> (1)
<android.webkit.WebView: void dumpV8Counters()> (1)
<android.webkit.WebView: void freeMemory()> (1)
<android.webkit.WebView: void onPause()> (1)
<android.webkit.WebView: void onResume()> (1)
<android.webkit.WebView: void pauseTimers()> (1)
<android.webkit.WebView: void reload()> (1)
<android.webkit.WebView: void resumeTimers()> (1)
<android.webkit.WebView: void stopLoading()> (3)
<android.webkit.WebViewCore: void access$1800(android.webkit.WebViewCore,int,int,int,float,int,int,boolean)> (4)
<android.webkit.WebView: void destroy()> (6)
<android.webkit.WebView: void doShortPress()> (2)
<android.webkit.WebViewCore: void didFirstLayout(boolean)> ()
<android.webkit.WebViewCore: void updateViewport()> ()
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<android.net.http.Connection: boolean openHttpConnection(android.net.http.Request)> (3)
<android.net.http.Connection: void processRequests(android.net.http.Request)> (4)
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> (1)
<android.net.http.Request: void readResponse(android.net.http.AndroidHttpClientConnection)> (1)
<android.webkit.CacheLoader: boolean sendData()> (1)
<android.webkit.ContentLoader: boolean sendData()> (1)
<android.webkit.DataLoader: boolean sendData()> (1)
<android.webkit.FileLoader: boolean sendData()> (1)
<android.webkit.StreamLoader: void load()> (5)
<android.webkit.CacheLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.ContentLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.DataLoader: void closeStreamAndSendEndData()> (1)
<android.webkit.FileLoader: void closeStreamAndSendEndData()> (1)
<android.net.http.Connection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (4)
<android.net.http.Request: void error(int,int)> (1)
<android.webkit.StreamLoader: boolean setupStreamAndSendStatus()> (2)
<android.webkit.CacheLoader: void sendHeaders()> (1)
<android.webkit.ContentLoader: void sendHeaders()> (1)
<android.webkit.DataLoader: void sendHeaders()> (1)
<android.webkit.FileLoader: void sendHeaders()> (1)
<android.webkit.BrowserFrame: boolean handleUrl(java.lang.String)> ()
<android.webkit.WebView: void cancelTouch()> (2)
<android.webkit.WebView: void doFling()> (1)
<android.webkit.WebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (1)
<android.webkit.WebView: void onScrollChanged(int,int,int,int)> (7)
<android.webkit.WebView: void setNewZoomScale(float,boolean,boolean)> (5)
<android.webkit.WebTextView: void onTextChanged(java.lang.CharSequence,int,int,int)> (3)
<android.webkit.WebTextView: void sendDomEvent(android.view.KeyEvent)> (3)
<android.webkit.WebTextView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.webkit.WebView: boolean performLongClick()> (7)
<com.android.browser.BrowserSettings: void clearCache(android.content.Context)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<android.webkit.WebView: void goBackOrForward(int)> (3)
<android.webkit.WebTextView: void setType(int)> (1)
<android.webkit.WebView: void onAttachedToWindow()> (3)
<android.webkit.WebView: void onDetachedFromWindow()> (3)
<android.webkit.WebView: void onWindowFocusChanged(boolean)> (3)
<android.webkit.WebTextView: void onEditorAction(int)> (4)
<android.webkit.WebView: void clearTextEntry(boolean)> (11)
<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)> (3)
<com.android.browser.BrowserActivity: void onNetworkToggle(boolean)> (1)
<com.android.browser.Tab$2: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> (1)
<android.webkit.WebTextView: void onSelectionChanged(int,int)> (3)
<android.webkit.WebTextView: void setDefaultSelection()> (3)
<android.webkit.WebView$1: void onVisibilityChanged(boolean)> (1)
<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)> (5)
<android.webkit.WebView: boolean zoomIn()> (3)
<android.webkit.WebView: boolean zoomOut()> (3)
<android.webkit.CallbackProxy: void switchOutDrawHistory()> (2)
<android.webkit.WebTextView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView: boolean textFieldDrag(android.view.MotionEvent)> (1)
<com.android.browser.Tab: boolean restoreState(android.os.Bundle)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.WebView: boolean setFrame(int,int,int,int)> (3)
<android.webkit.WebView: void contentSizeChanged(boolean)> (1)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.Object)> (1)
<com.android.browser.BrowserActivity: void packageChanged(java.lang.String,boolean)> (1)
<com.android.browser.BrowserActivity: void addPackageNames(java.util.Set)> (1)
<android.webkit.WebView: void access$4100(android.webkit.WebView,int,int,boolean)> (2)
<android.webkit.WebView: void doTrackball(long)> (1)
<com.android.browser.Tab: void activateVoiceSearchMode(android.content.Intent)> (2)
<com.android.email.activity.MessageCompose: void displayQuotedText(java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessageView$LoadAttachmentsTask: void onPostExecute(com.android.email.provider.EmailContent$Attachment[])> (1)
<com.android.email.activity.MessageView: void onShowPictures()> (1)
<com.android.email.activity.MessageView: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.WebView: void loadUrl(java.lang.String)> (14)
<com.android.browser.BrowserActivity$UrlData: void loadIn(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void sendNetworkType(java.lang.String,java.lang.String)> (1)
<android.webkit.WebView: void drawPage(android.graphics.Canvas)> ()
<com.android.browser.TabControl: boolean recreateWebView(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.TabControl: void freeMemory()> (1)
<com.android.browser.Tab: void pause()> (2)
<com.android.browser.Tab: void resume()> (2)
<com.android.browser.BrowserActivity: boolean pauseWebViewTimers()> (3)
<com.android.browser.BrowserActivity: void resumeWebViewTimers()> (2)
<com.android.browser.BrowserActivity: void stopLoading()> (3)
<com.android.browser.TabControl: void stopAllLoading()> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onStop()> (1)
<android.webkit.WebView: void finalize()> ()
<com.android.browser.Tab: void destroy()> (4)
<com.android.browser.Tab: void dismissSubWindow()> (3)
<com.android.email.activity.MessageCompose: void onDestroy()> (1)
<com.android.email.activity.MessageView: void onDestroy()> (1)
<com.android.htmlviewer.HTMLViewerActivity: void onDestroy()> (1)
<android.webkit.WebView: void access$4700(android.webkit.WebView)> (2)
<android.net.http.HttpConnection: boolean openHttpConnection(android.net.http.Request)> (1)
<android.net.http.HttpsConnection: boolean openHttpConnection(android.net.http.Request)> (1)
<android.net.http.ConnectionThread: void run()> (2)
<android.net.http.HttpConnection: void processRequests(android.net.http.Request)> (1)
<android.net.http.HttpsConnection: void processRequests(android.net.http.Request)> (1)
<android.net.http.RequestHandle: void processRequest()> (2)
<android.webkit.CacheLoader: void load()> (4)
<android.webkit.ContentLoader: void load()> (2)
<android.webkit.DataLoader: void load()> (2)
<android.webkit.FileLoader: void load()> (2)
<android.net.http.HttpConnection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (1)
<android.net.http.HttpsConnection: boolean httpFailure(android.net.http.Request,int,java.lang.Exception)> (1)
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> (2)
<android.webkit.WebView: void access$1600(android.webkit.WebView)> (1)
<android.webkit.WebView: void drawContent(android.graphics.Canvas)> (2)
<android.webkit.WebView: void computeScroll()> (3)
<android.webkit.WebView: void recordNewContentSize(int,int,boolean)> (3)
<android.webkit.WebView: boolean zoomWithPreview(float,boolean)> (4)
<android.webkit.WebView: void access$1100(android.webkit.WebView,float,boolean,boolean)> (5)
<android.webkit.WebView: void displaySoftKeyboard(boolean)> (1)
<android.webkit.WebView: void doDoubleTap()> (2)
<android.webkit.WebView: void updateDefaultZoomDensity(int)> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<android.webkit.WebView: void goBack()> (4)
<android.webkit.WebView: void goForward()> (1)
<android.webkit.WebView: void rebuildWebTextView()> (9)
<android.webkit.WebView: void access$5700(android.webkit.WebView,boolean)> (2)
<android.webkit.WebView: void invokeZoomPicker()> ()
<com.android.browser.BrowserActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.PluginFullScreenHolder: boolean onTrackballEvent(android.view.MotionEvent)> (1)
<android.webkit.WebTextView: boolean onTrackballEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView$1: void onZoom(boolean)> (1)
<android.webkit.WebView$9: void onClick(android.view.View)> (1)
<android.webkit.WebView$10: void onClick(android.view.View)> (1)
<android.webkit.BrowserFrame: void loadFinished(java.lang.String,int,boolean)> ()
<android.webkit.BrowserFrame: void setProgress(int)> ()
<com.android.browser.TabControl: boolean restoreState(android.os.Bundle)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (16)
<com.android.browser.BrowserActivity: void access$200(com.android.browser.BrowserActivity,java.lang.String,boolean)> (1)
<com.android.browser.BrowserActivity: void access$2300(com.android.browser.BrowserActivity,java.util.Set)> (1)
<com.android.browser.Tab$5: void onIndexChanged(android.webkit.WebHistoryItem,int)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessage(com.android.email.provider.EmailContent$Message,com.android.email.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessageGuarded(com.android.email.provider.EmailContent$Message,com.android.email.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageView$LoadAttachmentsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void access$2200(com.android.email.activity.MessageView,java.lang.String,java.lang.String)> (1)
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void loadUrl(android.webkit.WebView,java.lang.String)> (5)
<com.android.browser.ErrorConsoleView$1: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void messageChanged()> (3)
<com.android.settings.TetherSettings: android.app.Dialog onCreateDialog(int)> (3)
<com.android.email.activity.MessageView$MessageViewHandler: void attachmentProgress(boolean)> (1)
<com.android.email.activity.MessageView$MessageViewHandler: void progress(boolean)> (1)
<com.android.email.activity.MessageView$MessageViewHandler: void loadContentUri(java.lang.String)> (1)
<com.android.browser.BrowserActivity: void loadUrlDataIn(com.android.browser.Tab,com.android.browser.BrowserActivity$UrlData)> (3)
<com.android.browser.BrowserActivity: void access$000(com.android.browser.BrowserActivity,java.lang.String,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onLowMemory()> (1)
<com.android.browser.TabControl: void pauseCurrentTab()> (1)
<com.android.browser.Tab: void putInBackground()> (3)
<com.android.browser.TabControl: void resumeCurrentTab()> (1)
<com.android.browser.Tab: void putInForeground()> (1)
<com.android.browser.BrowserActivity: void goBackOnePageOrQuit()> (2)
<com.android.browser.BrowserActivity: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.browser.BrowserActivity: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> (1)
<com.android.browser.TitleBar: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void destroy()> (1)
<com.android.browser.BrowserActivity: void dismissSubWindow(com.android.browser.Tab)> (6)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<android.net.http.RequestQueue$ActivePool: void startup()> (1)
<android.net.http.RequestHandle: void createAndQueueNewRequest()> (2)
<android.webkit.Network: boolean requestURL(java.lang.String,java.util.Map,byte[],android.webkit.LoadListener)> (2)
<android.webkit.FrameLoader: void startCacheLoad(android.webkit.CacheManager$CacheResult)> (1)
<android.webkit.LoadListener: boolean checkCache(java.util.Map)> (2)
<android.webkit.HTML5VideoViewProxy$PosterDownloader$1: void run()> (1)
<android.webkit.WebView$ScaleDetectorListener: boolean onScaleBegin(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView: void access$1500(android.webkit.WebView,android.graphics.Canvas)> (1)
<android.webkit.WebView: void onDraw(android.graphics.Canvas)> (3)
<android.webkit.WebView: void access$6000(android.webkit.WebView,int,int,boolean)> (2)
<android.webkit.WebView: void notifyFindDialogDismissed()> (1)
<android.webkit.WebView: void setFindIsUp(boolean)> (2)
<android.webkit.WebView: void centerFitRect(int,int,int,int)> (2)
<android.webkit.WebView$PostScale: void run()> (1)
<android.webkit.WebView$ScaleDetectorListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView$ScaleDetectorListener: void onScaleEnd(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView: void access$6900(android.webkit.WebView,boolean)> (4)
<android.webkit.WebView: void access$8800(android.webkit.WebView)> (4)
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> (1)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.settings.SettingsSafetyLegalActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (6)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (3)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.browser.BrowserActivity$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.BrowserActivity$18: void onPostExecute(java.util.Set)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object[])> (1)
<com.android.email.activity.MessageView$LoadBodyTask: void onPostExecute(java.lang.String[])> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTab(java.lang.String)> (3)
<com.android.browser.BrowserActivity: void loadUrlFromContext(android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: boolean moveToNewer()> (2)
<com.android.email.activity.MessageView: boolean moveToOlder()> (3)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MessageView$ControllerResults: void loadAttachmentCallback(com.android.email.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageView$ControllerResults: void loadMessageForViewCallback(com.android.email.mail.MessagingException,long,int)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(com.android.browser.BrowserActivity$UrlData,boolean,java.lang.String)> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean,java.lang.String,java.lang.String)> (3)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$2: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Tab$SubWindowChromeClient: void onCloseWindow(android.webkit.WebView)> (1)
<android.net.http.RequestQueue: void <init>(android.content.Context,int)> (1)
<android.net.http.RequestHandle: void setupAuthResponse()> (2)
<android.webkit.WebView$DragTrackerHandler: void buildBitmap(int,int)> (1)
<com.android.browser.FindDialog: void dismiss()> (2)
<android.webkit.WebView: void access$9700(android.webkit.WebView,int,int,int,int)> (5)
<com.android.browser.BrowserSettings$Observer: void update(java.util.Observable,java.lang.Object)> (2)
<com.android.browser.Tab$2: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)> (1)
<com.android.internal.app.AlertActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.BrowserActivity: boolean switchToTab(int)> (7)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.browser.BrowserActivity$18: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView$LoadBodyTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.BrowserActivity: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab access$700(com.android.browser.BrowserActivity,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void access$500(com.android.browser.BrowserActivity,android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: void onDelete()> (2)
<com.android.email.activity.MessageView: void onRespond(int,int)> (1)
<com.android.email.Controller$Result: void loadAttachmentCallback(com.android.email.mail.MessagingException,long,long,int)> (5)
<com.android.email.Controller$Result: void loadMessageForViewCallback(com.android.email.mail.MessagingException,long,int)> (4)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabAndShow(java.lang.String,boolean,java.lang.String)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> (2)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.BrowserActivity: void closeCurrentWindow()> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<android.net.http.RequestQueue: void <init>(android.content.Context)> (2)
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> (1)
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.webkit.WebView$DragTrackerHandler: boolean draw(android.graphics.Canvas)> (1)
<com.android.browser.FindDialog$2: void onClick(android.view.View)> (1)
<com.android.browser.Tab: boolean createSubWindow()> (1)
<com.android.browser.TabControl: android.webkit.WebView createNewWebView()> (3)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.email.activity.MessageView: boolean handleMenuItem(int)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.email.Controller$ServiceCallback: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.Controller: void loadAttachment(long,long,long,long,com.android.email.Controller$Result)> (2)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.Controller: void loadMessageForView(long,com.android.email.Controller$Result)> (1)
<com.android.browser.BrowserActivity: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1200(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void retainQueue()> (1)
<android.webkit.Network: void <init>(android.content.Context)> (1)
<android.webkit.LoadListener: void makeAuthResponse(java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessageView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.MessagingListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.MessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.email.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.email.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.activity.MessageView: void onDownloadAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.activity.MessageView: void onViewAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.MessagingListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.activity.MessageView: void reloadUiFromMessage(com.android.email.provider.EmailContent$Message,boolean)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void start()> (1)
<android.webkit.LoadListener: void handleAuthResponse(java.lang.String,java.lang.String)> (4)
<com.android.email.GroupMessagingListener: void loadAttachmentFailed(long,long,long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentFinished(long,long,long)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (2)
<com.android.email.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.email.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (3)
<com.android.email.GroupMessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewFinished(long)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewStarted(long)> (2)
<com.android.email.activity.MessageView: void access$1900(com.android.email.activity.MessageView,com.android.email.provider.EmailContent$Message,boolean)> (1)
<android.webkit.HTML5VideoViewProxy: void loadPoster(java.lang.String)> ()
<android.webkit.HttpAuthHandler: void handleAuthRequest(android.webkit.LoadListener)> (1)
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)> (2)
<android.webkit.HttpAuthHandler: void cancel()> (5)
<com.android.email.MessagingController$8: void run()> (1)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener)> (1)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.SyncManager$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.EasSyncService: void doProgressCallback(long,long,int)> (2)
<com.android.exchange.EasSyncService: void doStatusCallback(long,long,int)> (2)
<com.android.exchange.SyncManager$1: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.MessagingController$7: void run()> (1)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (1)
<com.android.email.activity.MessageView$LoadMessageTask: void onPostExecute(com.android.email.provider.EmailContent$Message)> (1)
<android.webkit.Network: void handleAuthRequest(android.webkit.LoadListener)> (1)
<com.android.browser.BrowserActivity$17: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (6)
<com.android.browser.BrowserActivity$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.BrowserActivity$16: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.Controller$12: void run()> (2)
<com.android.exchange.EasOutboxService: void doProgressCallback(long,long,int)> (1)
<com.android.exchange.EasSyncService: void getAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasOutboxService: void doStatusCallback(long,long,int)> (1)
<com.android.email.Controller$4: void run()> (2)
<com.android.email.activity.MessageView$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<android.webkit.HttpAuthHandler: void processNextLoader()> (4)
<com.android.browser.Tab$SubWindowClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageView$CustomWebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsLicenseActivity$1: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.settings.SettingsSafetyLegalActivity$1: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void getAttachment(com.android.exchange.PartRequest)> (1)
<com.android.server.ConnectivityService: void enforceTetherAccessPermission()> (7)
<com.android.server.ConnectivityService: boolean isTetheringSupported()> (7)
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isTetheringSupported()> ()
<android.net.IConnectivityManager$Stub: boolean isTetheringSupported()> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int getLastTetherError(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableWifiRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager: boolean isTetheringSupported()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<android.net.ConnectivityManager: boolean isTetheringSupported()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (4)
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (2)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (1)
<com.android.settings.TetherSettings: void updateState(java.lang.Object[],java.lang.Object[],java.lang.Object[])> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TetherSettings: void updateState()> (2)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (2)
<com.android.server.WifiService: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.settings.wifi.WifiApEnabler: void <init>(android.content.Context,android.preference.CheckBoxPreference)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.settings.TetherSettings: void access$000(com.android.settings.TetherSettings,java.lang.Object[],java.lang.Object[],java.lang.Object[])> (1)
<com.android.settings.TetherSettings: void access$100(com.android.settings.TetherSettings)> (1)
<com.android.server.WifiService: void access$600(com.android.server.WifiService,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.settings.wifi.WifiApSettings: void onCreate(android.os.Bundle)> (2)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.BrowserActivity$5: void handleMessage(android.os.Message)> (1)
<com.android.browser.BrowserHistoryPage: void onCreate(android.os.Bundle)> (1)
<com.android.browser.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> (3)
<com.android.browser.BrowserActivity$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$2$4: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserActivity$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Tab$2$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.BrowserBookmarksAdapter: android.database.Cursor queryBookmarksForUrl(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)> (3)
<com.android.browser.BrowserActivity$6: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.BrowserActivity$6: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksAdapter$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (4)
<com.android.browser.BrowserBookmarksAdapter: void deleteRow(int)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.HistoryItem$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void deleteBookmark(int)> (1)
<com.android.browser.BrowserBookmarksPage$4: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> (1)
<com.android.browser.BrowserActivity: void retainIconsOnStartup()> (1)
<com.android.browser.widget.BookmarkWidgetService: void queryCursorAndRender()> (1)
<com.android.browser.widget.BookmarkWidgetService: void access$100(com.android.browser.widget.BookmarkWidgetService)> (2)
<com.android.browser.widget.BookmarkWidgetService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.browser.BrowserBookmarksAdapter: void <init>(com.android.browser.BrowserBookmarksPage,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserBookmarksPage$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter: void populateIcons(java.util.Map)> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter$2: void onReceiveValue(java.util.Set)> (1)
<com.android.browser.WebsiteSettingsActivity$SiteAdapter$2: void onReceiveValue(java.lang.Object)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (2)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(java.lang.String)> (4)
<com.android.browser.BrowserActivity: com.android.browser.BrowserActivity$UrlData getUrlDataFromIntent(android.content.Intent)> (2)
<com.android.browser.BrowserActivity: java.lang.String smartUrlFilter(android.net.Uri)> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (3)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserSettings: void clearHistory(android.content.Context)> (1)
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> (1)
<com.android.browser.BrowserHistoryPage: boolean onPrepareOptionsMenu(android.view.Menu)> (2)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<com.android.browser.Tab$3$4: java.lang.String[] doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$3$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (2)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean)> (3)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.BrowserBackupAgent: long buildBookmarkFile(java.io.FileOutputStream)> (1)
<com.android.browser.BrowserBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (1)
<android.webkit.WebIconDatabase$EventHandler: void bulkRequestIcons(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$500(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (2)
<android.webkit.WebIconDatabase$EventHandler: void postMessage(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$900(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (7)
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<android.webkit.WebIconDatabase: void close()> (1)
<android.webkit.WebIconDatabase: void open(java.lang.String)> (1)
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)> (3)
<android.webkit.WebIconDatabase: void removeAllIcons()> (1)
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> ()
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)> (3)
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<com.android.browser.BrowserBookmarksAdapter: void deleteAllRows()> ()
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryActivity$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.CombinedBookmarkHistoryActivity$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.browser.Tab$3$3: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Tab$3$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.SET_DEBUG_APP
10 Callers:
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<android.app.ActivityManagerNative: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.AppPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.development.DevelopmentSettings: void writeDebugOptions()> (2)
<com.android.development.DevelopmentSettings: void access$100(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.development.DevelopmentSettings$2: void onClick(android.view.View)> (1)
Permission:android.permission.WRITE_CALENDAR
91 Callers:
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (4)
<com.android.exchange.SyncManager$CalendarObserver$1: void run()> (1)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.calendar.AlertActivity: void dismissAlarm(long)> (1)
<com.android.calendar.AlertActivity: void access$400(com.android.calendar.AlertActivity,long)> (1)
<com.android.calendar.AlertActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.EventInfoActivity: void createExceptionResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.calendar.EventInfoActivity: boolean saveResponse(android.content.ContentResolver)> (1)
<com.android.calendar.EventInfoActivity: void onPause()> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> (1)
<com.android.calendar.AgendaWindowAdapter: void doQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.AgendaWindowAdapter: void access$1400(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean access$600(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,int)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.AgendaWindowAdapter: void refresh(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaListView: void goTo(android.text.format.Time,boolean)> (3)
<com.android.calendar.AgendaListView: void refresh(boolean)> (2)
<com.android.calendar.AgendaActivity: void goTo(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaActivity: void goToToday()> (1)
<com.android.calendar.AgendaActivity: void onResume()> (1)
<com.android.calendar.AgendaActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AgendaActivity$2: void onChange(boolean)> (1)
<com.android.calendar.AgendaActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.Navigator: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.Navigator: void goToToday()> (1)
<com.android.calendar.MonthView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.MenuHelper: boolean onOptionsItemSelected(android.app.Activity,android.view.MenuItem,com.android.calendar.Navigator)> (3)
<com.android.calendar.AgendaActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.CalendarActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.calendar.MonthActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.DayActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.WeekActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.EventInfoActivity: void updateResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.calendar.EditEvent: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.EditEvent: boolean save()> (3)
<com.android.calendar.EditEvent: boolean access$1500(com.android.calendar.EditEvent)> (1)
<com.android.calendar.EditEvent: void onBackPressed()> (1)
<com.android.calendar.EditEvent: void onClick(android.view.View)> (1)
<com.android.calendar.EditEvent$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.calendar.AlertActivity: void onStop()> (1)
<com.android.calendar.AlertService: void doTimeChanged()> (1)
<com.android.calendar.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.AlertActivity$2: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void wipe()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void wipe()> (1)
<com.android.calendar.DismissAllAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void access$000(com.android.providers.calendar.CalendarProvider2,boolean)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$700(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EditEvent: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.calendar.DeleteEventHelper$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.AlertActivity: void access$700(com.android.calendar.AlertActivity)> (2)
<com.android.calendar.AlertActivity$3: void onClick(android.view.View)> (1)
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])> (1)
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)> ()
<com.android.calendar.SelectCalendarsAdapter: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void onClick(android.view.View)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
Permission:android.permission.GET_ACCOUNTS
489 Callers:
<android.accounts.AccountManagerService: void checkReadAccountsPermission()> (3)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (1)
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (8)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (12)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$2: void doWork()> (1)
<android.accounts.AccountManager$1: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.development.SyncAdapterDriver: void startSyncSelected(android.view.View)> ()
<com.android.email.provider.EmailProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternal()> (1)
<com.android.exchange.SyncManager$3: void run()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen: android.accounts.Account findIntendedAccount(java.lang.String)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager)> (1)
<android.accounts.AccountManager$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (8)
<android.content.SyncManager$SyncHandler: void onBootCompleted()> (1)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.calendar.LaunchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ContactsListActivity: boolean isSyncActive()> (4)
<com.android.contacts.model.Sources: java.util.ArrayList getAccounts(boolean)> (5)
<com.android.providers.calendar.CalendarProvider2: void verifyAccounts()> (1)
<com.android.providers.contacts.ContactsProvider2: void verifyAccounts()> (1)
<com.android.settings.AccountSyncSettings: void onCreate(android.os.Bundle)> (4)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> (1)
<com.android.exchange.SyncManager: void runAccountReconciler()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager,com.android.internal.policy.impl.LockPatternKeyguardView$1)> (1)
<com.android.contacts.model.Sources: void <init>(android.content.Context)> (1)
<com.android.development.AccountsTester: void onStart()> (1)
<com.android.exchange.SyncManager: void run()> (1)
<com.android.settings.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<android.content.SyncManager$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity: void setEmptyText()> (5)
<com.android.contacts.SearchResultsActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity: void handleImportRequest(int)> (4)
<com.android.contacts.ImportVCardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: com.android.contacts.ui.ContactsPreferencesActivity$AccountSet doInBackground(com.android.contacts.ui.ContactsPreferencesActivity,java.lang.Void[])> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: java.util.ArrayList doInBackground(com.android.contacts.ui.EditContactActivity,java.lang.Void[])> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (3)
<com.android.providers.calendar.CalendarProvider2: boolean onCreate()> (2)
<com.android.providers.contacts.ContactsProvider2: boolean initialize()> (1)
<com.android.settings.AccountPreferenceBase: void onCreate(android.os.Bundle)> (5)
<com.android.settings.AccountSyncSettingsInAddAccount: void onCreate(android.os.Bundle)> (4)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (4)
<com.android.email.ExchangeUtils: void enableEasCalendarSync(android.content.Context)> (1)
<com.android.exchange.SyncManager: void access$900(com.android.exchange.SyncManager)> (1)
<com.android.exchange.SyncManager: void onCreate()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (2)
<com.android.contacts.model.Sources: com.android.contacts.model.Sources getInstance(android.content.Context)> (19)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity: void onSearchTextChanged()> (4)
<com.android.contacts.ContactsListActivity: void startQuery()> (8)
<com.android.contacts.SearchResultsActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ContactsListActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (4)
<com.android.contacts.SearchResultsActivity: void handleImportRequest(int)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.ImportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> (1)
<com.android.providers.contacts.ContactsProvider2: boolean onCreate()> (2)
<com.android.settings.AddAccountSettings: void onCreate(android.os.Bundle)> (3)
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<com.android.email.OneTimeInitializer: void initialize(android.content.Context)> (1)
<com.android.exchange.SyncManager$EasAccountsUpdatedListener: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.android.contacts.ContactsListActivity: void doContactDelete(android.net.Uri)> (5)
<com.android.contacts.PhoneDisambigDialog$PhonesAdapter: void <init>(android.content.Context,java.util.List,boolean)> (1)
<com.android.contacts.SplitAggregateView: void <init>(android.content.Context,android.net.Uri)> ()
<com.android.contacts.ui.ContactsPreferencesActivity$DisplayAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.ui.EditContactActivity: boolean doDeleteAction()> (1)
<com.android.contacts.ui.EditContactActivity$DeleteClickListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity: int compare(com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta)> (1)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Integer doInBackground(com.android.contacts.ui.EditContactActivity,com.android.contacts.model.EntitySet[])> (1)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: void onPostExecute(com.android.contacts.ui.EditContactActivity,com.android.contacts.model.EntitySet)> (1)
<com.android.contacts.ui.EditContactActivity: void bindEditors()> (3)
<com.android.contacts.ui.EditContactActivity: void createContact(android.accounts.Account)> (2)
<com.android.contacts.ui.EditContactActivity: void selectAccountAndCreateContact(java.util.ArrayList)> (1)
<com.android.contacts.ui.QuickContactWindow: void handleData(android.database.Cursor)> (1)
<com.android.contacts.ViewContactActivity: void buildEntries()> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity: void afterTextChanged(android.text.Editable)> (4)
<com.android.contacts.SearchResultsActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity: boolean checkProviderState(boolean)> (6)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void onContentChanged()> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (4)
<com.android.contacts.ContactsListActivity: void onRestart()> (5)
<com.android.contacts.ContactsListActivity: void onResume()> (5)
<com.android.contacts.SearchResultsActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.SearchResultsActivity: void access$300(com.android.contacts.ContactsListActivity,int)> (1)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.ContactsListActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (5)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (3)
<com.android.email.OneTimeInitializer: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (2)
<com.android.contacts.ContactsListActivity: boolean deleteSelection()> (4)
<com.android.contacts.ContactsListActivity: boolean onContextItemSelected(android.view.MenuItem)> (5)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.contacts.SearchResultsActivity: void doContactDelete(android.net.Uri)> (1)
<com.android.contacts.PhoneDisambigDialog: void <init>(android.content.Context,android.database.Cursor,boolean)> (2)
<com.android.contacts.ui.ContactsPreferencesActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.ui.EditContactActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ui.EditContactActivity: int compare(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object,java.lang.Object[])> (1)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ui.EditContactActivity: void onRestoreInstanceState(android.os.Bundle)> (1)
<com.android.contacts.ui.EditContactActivity: void access$200(com.android.contacts.ui.EditContactActivity,android.accounts.Account)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(com.android.contacts.ui.EditContactActivity,java.util.ArrayList)> (1)
<com.android.contacts.ui.QuickContactWindow: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ViewContactActivity: void bindData()> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.SearchResultsActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.ContactsListActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.SearchResultsActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onRestart()> (3)
<com.android.contacts.SearchResultsActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onResume()> (3)
<com.android.contacts.SearchResultsActivity: void onResume()> (3)
<com.android.contacts.util.WeakAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (6)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (3)
<com.android.contacts.SearchResultsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (3)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController,com.android.internal.policy.impl.LockPatternKeyguardViewTest$1)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean deleteSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean deleteSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean deleteSelection()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.SearchResultsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.ContactsListActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (5)
<com.android.contacts.PhoneDisambigDialog: void <init>(android.content.Context,android.database.Cursor)> ()
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.ui.EditContactActivity$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ViewContactActivity: void considerBindData()> (2)
<com.android.contacts.ContactsListActivity$1: void onChange(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (7)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void setUp()> (1)
<com.android.contacts.ContactsListActivity: boolean callContact(android.database.Cursor)> (6)
<com.android.contacts.ContactsListActivity: boolean smsContact(android.database.Cursor)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean callOrSmsContact(android.database.Cursor,boolean)> (1)
<com.android.contacts.util.WeakAsyncTask: void onPostExecute(java.lang.Object)> (6)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ViewContactActivity: void access$400(com.android.contacts.ViewContactActivity)> (1)
<com.android.contacts.ViewContactActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (1)
<com.cooliris.picasa.PicasaApi: android.accounts.Account[] getAccounts(android.content.Context)> (3)
<com.cooliris.picasa.PicasaService: boolean getIsSyncable(android.content.Context,android.accounts.Account)> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.email.mail.store.ExchangeStore: android.accounts.AccountManagerFuture removeSystemAccount(android.content.Context,com.android.email.provider.EmailContent$Account,android.accounts.AccountManagerCallback)> ()
<com.android.exchange.SyncManager$AccountObserver: void onAccountChanged()> (1)
<com.android.exchange.SyncManager: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.settings.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.contacts.ContactsListActivity: boolean callSelection()> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity: void onClick(android.view.View)> (4)
<com.android.contacts.SearchResultsActivity: boolean callContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.SearchResultsActivity: boolean smsContact(android.database.Cursor)> (1)
<com.android.contacts.ui.ContactsPreferencesActivity$QueryGroupsTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.ContactsPreferencesActivity$UpdateTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$AddContactTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$PersistTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ui.EditContactActivity$QueryEntitiesTask: void onPostExecute(java.lang.Object)> (2)
<com.android.contacts.ViewContactActivity$2: void onPostExecute(java.util.ArrayList)> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<com.cooliris.picasa.PicasaService: void requestSync(android.content.Context,int,long)> (2)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<com.android.exchange.SyncManager$AccountObserver: void access$500(com.android.exchange.SyncManager$AccountObserver)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean callSelection()> (1)
<com.android.contacts.SearchResultsActivity: boolean callSelection()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onClick(android.view.View)> (1)
<com.android.contacts.SearchResultsActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ViewContactActivity$2: void onPostExecute(java.lang.Object)> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<com.android.exchange.SyncManager$AccountObserver$1: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.mail.store.ExchangeStore: android.accounts.AccountManagerFuture addSystemAccount(android.content.Context,com.android.email.provider.EmailContent$Account,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.AddAccountSettings: void addAccount(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (7)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences)> (1)
<com.android.email.activity.setup.AccountSetupOptions: void onDone()> (1)
<com.android.settings.AddAccountSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AddAccountSettings: void onAuthDescriptionsUpdated()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.WindowManagerService$1: void acquired()> (1)
<com.android.server.WindowManagerService$1: void released()> (1)
<com.android.server.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (9)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void wakeWhenReadyTq(int)> (7)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void onClick(android.view.View)> (1)
<com.android.settings.AccountPreferenceBase: void onAuthDescriptionsUpdated()> (2)
<com.android.server.PowerManagerService$3: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.server.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuDoesntGoToUnlockScreenOnWakeWhenPukLocked()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuGoesToLockScreenWhenDeviceNotSecure()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testScreenRequestsRecreation()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByMenuKeyWhenPatternSet()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByNonMenuKey()> ()
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.exchange.SyncManager: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.AccountPreferenceBase: void updateAuthDescriptions()> (4)
<com.android.settings.AccountSyncSettings: void onAuthDescriptionsUpdated()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object findTargetWindow(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,int,int)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<com.android.settings.AccountSyncSettingsInAddAccount: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AddAccountSettings: void updateAuthDescriptions()> (2)
<com.android.settings.ManageAccountsSettings: void updateAuthDescriptions()> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void onAuthDescriptionsUpdated()> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
Permission:android.permission.READ_SYNC_STATS
99 Callers:
<android.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (3)
<com.android.contacts.ContactsListActivity: boolean isSyncActive()> (4)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)> ()
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity: void setEmptyText()> (5)
<com.android.contacts.SearchResultsActivity: boolean isSyncActive()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity: void onSearchTextChanged()> (4)
<com.android.contacts.ContactsListActivity: void startQuery()> (8)
<com.android.contacts.SearchResultsActivity: void setEmptyText()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity: void afterTextChanged(android.text.Editable)> (4)
<com.android.contacts.SearchResultsActivity: void onSearchTextChanged()> (1)
<com.android.contacts.ContactsListActivity: boolean checkProviderState(boolean)> (6)
<com.android.contacts.ContactsListActivity$ContactItemListAdapter: void onContentChanged()> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (4)
<com.android.contacts.ContactsListActivity: void onRestart()> (5)
<com.android.contacts.ContactsListActivity: void onResume()> (5)
<com.android.contacts.SearchResultsActivity: void startQuery()> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.SearchResultsActivity: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.ContactsListActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (4)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean checkProviderState(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.SearchResultsActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onRestart()> (3)
<com.android.contacts.SearchResultsActivity: void onRestart()> (3)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$JoinContactActivity: void onResume()> (3)
<com.android.contacts.SearchResultsActivity: void onResume()> (3)
<com.android.contacts.ContactsListActivity$1: void onChange(boolean)> (1)
<com.android.contacts.ContactsListActivity$ContactsSearchActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.ContactsListActivity$JoinContactActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<com.android.contacts.SearchResultsActivity: boolean access$000(com.android.contacts.ContactsListActivity,boolean)> (1)
<android.content.ContentService: android.content.SyncInfo getCurrentSync()> (2)
<android.content.IContentService$Stub$Proxy: android.content.SyncInfo getCurrentSync()> ()
<android.content.IContentService$Stub: android.content.SyncInfo getCurrentSync()> (2)
<android.content.IContentService: android.content.SyncInfo getCurrentSync()> (1)
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> (5)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<com.android.settings.AccountSyncSettings: boolean onPrepareOptionsMenu(android.view.Menu)> (5)
<com.android.settings.AccountSyncSettings: void onSyncStateUpdated()> (3)
<com.android.settings.ManageAccountsSettings: void onSyncStateUpdated()> (4)
<com.android.settings.AccountPreferenceBase: boolean onPrepareOptionsMenu(android.view.Menu)> (4)
<com.android.settings.AccountSyncSettingsInAddAccount: boolean onPrepareOptionsMenu(android.view.Menu)> (5)
<com.android.settings.AccountPreferenceBase: void onSyncStateUpdated()> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void onSyncStateUpdated()> (2)
<com.android.settings.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (3)
<com.android.settings.ManageAccountsSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.AccountPreferenceBase: void onResume()> (7)
<com.android.settings.AddAccountSettings: void onSyncStateUpdated()> (1)
<com.android.settings.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.AccountSyncSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AccountSyncSettingsInAddAccount: void onResume()> (5)
<com.android.settings.AccountSyncSettings: void onResume()> (4)
<com.android.settings.AddAccountSettings: void onResume()> (4)
<com.android.settings.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.AddAccountSettings: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.AccountPreferenceBase: void onCreate(android.os.Bundle)> (5)
<com.android.settings.AccountSyncSettingsInAddAccount: void onCreate(android.os.Bundle)> (4)
<com.android.settings.AddAccountSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (4)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (3)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
Permission:android.permission.SET_TIME_ZONE
37 Callers:
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> (2)
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> ()
<android.app.IAlarmManager$Stub: void setTimeZone(java.lang.String)> (2)
<android.app.IAlarmManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IAlarmManager: void setTimeZone(java.lang.String)> (1)
<com.android.server.AlarmManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.AlarmManager: void setTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void setTimezoneFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.settings.ZoneList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitz()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitz()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void onChange(boolean)> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.WAKE_LOCK
2789 Callers:
<com.android.server.PowerManagerService: void acquireWakeLock(int,android.os.IBinder,java.lang.String)> (2)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(int,android.os.IBinder,java.lang.String)> ()
<android.os.IPowerManager$Stub: void acquireWakeLock(int,android.os.IBinder,java.lang.String)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void acquireWakeLock(int,android.os.IBinder,java.lang.String)> (2)
<com.android.server.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.PowerManager$WakeLock: void acquire()> (66)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<android.bluetooth.HeadsetBase: void acquireWakeLock()> (1)
<android.bluetooth.ScoSocket: void acquireWakeLock()> (2)
<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$SyncHandler: void runStateIdle()> (5)
<android.media.AsyncPlayer: void acquireWakeLock()> (1)
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> (2)
<android.media.MediaPlayer: void stayAwake(boolean)> (8)
<android.os.PowerManager$WakeLock: void acquire(long)> (10)
<com.android.bluetooth.opp.BluetoothOppObexClientSession$ClientThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void preStart()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.calendar.AlertReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.ExportVCardActivity$ActualExportThread: void run()> (2)
<com.android.contacts.ImportVCardActivity$VCardReadThread: void run()> (2)
<com.android.contacts.ImportVCardActivity$VCardScanThread: void run()> (2)
<com.android.deskclock.AlarmAlertWakeLock: void acquireCpuWakeLock(android.content.Context)> (2)
<com.android.development.Connectivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity$7: void onClick(android.view.View)> (1)
<com.android.exchange.SyncManager: void acquireWakeLock(long)> (1)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.internal.location.GpsLocationProvider: void reportStatus(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void acquireWakeLock()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void acquireWakeLock()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.RIL: void acquireWakeLock()> (1)
<com.android.mms.transaction.SmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void acquireWakeLock()> (1)
<com.android.phone.PhoneApp: void requestWakeState(com.android.phone.PhoneApp$WakeState)> (5)
<com.android.phone.PhoneApp: void updateProximitySensorMode(com.android.internal.telephony.Phone$State)> (8)
<com.android.providers.downloads.DownloadThread: void run()> (3)
<com.android.providers.media.MediaScannerService: void scan(java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService$AlarmThread: void run()> (2)
<com.android.server.am.ActivityManagerService: void pauseIfSleepingLocked()> (4)
<com.android.server.am.ActivityManagerService: void startPausingLocked(boolean,boolean)> (3)
<com.android.server.BackupManagerService$RunBackupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService$RunInitializeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.HeadsetObserver: void update(java.lang.String,int)> (2)
<com.android.server.KeyInputQueue: void addLocked(com.android.server.InputDevice,long,int,int,java.lang.Object)> (4)
<com.android.server.LocationManagerService: void incrementPendingBroadcasts()> (1)
<com.android.server.NotificationPlayer: void acquireWakeLock()> (1)
<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)> (1)
<com.android.server.WifiService: void doUpdateWifiState()> (1)
<com.android.server.WindowManagerService$KeyQ: void setHoldScreenLocked(boolean)> (1)
<com.android.server.WindowManagerService: void startFreezingDisplayLocked()> (3)
<com.android.soundrecorder.SoundRecorder: void onStateChanged(int)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void acquireWakeLock(android.content.Context)> (1)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.GridLayer: void startSlideshow()> (2)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<android.bluetooth.ScoSocket: boolean connect(java.lang.String,java.lang.String)> (3)
<android.bluetooth.ScoSocket: void close()> (3)
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<android.content.SyncManager: void sendSyncAlarmMessage()> (1)
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (4)
<android.media.AsyncPlayer: void enqueueLocked(android.media.AsyncPlayer$Command)> (2)
<com.android.music.MediaPlaybackService$MultiPlayer$3: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void <init>(com.android.music.MediaPlaybackService)> (1)
<android.media.MediaPlayer: boolean resume()> (1)
<android.media.MediaPlayer: boolean suspend()> (1)
<android.media.MediaPlayer: void access$300(android.media.MediaPlayer,boolean)> (1)
<android.media.MediaPlayer: void pause()> (3)
<android.media.MediaPlayer: void release()> (22)
<android.media.MediaPlayer: void reset()> (7)
<android.media.MediaPlayer: void start()> (13)
<android.media.MediaPlayer: void stop()> (14)
<android.bluetooth.ScoSocket: void releaseWakeLock()> (2)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (7)
<com.android.internal.telephony.SMSDispatcher: void handleIccFull()> (3)
<com.android.internal.telephony.SMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (3)
<com.android.mms.transaction.PushReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.phone.BluetoothHandsfree: void expectCallStart()> (2)
<com.android.phone.BluetoothHandsfree: void expectVoiceRecognition()> (1)
<com.android.providers.calendar.CalendarAppWidgetProvider: void performUpdate(android.content.Context,int[],long[],boolean)> (4)
<com.android.settings.bluetooth.DockEventReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppObexClientSession: void start(android.os.Handler)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void createServerSession(javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.calendar.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.ExportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.contacts.ImportVCardActivity: android.app.Dialog onCreateDialog(int)> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.SyncManager: void runAwake(long)> (5)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.internal.location.GpsLocationProvider: void handleDisable()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<android.view.WindowManagerPolicy: int interceptKeyTq(android.view.RawInputEvent,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.cdma.CdmaCallTracker,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.gsm.GsmCallTracker,int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.gsm.GsmCallTracker,com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.RIL: void send(com.android.internal.telephony.RILRequest)> (99)
<com.android.mms.transaction.PrivilegedSmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp: void updateWakeState()> (8)
<com.android.phone.PhoneUtils: void showIncomingCallUi()> (5)
<com.android.phone.PhoneApp: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.PhoneApp: void orientationChanged(int)> (1)
<com.android.phone.PhoneApp: void setBeginningCall(boolean)> (2)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.PhoneApp: void updatePhoneState(com.android.internal.telephony.Phone$State)> (1)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (8)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadService: void insertDownload(android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.providers.media.MediaScannerService: void access$200(com.android.providers.media.MediaScannerService,java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.HeadsetObserver: void init()> (1)
<com.android.server.HeadsetObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.KeyInputQueue: boolean generateVirtualKeyDown(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.KeyInputQueue: boolean monitorVirtualKey(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.KeyInputQueue: void access$400(com.android.server.KeyInputQueue,com.android.server.InputDevice,long,int,int,java.lang.Object)> (2)
<com.android.server.WindowManagerService$KeyQ: void addLocked(com.android.server.InputDevice,long,int,int,java.lang.Object)> (1)
<com.android.server.LocationManagerService: void access$600(com.android.server.LocationManagerService)> (2)
<com.android.server.NotificationPlayer: void enqueueLocked(com.android.server.NotificationPlayer$Command)> (2)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<com.android.server.WifiService: void access$1900(com.android.server.WifiService)> (1)
<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.WindowManagerService: boolean setRotationUncheckedLocked(int,int)> (2)
<com.android.server.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,int)> (2)
<com.android.soundrecorder.Recorder$OnStateChangedListener: void onStateChanged(int)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void onStart()> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.media.HudLayer$12: void run()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (8)
<com.android.phone.BluetoothHandsfree: void audioOff()> (9)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<android.content.SyncManager: void access$700(android.content.SyncManager)> (1)
<android.content.SyncManager: void access$800(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> (2)
<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])> (2)
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> (7)
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> ()
<android.media.AsyncPlayer: void stop()> ()
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<android.widget.VideoView: void resume()> (2)
<android.widget.VideoView: void suspend()> (1)
<android.widget.VideoView: void pause()> (4)
<com.android.mms.ui.SlideView: void pauseAudio()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void pause()> (1)
<android.media.AsyncPlayer$Thread: void run()> (2)
<android.media.AsyncPlayer: void startSound(android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void cleanupPlayer(android.media.MediaPlayer)> (1)
<android.media.Ringtone: void stop()> (6)
<android.tts.TtsService: void cleanUpPlayer()> (2)
<android.widget.VideoView: void release(boolean)> (3)
<android.widget.VideoView: void stopPlayback()> (3)
<com.android.deskclock.AlarmKlaxon$3: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.mms.ui.AudioAttachmentView: void cleanupMediaPlayer()> (1)
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideView$1: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (1)
<com.android.mms.ui.SlideView: void stopAudio()> (2)
<com.android.music.MediaPlaybackService$MultiPlayer: void release()> (1)
<com.android.music.MusicPicker: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MusicPicker: void stopMediaPlayer()> (2)
<com.android.server.NotificationPlayer$CmdThread: void run()> (2)
<com.android.server.NotificationPlayer$CreationAndCompletionThread: void run()> (2)
<com.android.soundrecorder.Recorder: void stopPlayback()> (1)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setDataSourceAsync(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setDataSource(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void stop()> (2)
<android.media.AudioService$AudioHandler: void playSoundEffect(int,int)> (1)
<android.media.Ringtone: void play()> (7)
<android.tts.TtsService: void processSpeechQueue()> (6)
<android.widget.VideoView: void start()> (9)
<com.android.deskclock.AlarmKlaxon: void startAlarm(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void startAudio()> (1)
<com.android.mms.ui.SlideView: void startAudio()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void start()> (1)
<com.android.music.MusicPicker: void setSelected(android.database.Cursor)> (1)
<com.android.soundrecorder.Recorder: void startPlayback()> (1)
<android.tts.TtsService: int stopAll(java.lang.String)> (2)
<android.tts.TtsService: int stop(java.lang.String)> (4)
<android.bluetooth.ScoSocket: void onClosed()> ()
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> (3)
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (3)
<com.android.internal.telephony.WapPushOverSms: void dispatchWapPdu_default(byte[],int,int,java.lang.String,int,int)> (1)
<com.android.internal.telephony.WapPushOverSms: void dispatchWapPdu_MMS(byte[],int,int,int,int)> (1)
<com.android.internal.telephony.WapPushOverSms: void dispatchWapPdu_PushCO(byte[],int,int,int,int)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleIccFull()> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleIccFull()> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHandsfree: void access$4900(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHandsfree: void access$6000(com.android.phone.BluetoothHandsfree)> (1)
<com.android.providers.calendar.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.providers.calendar.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.providers.calendar.CalendarAppWidgetProvider: void providerUpdated(android.content.Context,long)> (1)
<com.android.providers.calendar.CalendarAppWidgetProvider: void timeUpdated(android.content.Context,boolean)> (1)
<com.android.settings.bluetooth.DockEventReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppObexSession: void start(android.os.Handler)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$600(com.android.bluetooth.opp.BluetoothOppService,javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (3)
<com.android.exchange.EasSyncService: void sleep(long,boolean)> (2)
<com.android.exchange.SyncManager: void run()> (1)
<com.android.exchange.SyncManager: void startServiceThread(com.android.exchange.AbstractSyncService,com.android.email.provider.EmailContent$Mailbox)> (2)
<com.android.exchange.SyncManager: void waitForConnectivity()> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.internal.location.GpsLocationProvider: void access$700(com.android.internal.location.GpsLocationProvider)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection checkMtFindNewRinging(com.android.internal.telephony.DriverCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dialThreeWay(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void processNextPostDialChar()> (5)
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (2)
<com.android.internal.telephony.gsm.GsmConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void processNextPostDialChar()> (4)
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void conference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deactivateDataCall(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getBasebandVersion(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCDMASubscription(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCLIR(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCurrentCalls(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDataCallList(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getGPRSRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getGsmBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMSI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastDataCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getMute(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getOperator(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSignalStrength(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendScreenState(boolean)> (2)
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.SmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.AccelerometerListener$OrientationListener: void orientationChanged(int)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: void activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (2)
<com.android.providers.downloads.DownloadService: void access$1200(com.android.providers.downloads.DownloadService,android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.providers.downloads.DownloadService: void access$1500(com.android.providers.downloads.DownloadService,android.database.Cursor,int,boolean,boolean,long)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<com.android.server.HeadsetObserver: void <init>(android.content.Context)> (1)
<com.android.server.KeyInputQueue: boolean access$800(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.WindowManagerService$KeyQ: boolean generateVirtualKeyDown(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.KeyInputQueue: boolean access$700(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (2)
<com.android.server.WindowManagerService$KeyQ: boolean monitorVirtualKey(com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.KeyInputQueue$1: void run()> (1)
<com.android.server.WindowManagerService$KeyQ: void access$400(com.android.server.KeyInputQueue,com.android.server.InputDevice,long,int,int,java.lang.Object)> (1)
<com.android.server.LocationManagerService$ProximityListener: void onLocationChanged(android.location.Location)> (2)
<com.android.server.LocationManagerService$Receiver: void incrementPendingBroadcastsLocked()> (3)
<com.android.server.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> (1)
<com.android.server.NotificationPlayer: void stop()> (3)
<com.android.server.VibratorService: void startNextVibrationLocked()> (3)
<com.android.server.VibratorService: void vibrate(long,android.os.IBinder)> (2)
<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (17)
<com.android.soundrecorder.Recorder: void signalStateChanged(int)> (4)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.content.SyncManager$SyncHandler: void runStateSyncing()> (2)
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$SyncHandler: java.lang.Long scheduleReadyPeriodicSyncs()> (6)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.ISyncAdapter)> (2)
<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceled(android.content.SyncResult)> (3)
<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)> (1)
<android.content.SyncManager: void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)> (5)
<android.widget.VideoView$6: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.cooliris.media.MovieViewControl: void onResume()> (2)
<com.cooliris.media.MovieViewControl: void onPause()> (2)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void pause(android.webkit.HTML5VideoViewProxy)> (2)
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.mms.ui.SlideView: void pauseVideo()> (1)
<com.android.mms.ui.SlideViewInterface: void pauseAudio()> (1)
<com.android.music.MediaPlaybackService: void pause()> (4)
<android.media.AsyncPlayer: void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void access$3400(android.media.AudioService$AudioHandler,android.media.MediaPlayer)> (2)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> (1)
<android.media.RingtoneManager: void stopPreviousRingtone()> (3)
<android.preference.VolumePreference$SeekBarVolumizer: void stopSample()> (3)
<com.android.internal.app.RingtonePickerActivity: void run()> (1)
<com.android.internal.app.RingtonePickerActivity: void stopAnyPlayingRingtone()> (2)
<android.tts.TtsService: void onDestroy()> (1)
<android.widget.VideoView: void access$2100(android.widget.VideoView,boolean)> (1)
<android.widget.VideoView: void openVideo()> (3)
<android.webkit.HTML5VideoViewProxy$VideoPlayer$1: void onCustomViewHidden()> (1)
<com.android.mms.ui.SlideView: void stopVideo()> (2)
<com.cooliris.media.MovieViewControl: void onDestroy()> (2)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.mms.ui.AudioAttachmentView: void stopAudio()> (4)
<com.android.mms.ui.SlideViewInterface: void setVideo(java.lang.String,android.net.Uri)> (2)
<com.android.mms.ui.SlideViewInterface: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (2)
<com.android.mms.ui.SlideViewInterface: void stopAudio()> (1)
<com.android.mms.ui.SlideView: void reset()> (2)
<com.android.music.MediaPlaybackService: void onDestroy()> (1)
<com.android.music.MusicPicker: void onPause()> (2)
<com.android.server.NotificationPlayer: void startSound(com.android.server.NotificationPlayer$Command)> (1)
<com.android.soundrecorder.Recorder: void stop()> (11)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService: void openAsync(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void open(java.lang.String,boolean)> (2)
<com.android.music.MediaPlaybackService: void stop(boolean)> (8)
<android.preference.VolumePreference$SeekBarVolumizer: void sample()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void playSounds(boolean)> (2)
<com.android.server.status.StatusBarPolicy: void showLowBatteryWarning()> (2)
<com.android.server.DockObserver: void update()> (2)
<android.tts.TtsService: boolean synthesizeToFile(java.lang.String,java.lang.String,java.util.ArrayList,java.lang.String)> (1)
<android.tts.TtsService: int playEarcon(java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int playSilence(java.lang.String,long,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int speak(java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: void access$100(android.tts.TtsService)> (3)
<android.tts.TtsService: void onCompletion(android.media.MediaPlayer)> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void play(java.lang.String,int,android.webkit.HTML5VideoViewProxy,android.webkit.WebChromeClient)> (2)
<android.widget.VideoView$2: void onPrepared(android.media.MediaPlayer)> (1)
<android.widget.VideoView$6: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.mms.ui.SlideView: void startVideo()> (1)
<com.cooliris.media.MovieViewControl$3: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.media.MovieViewControl$4: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.media.MovieViewControl: void <init>(android.view.View,android.content.Context,android.net.Uri)> (2)
<com.android.mms.ui.SlideViewInterface: void startAudio()> (1)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.music.MusicPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<android.tts.TtsService: int access$2200(android.tts.TtsService,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPdus(byte[][])> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPdus(byte[][])> (2)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (2)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> (4)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$4800(com.android.phone.BluetoothHandsfree)> (3)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.providers.calendar.CalendarProvider2: void triggerAppWidgetUpdate(long)> (4)
<com.android.providers.calendar.TimeChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startObexSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (2)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (6)
<com.android.exchange.EasOutboxService: void sleep(long,boolean)> (1)
<com.android.exchange.EasSyncService: void runPingLoop()> (2)
<com.android.exchange.SyncManager: long checkMailboxes()> (1)
<com.android.exchange.SyncManager: void requestSync(com.android.email.provider.EmailContent$Mailbox,int,com.android.exchange.Request)> (2)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (7)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: boolean preprocessInputEventTq(android.view.RawInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.server.KeyInputQueue: boolean preprocessEvent(com.android.server.InputDevice,android.view.RawInputEvent)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.Connection: void cancelPostDial()> (4)
<com.android.internal.telephony.Connection: void proceedAfterWaitChar()> (2)
<com.android.internal.telephony.Connection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void onConnectedInOrOut()> (3)
<com.android.internal.telephony.CallTracker: void handlePollCalls(android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmConnection: void access$000(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void onConnectedInOrOut()> (1)
<com.android.internal.telephony.CommandsInterface: void acceptCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void conference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deactivateDataCall(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deactivateDefaultPDP(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void exitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void explicitCallTransfer(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getBasebandVersion(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCDMASubscription(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getCLIR(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCurrentCalls(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDataCallList(android.os.Message)> (3)
<com.android.internal.telephony.RIL: void getPDPContextList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getGPRSRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getGsmBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMSI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getLastDataCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastPdpFailCause(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getMute(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getOperator(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getRegistrationState(android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void getSignalStrength(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void hangupConnection(int,android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void hangupForegroundResumeBackground(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void hangupWaitingOrBackground(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (10)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void queryCallWaiting(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void rejectCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportSmsMemoryStatus(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void resetRadio(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendDtmf(char,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void sendEnvelope(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void access$000(com.android.internal.telephony.RIL,boolean)> (1)
<com.android.internal.telephony.RIL: void onRadioAvailable()> (1)
<com.android.internal.telephony.CommandsInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void separateConnection(int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCallWaiting(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCLIR(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void setMute(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setRadioPower(boolean,android.os.Message)> (8)
<com.android.internal.telephony.RIL: void setRadioStateFromRILInt(int)> (1)
<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setSuppServiceNotifications(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setupDefaultPDP(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void startDtmf(char,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void stopDtmf(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.AccelerometerListener: void setOrientation(int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.PhoneUtils: int placeCall(com.android.internal.telephony.Phone,java.lang.String,android.net.Uri)> (2)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.PackageManagerService$5: void run()> (1)
<com.android.server.WindowManagerService$KeyQ: boolean access$800(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<com.android.server.WindowManagerService$KeyQ: boolean access$700(com.android.server.KeyInputQueue,com.android.server.InputDevice,android.view.RawInputEvent,long,long)> (1)
<android.location.ILocationListener$Stub$Proxy: void onLocationChanged(android.location.Location)> ()
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> (1)
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> (1)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(long,android.os.IBinder)> (2)
<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.WindowManagerService: void access$2000(com.android.server.WindowManagerService)> (5)
<com.android.server.WindowManagerService: void moveAppWindowsLocked(com.android.server.WindowManagerService$AppWindowToken,int,boolean)> (1)
<com.android.server.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.WindowManagerService: void removeWindowInnerLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)> (2)
<com.android.server.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.WindowManagerService$WindowState,float,float,float,float)> (1)
<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)> (6)
<com.android.soundrecorder.Recorder: void clear()> (1)
<com.android.soundrecorder.Recorder: void delete()> (3)
<com.android.soundrecorder.Recorder: void restoreState(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void setState(int)> (4)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$500(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition()> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int,int,int)> (4)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager: void sendCheckAlarmsMessage()> (3)
<android.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$6: void onServiceChanged(android.content.SyncAdapterType,boolean)> (1)
<android.content.SyncManager: void scheduleLocalSync(android.accounts.Account,java.lang.String)> (1)
<com.cooliris.media.MovieView$1: void onResume()> (1)
<com.cooliris.media.MovieView: void onResume()> (1)
<com.cooliris.media.MovieView$1: void onPause()> (1)
<com.cooliris.media.MovieView: void onPause()> (1)
<android.webkit.HTML5VideoViewProxy: void pause()> ()
<com.android.mms.ui.SlideViewInterface: void pauseVideo()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentAudio(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel,boolean)> (2)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$3: void onAudioFocusChange(int)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<android.media.AudioService$AudioHandler$1: void onCompletion(android.media.MediaPlayer)> (1)
<android.media.AudioService$AudioHandler$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.internal.app.RingtonePickerActivity: void onClick(android.content.DialogInterface,int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void stop()> (2)
<android.preference.VolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (2)
<com.android.settings.RingerVolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (1)
<com.android.internal.app.RingtonePickerActivity: void onPause()> (2)
<com.android.internal.app.RingtonePickerActivity: void onStop()> (2)
<android.widget.VideoView$6: void surfaceDestroyed(android.view.SurfaceHolder)> (1)
<android.widget.VideoView: void access$2000(android.widget.VideoView)> (1)
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)> (2)
<com.android.mms.ui.SlideViewInterface: void stopVideo()> (1)
<com.cooliris.media.MovieView$1: void onDestroy()> (1)
<com.cooliris.media.MovieView: void onDestroy()> (1)
<com.android.mms.ui.AudioAttachmentView$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void onPlaybackError()> (1)
<com.android.mms.ui.AudioAttachmentView: void reset()> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.SlideshowPresenter: void presentVideo(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel,com.android.mms.model.RegionModel,boolean)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentAudioThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel)> (1)
<com.android.mms.ui.SlideViewInterface: void reset()> (3)
<com.android.mms.ui.ViewInterface: void reset()> ()
<com.android.server.NotificationPlayer: void access$500(com.android.server.NotificationPlayer,com.android.server.NotificationPlayer$Command)> (1)
<com.android.soundrecorder.Recorder: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.soundrecorder.Recorder: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.soundrecorder.SoundRecorder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.soundrecorder.SoundRecorder: void onPause()> (1)
<com.android.soundrecorder.SoundRecorder: void onStop()> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimeRemaining()> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void openFileAsync(java.lang.String)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void openFile(java.lang.String,boolean)> (2)
<com.android.music.MediaPlaybackService: void openCurrent()> (9)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void next(boolean)> (6)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void stop()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void changeVolumeBy(int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.server.status.StatusBarPolicy: void onBatteryLow(android.content.Intent)> (1)
<com.android.server.status.StatusBarPolicy: void updateCallState(int)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<android.tts.TtsService: boolean access$3100(android.tts.TtsService,java.lang.String,java.lang.String,java.util.ArrayList,java.lang.String)> (1)
<android.tts.TtsService: int access$2000(android.tts.TtsService,java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int access$2100(android.tts.TtsService,java.lang.String,long,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int access$1900(android.tts.TtsService,java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService$1SilenceThread: void run()> (1)
<android.tts.TtsService$1SynthThread: void run()> (1)
<android.tts.TtsService$2SynthThread: void run()> (1)
<android.webkit.HTML5VideoViewProxy: void play(java.lang.String)> ()
<com.android.mms.ui.SlideViewInterface: void startVideo()> (1)
<com.cooliris.media.MovieView$1: void <init>(android.view.View,android.content.Context,android.net.Uri)> (1)
<com.cooliris.media.MovieView$1: void <init>(com.cooliris.media.MovieView,android.view.View,android.content.Context,android.net.Uri)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<android.tts.TtsService$1: int stop(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteEventInternal(long,boolean,boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void access$600(com.android.bluetooth.opp.BluetoothOppTransfer)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (3)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,byte[])> (7)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendPing(byte[],int)> (2)
<com.android.exchange.EasSyncService: void getAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void runPingLoop()> (1)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.SyncManager: com.android.exchange.AbstractSyncService startManualSync(long,int,com.android.exchange.Request)> (4)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (5)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (9)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void wakeWhenReadyTq(int)> (7)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.WindowManagerService$1: void acquired()> (1)
<com.android.server.WindowManagerService$1: void released()> (1)
<com.android.server.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.phone.InCallScreen$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$8: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void acceptCall()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void acceptCall()> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmMmiCode: void cancel()> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void processCode()> (2)
<com.android.internal.telephony.IccCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void conference()> (1)
<com.android.internal.telephony.DataConnection: void tearDownData(java.lang.Object)> (3)
<com.android.internal.telephony.CommandsInterface: void deactivateDefaultPDP(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void exitEmergencyCallbackMode()> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void explicitCallTransfer()> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void explicitCallTransfer()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void getCellBroadcastSmsConfig(android.os.Message)> (2)
<com.android.internal.telephony.cdma.RuimRecords: void onRuimReady()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getOutgoingCallerIdDisplay(android.os.Message)> ()
<com.android.internal.telephony.CallTracker: void pollCallsWhenSafe()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2: void run()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getPDPContextList(android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.SIMRecords: void fetchSimRecords()> (4)
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> (3)
<com.android.internal.telephony.ServiceStateTracker: void reRegisterNetwork(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> (3)
<com.android.internal.telephony.gsm.stk.StkService: void handleCmdResponse(com.android.internal.telephony.gsm.stk.StkResponseMessage)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupAllConnections(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupAllConnections(com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmConnection)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupWaitingOrBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmCall)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupWaitingOrBackground()> (2)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (5)
<com.android.internal.telephony.IccFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (2)
<com.android.internal.telephony.IccFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.IccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (8)
<com.android.internal.telephony.IccFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (6)
<com.android.internal.telephony.IccFileHandler: void loadEFTransparent(int,android.os.Message)> (5)
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (7)
<com.android.internal.telephony.IccFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (4)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (3)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (3)
<com.android.internal.telephony.PhoneBase: void queryAvailableBandMode(android.os.Message)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void rejectCall()> (2)
<com.android.internal.telephony.SMSDispatcher$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.gsm.stk.StkService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void flashAndSetGenericTrue()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void switchWaitingOrHoldingAndActive()> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> ()
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> ()
<com.android.internal.telephony.gsm.stk.StkService: void eventDownload(int,int,int,byte[],boolean)> ()
<com.android.internal.telephony.gsm.stk.StkService: void sendMenuSelection(int,boolean)> (1)
<com.android.internal.telephony.RIL$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.BaseCommands: void onRadioAvailable()> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.gsm.stk.StkService: void sendTerminalResponse(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.ResultCode,boolean,int,com.android.internal.telephony.gsm.stk.ResponseData)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void separate(com.android.internal.telephony.cdma.CdmaConnection)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void separate(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void activateCellBroadcastSms(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void setCellBroadcastConfig(int[],android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (3)
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void syncClirSetting()> (1)
<com.android.internal.telephony.IccCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.ServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.ServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.ServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.ServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void selectNetworkManually(com.android.internal.telephony.gsm.NetworkInfo,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRestartRadio()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.cdma.RuimRecords: void handleRuimRefresh(int[])> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void powerOffRadioSafely()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.gsm.SIMRecords: void handleSimRefresh(int[])> (1)
<com.android.internal.telephony.RIL: void processUnsolicited(android.os.Parcel)> (1)
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)> ()
<com.android.internal.telephony.gsm.GSMPhone: void unregisterForSuppServiceNotification(android.os.Handler)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.CommandsInterface: void setupDefaultPDP(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> ()
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void stopDtmf()> ()
<com.android.internal.telephony.gsm.GSMPhone: void stopDtmf()> ()
<com.android.internal.telephony.IccCard: void supplyPin2(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccCard: void supplyPin(java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.IccCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()> (5)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.AccelerometerListener: void onSensorEvent(double,double,double)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.providers.downloads.DownloadService: void updateFromProvider()> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.server.PowerManagerService$3: void run()> (1)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)> (1)
<com.android.server.VibratorService$1: void run()> (1)
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(long,android.os.IBinder)> (1)
<com.android.server.WindowManagerService: void prepareAppTransition(int)> (7)
<com.android.server.WindowManagerService: void requestAnimationLocked(long)> (4)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.HistoryRecord)> (5)
<com.android.soundrecorder.SoundRecorder$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.soundrecorder.SoundRecorder: void onCreate(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void stopRecording()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: void access$1900(com.android.phone.BluetoothHeadsetService,int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect()> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int,int)> (2)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager: void access$100(android.content.SyncManager)> (3)
<android.content.SyncManager$6: void onServiceChanged(java.lang.Object,boolean)> (1)
<com.android.mms.ui.SlideshowPresenter$5: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<android.preference.VolumePreference: void cleanup()> (2)
<com.android.settings.RingerVolumePreference: void cleanup()> (3)
<com.android.internal.app.AlertActivity: void onPause()> (4)
<com.android.internal.app.AlertActivity: void onStop()> (2)
<android.widget.VideoView: void setVideoURI(android.net.Uri)> (3)
<com.android.mms.ui.AudioAttachmentView: void access$000(com.android.mms.ui.AudioAttachmentView)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.SlideshowPresenter: void presentRegionMedia(com.android.mms.ui.SlideViewInterface,com.android.mms.model.RegionMediaModel,boolean)> (2)
<com.android.soundrecorder.SoundRecorder: void updateTimerView()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFileAsync(java.lang.String)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFileAsync(java.lang.String)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFile(java.lang.String,boolean)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFile(java.lang.String,boolean)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void stop()> (2)
<android.preference.VolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (2)
<com.android.server.status.StatusBarPolicy: void access$700(com.android.server.status.StatusBarPolicy,android.content.Intent)> (1)
<com.android.server.status.StatusBarPolicy: void access$2100(com.android.server.status.StatusBarPolicy,int)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<android.tts.TtsService$1: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<android.tts.TtsService$1: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<android.tts.TtsService$1: int playSilence(java.lang.String,long,int,java.lang.String[])> (2)
<android.tts.TtsService$1: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<android.speech.tts.ITts$Stub$Proxy: int stop(java.lang.String)> ()
<android.speech.tts.ITts$Stub: int stop(java.lang.String)> (2)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleSms(byte[])> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleSmses(java.util.ArrayList)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,byte[])> (1)
<com.android.exchange.EasSyncService: com.android.exchange.adapter.ProvisionParser canProvision()> (3)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String)> (2)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvisionImpl(java.lang.String,java.lang.String,boolean)> (3)
<com.android.exchange.EasSyncService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (2)
<com.android.exchange.EasSyncService: void validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendPing(byte[],int)> (1)
<com.android.exchange.EasOutboxService: void getAttachment(com.android.exchange.PartRequest)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.EasSyncService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (2)
<com.android.exchange.SyncManager$2: void startSync(long)> (2)
<com.android.exchange.SyncManager: void sendMessageRequest(com.android.exchange.Request)> (2)
<com.android.exchange.SyncManager: void serviceRequest(long,long,int)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuDoesntGoToUnlockScreenOnWakeWhenPukLocked()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testMenuGoesToLockScreenWhenDeviceNotSecure()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testScreenRequestsRecreation()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByMenuKeyWhenPatternSet()> ()
<com.android.internal.policy.impl.LockPatternKeyguardViewTest: void testWokenByNonMenuKey()> ()
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.WindowManagerService: void systemReady()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void acceptCall()> ()
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void acceptCall()> ()
<com.android.internal.telephony.SMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.internal.telephony.MmiCode: void cancel()> (2)
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.phone.ChangeIccPinScreen$2: void onClick(android.view.View)> (1)
<com.android.phone.FdnSetting: void updatePINChangeState(boolean)> (1)
<com.android.internal.telephony.cdma.RuimCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.settings.IccLockSettings: void tryChangePin()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void conference()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.DataConnection: void access$1300(com.android.internal.telephony.DataConnection,java.lang.Object)> (4)
<com.android.internal.telephony.gsm.GsmDataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.cdma.CDMAPhone$1: void run()> (1)
<com.android.internal.telephony.PhoneBase: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void explicitCallTransfer()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getCellBroadcastSmsConfig(android.os.Message)> ()
<com.android.internal.telephony.SMSDispatcher: void getCellBroadcastSmsConfig(android.os.Message)> ()
<com.android.internal.telephony.CallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPdpStateChanged(android.os.AsyncResult,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (3)
<com.android.internal.telephony.gsm.SIMRecords: void handleFileUpdate(int)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.gsm.SIMRecords: void onSimReady()> (1)
<com.android.internal.util.HierarchicalState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getPreferredNetworkType(android.os.Message)> (7)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void reRegisterNetwork(android.os.Message)> (3)
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.AdnRecordLoader: void updateEF(com.android.internal.telephony.AdnRecord,int,int,int,java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.cdma.RuimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.gsm.SIMFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (3)
<com.android.internal.telephony.AdnRecordLoader: void loadAllFromEF(int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readEmailFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readIapFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readPbrFileAndWait()> (1)
<com.android.internal.telephony.AdnRecordLoader: void loadFromEF(int,int,int,android.os.Message)> (3)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void fetchRuimRecords()> (3)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void getSpnFsm(boolean,android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.RuimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)> (5)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.cdma.RuimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryCdmaRoamingPreference(android.os.Message)> (3)
<com.android.internal.telephony.PhoneBase: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void rejectCall()> ()
<com.android.internal.telephony.gsm.GSMPhone: void rejectCall()> ()
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)> (2)
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void conference()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void switchHoldingAndActive()> ()
<com.android.internal.telephony.SMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.BaseCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (2)
<com.android.internal.telephony.test.SimulatedCommands: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartTextWithPermit(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.gsm.stk.StkService: void handleProactiveCommand(com.android.internal.telephony.gsm.stk.CommandParams)> (1)
<com.android.internal.telephony.gsm.stk.StkService: void handleRilMsg(com.android.internal.telephony.gsm.stk.RilMessage)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaConnection: void separate()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void separate()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void activateCellBroadcastSms(int,android.os.Message)> ()
<com.android.internal.telephony.SMSDispatcher: void activateCellBroadcastSms(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> ()
<com.android.internal.telephony.SMSDispatcher: void setCellBroadcastConfig(int[],android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaRoamingPreference(int,android.os.Message)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.phone.EnableFdnScreen: void enableFdn()> (1)
<com.android.phone.FdnSetting: void toggleFDNEnable(boolean)> (1)
<com.android.internal.telephony.cdma.RuimCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.phone.EnableIccPinScreen: void enableIccPin()> (1)
<com.android.settings.IccLockSettings: void tryChangeIccLockState()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)> (5)
<com.android.internal.telephony.PhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void powerOffRadioSafely()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void restartRadio()> (1)
<com.android.internal.telephony.ServiceStateTracker: void powerOffRadioSafely()> ()
<com.android.internal.telephony.RIL: void processResponse(android.os.Parcel)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> (2)
<com.android.internal.telephony.DataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.phone.IccPinUnlockPanel$3: void onClick(android.view.View)> (1)
<com.android.phone.PhoneInterfaceManager$CheckSimPin: boolean checkPin(java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.phone.IccNetworkDepersonalizationPanel$3: void onClick(android.view.View)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void switchHoldingAndActive()> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.AccelerometerListener: void access$000(com.android.phone.AccelerometerListener,double,double,double)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadService: void access$000(com.android.providers.downloads.DownloadService)> (2)
<com.android.providers.downloads.DownloadService: void onCreate()> (1)
<com.android.providers.downloads.DownloadService: void onStart(android.content.Intent,int)> (1)
<com.android.server.LocationManagerService: void access$1700(com.android.server.LocationManagerService,android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (6)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.Vibrator: void vibrate(long)> (10)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int)> (2)
<com.android.server.am.ActivityManagerService: boolean moveTaskToBackLocked(int,com.android.server.am.HistoryRecord)> (2)
<com.android.server.am.ActivityManagerService: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.HistoryRecord)> (2)
<com.android.server.WindowManagerService$WindowState: boolean hideLw(boolean,boolean)> (2)
<com.android.server.WindowManagerService$WindowState: boolean showLw(boolean,boolean)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.Phone)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition()> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHeadsetService$6: void disconnectHeadset()> (2)
<com.android.phone.BluetoothHeadsetService: boolean doNextAutoConnect()> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService)> (3)
<com.android.phone.BluetoothHeadsetService: void access$1200(com.android.phone.BluetoothHeadsetService,int,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int)> (2)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$7: void onStatusChanged(int)> (2)
<com.android.mms.ui.SlideshowPresenter$2: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void present()> (2)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<android.preference.VolumePreference: void onActivityStop()> (2)
<android.preference.VolumePreference: void onDialogClosed(boolean)> (2)
<com.android.settings.RingerVolumePreference: void onActivityStop()> (1)
<com.android.settings.RingerVolumePreference: void onDialogClosed(boolean)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onPause()> (2)
<com.android.internal.app.NetInitiatedActivity: void onPause()> (2)
<android.widget.VideoView: void setVideoPath(java.lang.String)> ()
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.AudioAttachmentView$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void present()> (1)
<com.android.mms.ui.SlideshowPresenter$4: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$000(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void updateUi()> (5)
<com.android.music.IMediaPlaybackService: void openFileAsync(java.lang.String)> (1)
<com.android.music.IMediaPlaybackService: void openFile(java.lang.String,boolean)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService: void access$1700(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void stop()> ()
<com.android.music.IMediaPlaybackService$Stub: void stop()> (2)
<com.android.settings.RingerVolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.server.status.StatusBarPolicy$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.status.StatusBarPolicy$4: void onCallStateChanged(int,java.lang.String)> (1)
<android.speech.tts.ITts$Stub$Proxy: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> ()
<android.speech.tts.ITts$Stub: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<android.speech.tts.ITts$Stub$Proxy: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<android.speech.tts.ITts$Stub$Proxy: int playSilence(java.lang.String,long,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int playSilence(java.lang.String,long,int,java.lang.String[])> (2)
<android.speech.tts.ITts$Stub$Proxy: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<com.android.music.IMediaPlaybackService: void play()> (5)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<android.speech.tts.ITts: int stop(java.lang.String)> (1)
<android.speech.tts.ITts$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.exchange.EasOutboxService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (1)
<com.android.exchange.SyncManager$2: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.adapter.ProvisionParser canProvision()> (1)
<com.android.exchange.EasSyncService: boolean tryProvision()> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String)> (1)
<com.android.exchange.provider.ExchangeProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvisionImpl(java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvision(java.lang.String,java.lang.String)> (3)
<com.android.exchange.EasSyncService: void acknowledgeRemoteWipe(java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.exchange.AbstractSyncService: void validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.EasOutboxService: void validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (1)
<com.android.email.service.IEmailService$Stub$Proxy: void startSync(long)> ()
<com.android.email.service.IEmailService$Stub: void startSync(long)> (2)
<com.android.exchange.SyncManager$2: void loadAttachment(long,java.lang.String,java.lang.String)> (2)
<com.android.exchange.SyncManager$2: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.SyncManager: void serviceRequest(long,int)> (3)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$MockUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleInCallMmiCommands(java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.phone.PhoneUtils$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.PhoneUtils: boolean cancelMmiCode(com.android.internal.telephony.Phone)> (2)
<com.android.phone.FdnSetting: void onPinEntered(com.android.phone.EditPinPreference,boolean)> (1)
<com.android.settings.IccLockSettings: void onPinEntered(com.android.settings.EditPinPreference,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void access$1300(com.android.internal.telephony.DataConnection,java.lang.Object)> (1)
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void access$1300(com.android.internal.telephony.DataConnection,java.lang.Object)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.Phone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleEctIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startPeriodicPdpPoll()> ()
<com.android.internal.telephony.IccRecords: void onRefresh(boolean,int[])> ()
<com.android.internal.util.HierarchicalStateMachine$HsmHandler: void processMsg(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings: void onResume()> (3)
<com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.settings.RadioInfo: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getEnhancedVoicePrivacy(android.os.Message)> (3)
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> (1)
<com.android.settings.RadioInfo: void refreshSmsc()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.Connection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (2)
<com.android.internal.telephony.Call: void hangup()> (2)
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.gsm.stk.IconLoader: void readId()> (1)
<com.android.internal.telephony.gsm.stk.IconLoader: void readClut()> (1)
<com.android.internal.telephony.gsm.stk.IconLoader: void readIconData()> (1)
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void onQueryCfComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updateMessageWaitingIndicator(boolean)> (1)
<com.android.internal.telephony.IccRecords: void setVoiceMessageWaiting(int,int)> ()
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.settings.BandMode: void loadBandList()> (1)
<com.android.internal.telephony.PhoneProxy: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void handleSetCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaRoamingListPreference: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.telephony.gsm.GSMPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.stk.StkService: com.android.internal.telephony.gsm.stk.AppInterface getInstance()> ()
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.RIL: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (6)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.Connection: void separate()> (1)
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> (1)
<com.android.settings.BandMode$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void resetCdmaRoamingModeToDefault()> (1)
<com.android.phone.CdmaRoamingListPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.phone.EnableFdnScreen: void access$300(com.android.phone.EnableFdnScreen)> (1)
<com.android.phone.EnableIccPinScreen: void access$300(com.android.phone.EnableIccPinScreen)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void disableLocationUpdates()> ()
<com.android.internal.telephony.gsm.GSMPhone: void disableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void enableLocationUpdates()> ()
<com.android.internal.telephony.gsm.GSMPhone: void enableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void updateServiceLocation()> ()
<com.android.internal.telephony.gsm.GSMPhone: void updateServiceLocation()> ()
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.phone.Settings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.Settings$MyHandler: void resetNetworkModeToDefault()> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void onClick()> (2)
<com.android.settings.RadioInfo$19: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$2: void run()> (1)
<com.android.internal.telephony.DataConnectionTracker: void restartRadio()> ()
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.RIL: void access$300(com.android.internal.telephony.RIL,android.os.Parcel)> (1)
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.settings.RadioInfo$17: void onClick(android.view.View)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setTTYMode(int,android.os.Message)> (4)
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.AccelerometerListener$1: void onSensorChanged(android.hardware.SensorEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.downloads.DownloadService$DownloadManagerContentObserver: void onChange(boolean)> (1)
<com.android.providers.downloads.DownloadService$MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.LocationManagerService: void access$800(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void _loadProvidersLocked()> (1)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (5)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,int,int,int,int,com.android.launcher2.DragSource,java.lang.Object,int)> (2)
<com.android.phone.Ringer$VibratorThread: void run()> (2)
<com.android.server.status.StatusBarService: void vibrate()> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity: int playSound(int)> (1)
<com.android.voicedialer.VoiceDialerActivity: int playSound(int)> (1)
<android.view.IWindowManager: void prepareAppTransition(int)> ()
<com.android.server.WindowManagerService$WindowState: boolean hideLw(boolean)> (1)
<com.android.server.WindowManagerService$WindowState: boolean showLw(boolean)> (1)
<com.android.server.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void disconnectHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: void disconnectHeadset()> (3)
<com.android.phone.BluetoothHeadsetService: boolean access$2400(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$600(com.android.phone.BluetoothHeadsetService,int)> (2)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.mms.ui.Presenter: void present()> (3)
<com.android.mms.ui.SlideEditorActivity: void showCurrentSlide()> (3)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<com.android.soundrecorder.SoundRecorder$1: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$100(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.music.StreamStarter$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void stop()> (4)
<android.speech.tts.ITts: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (1)
<android.speech.tts.ITts: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (1)
<android.speech.tts.ITts: int playSilence(java.lang.String,long,int,java.lang.String[])> (1)
<android.speech.tts.ITts: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (1)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.music.StreamStarter$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<android.speech.tts.TextToSpeech: int stop()> (1)
<android.tts.TtsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.email.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> ()
<com.android.email.service.IEmailService$Stub: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: boolean tryProvision()> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvision(java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void acknowledgeRemoteWipe(java.lang.String)> (1)
<com.android.exchange.AbstractSyncService: void validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (3)
<com.android.email.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.IEmailService: void startSync(long)> (3)
<com.android.email.service.IEmailService$Stub$Proxy: void loadAttachment(long,java.lang.String,java.lang.String)> ()
<com.android.email.service.IEmailService$Stub: void loadAttachment(long,java.lang.String,java.lang.String)> (2)
<com.android.email.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.email.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void handleReceive(android.content.Context)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<com.android.phone.EditPinPreference$OnPinEnteredListener: void onPinEntered(com.android.phone.EditPinPreference,boolean)> (1)
<com.android.settings.EditPinPreference$OnPinEnteredListener: void onPinEntered(com.android.settings.EditPinPreference,boolean)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneProxy: void exitEmergencyCallbackMode()> (1)
<com.android.phone.EmergencyCallbackModeExitDialog$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void runPingTest()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleSetVPResponse(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.settings.RadioInfo: void access$3400(com.android.settings.RadioInfo)> (1)
<com.android.internal.telephony.PhoneBase: void dispose()> (2)
<com.android.phone.PhoneUtils: void hangup(com.android.internal.telephony.Connection)> (2)
<com.android.internal.telephony.Call: void hangupIfAlive()> (2)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Call)> (4)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.gsm.stk.IconLoader: void startLoadingIcon(int)> (3)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readAdnFileAndWait(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf()> (1)
<com.android.settings.BandMode: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CdmaRoamingListPreference: void <init>(android.content.Context)> (3)
<com.android.internal.telephony.PhoneProxy: void queryTTYMode(android.os.Message)> (1)
<com.android.phone.PhoneApp: void handleSetTTYModeResponse(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void sendShortDtmfToNetwork(char)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (4)
<com.android.internal.telephony.RIL$RILReceiver: void run()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void <init>()> ()
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void shutdown()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.phone.PhoneUtils: void separateCall(com.android.internal.telephony.Connection)> (1)
<com.android.phone.CdmaRoamingListPreference$MyHandler: void handleQueryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.EnableFdnScreen$3: void onClick(android.view.View)> (1)
<com.android.phone.EnableIccPinScreen$3: void onClick(android.view.View)> (1)
<com.android.phone.Settings$MyHandler: void handleGetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void onClick()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean supplyPin(java.lang.String)> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.server.LocationManagerService$SettingsObserver: void update(java.util.Observable,java.lang.Object)> ()
<com.android.server.LocationManagerService: void loadProvidersLocked()> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (1)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void keyFeedbackFromInput(android.view.KeyEvent)> (1)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.AllApps3D: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int)> (3)
<com.android.phone.Ringer: void ring()> (3)
<com.android.server.status.StatusBarService$6: void run()> (1)
<com.android.server.status.StatusBarService$7: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: int access$500(com.android.voicedialer.BluetoothVoiceDialerActivity,int)> (1)
<com.android.voicedialer.VoiceDialerActivity: int access$1000(com.android.voicedialer.VoiceDialerActivity,int)> (4)
<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)> (1)
<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity$1: void onServiceConnected()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void onStop()> (1)
<android.bluetooth.IBluetoothHeadset: void disconnectHeadset()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadset(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (3)
<com.android.mms.ui.AttachmentEditor: void update(com.android.mms.data.WorkingMessage)> (5)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.SlideEditorActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.SlideEditorActivity: void access$400(com.android.mms.ui.SlideEditorActivity)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.MediaPlaybackActivity: void access$800(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$1100(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackActivity$8: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void scanForward(int,long)> (3)
<com.android.music.MediaPlaybackActivity: void scanBackward(int,long)> (3)
<com.android.music.TrackBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MediaPickerActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void onStop()> (1)
<com.android.music.StreamStarter: void onPause()> (1)
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)> ()
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)> (7)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int,boolean)> (3)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int)> (7)
<com.android.music.MusicUtils: void playPlaylist(android.content.Context,long)> (2)
<com.android.music.MusicUtils: void addToCurrentPlaylist(android.content.Context,long[])> (3)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<com.android.music.MusicBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void togglePartyShuffle()> (5)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.email.service.IEmailService: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.EasSyncService: void validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.SyncManager$2: int validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.exchange.SyncManager$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.Controller: void sendPendingMessages(long,com.android.email.Controller$Result)> (1)
<com.android.email.Controller: void updateMailbox(long,long,com.android.email.Controller$Result)> (2)
<com.android.email.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.service.IEmailService: void loadAttachment(long,java.lang.String,java.lang.String)> (2)
<com.android.email.service.IEmailService: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void access$000(com.android.exchange.EmailSyncAlarmReceiver,android.content.Context)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$1: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (2)
<com.android.server.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState,int,int,boolean,int,int)> (1)
<com.android.phone.EditPinPreference: void onDialogClosed(boolean)> (2)
<com.android.settings.EditPinPreference: void onDialogClosed(boolean)> (2)
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void access$3200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.settings.RadioInfo$18: void onClick(android.view.View)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.ManageConferenceUtils: void endConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.gsm.GsmCall: void hangupIfAlive()> (2)
<com.android.phone.PhoneUtils: boolean hangupActiveCall(com.android.internal.telephony.Phone)> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Phone)> (6)
<com.android.phone.PhoneUtils: boolean hangupHoldingCall(com.android.internal.telephony.Phone)> (3)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Phone)> (7)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.stk.IconLoader: void loadIcon(int,android.os.Message)> (8)
<com.android.internal.telephony.gsm.stk.IconLoader: void loadIcons(int[],android.os.Message)> (2)
<com.android.internal.telephony.gsm.stk.IconLoader: void postIcon()> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<com.android.phone.PhoneApp: void access$900(com.android.phone.PhoneApp,android.os.Message)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void handleBurstDtmfConfirmation()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void startToneCdma(char)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.test.SimulatedRadioControl: void shutdown()> ()
<com.android.phone.ManageConferenceUtils: void separateConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> ()
<com.android.internal.telephony.ITelephony: boolean supplyPin(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.server.LocationManagerService: void loadProviders()> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (1)
<android.view.WindowManagerPolicy: boolean detectSafeMode()> (1)
<android.view.WindowManagerPolicy: void keyFeedbackFromInput(android.view.KeyEvent)> (1)
<com.android.launcher2.AllApps2D: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Folder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.launcher2.Workspace: void startDrag(com.android.launcher2.CellLayout$CellInfo)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$ErrorRunnable: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$4: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int finishAnimationLw()> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadset()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void autoConnectHeadset()> (1)
<com.android.mms.ui.ComposeMessageActivity$14: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.SlideEditorActivity$2: void onClick(android.view.View)> (1)
<com.android.mms.ui.SlideEditorActivity$6: void onClick(android.view.View)> (1)
<com.android.mms.ui.SlideEditorActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$6: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$11: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void deleteTracks(android.content.Context,long[])> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void makeNowPlayingCursor()> (2)
<com.android.music.MusicUtils: void clearQueue()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean removeItem(int)> (2)
<com.android.music.MediaPlaybackActivity: void access$1000(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void access$900(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.settings.TextToSpeechSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity$ChoiceRecognizerClient: void onRecognitionSuccess(android.content.Intent[])> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$CommandRecognizerClient$3: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$GreetingRunnable: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void speakChoices()> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int)> (2)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor)> (1)
<com.android.music.MusicUtils: void shuffleAll(android.content.Context,android.database.Cursor)> (3)
<com.android.music.AlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.PlaylistBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: void playPodcasts()> (2)
<com.android.music.PlaylistBrowserActivity: void playRecentlyAdded()> (2)
<com.android.music.QueryBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.QueryBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.MediaPlaybackActivity: void access$700(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$600(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.AlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.service.EmailServiceProxy$5: void run()> (1)
<com.android.email.service.IEmailService$Stub$Proxy: int validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> ()
<com.android.email.service.IEmailService$Stub: int validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.email.activity.MessageList: void onSendPendingMessages()> (1)
<com.android.email.activity.MailboxList: void onRefresh(long)> (2)
<com.android.email.activity.MessageList: void onRefresh()> (3)
<com.android.email.Controller: void loadAttachment(long,long,long,long,com.android.email.Controller$Result)> (2)
<com.android.email.service.EmailServiceProxy$1: void run()> (1)
<com.android.email.Controller: void sendMeetingResponse(long,int,com.android.email.Controller$Result)> (1)
<com.android.email.service.EmailServiceProxy$10: void run()> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver$1: void run()> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardViewTest$TestableLockPatternKeyguardView: void verifyUnlock()> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object findTargetWindow(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,int,int)> (1)
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2$1: void run()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context)> (2)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.ManageConferenceUtils$1: void onClick(android.view.View)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.Phone)> (5)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processDisplayText(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processEventNotify(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processGetInkey(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processGetInput(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processLaunchBrowser(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processPlayTone(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processSelectItem(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processSetUpIdleModeText(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: boolean processSetupCall(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getAllMessagesFromIcc()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void startTone(char)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.phone.ManageConferenceUtils$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void run()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.server.LocationManagerService: void initialize()> (1)
<com.android.server.WindowManagerService: boolean detectSafeMode()> (1)
<com.android.server.WindowManagerService: void virtualKeyFeedback(android.view.KeyEvent)> (1)
<com.android.launcher2.UserFolder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.voicedialer.RecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<android.view.WindowManagerPolicy: int finishAnimationLw()> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients()> (3)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void access$2200(com.android.phone.BluetoothHeadsetService)> (2)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<com.android.music.DeleteItems$2: void onClick(android.view.View)> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean requery()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void <init>(com.android.music.TrackBrowserActivity,com.android.music.IMediaPlaybackService,java.lang.String[])> (2)
<com.android.music.TrackBrowserActivity: void removeItem()> (1)
<com.android.music.TrackBrowserActivity: void removePlaylistItem(int)> (2)
<com.android.music.MediaPlaybackActivity$10: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.MediaPlaybackActivity$9: void onRepeat(android.view.View,long,int)> (1)
<com.android.voicedialer.RecognizerClient: void onRecognitionSuccess(android.content.Intent[])> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void access$2200(com.android.voicedialer.BluetoothVoiceDialerActivity)> (2)
<com.android.music.PlaylistBrowserActivity: void access$100(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.PlaylistBrowserActivity: void access$000(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.MediaPlaybackActivity$5: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$4: void onClick(android.view.View)> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (4)
<com.android.email.service.IEmailService: int validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.email.activity.MessageList: void doFooterClick()> (1)
<com.android.email.activity.MailboxList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MailboxList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageList: void autoRefreshStaleMailbox()> (2)
<com.android.email.activity.MessageView: void onDownloadAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.activity.MessageView: void onViewAttachment(com.android.email.activity.MessageView$AttachmentInfo)> (1)
<com.android.email.activity.MessageView: void onRespond(int,int)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean,int,int)> (6)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.gsm.stk.CommandParamsFactory: void make(com.android.internal.telephony.gsm.stk.BerTlv)> (1)
<com.android.internal.telephony.IccProvider: java.util.ArrayList loadFromEf(int)> (2)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void processDtmf(char)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.policy.impl.SimUnlockScreen$1: void run()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.server.LocationManagerService: void run()> (1)
<com.android.server.KeyInputQueue$HapticFeedbackCallback: void virtualKeyFeedback(android.view.KeyEvent)> (2)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<android.media.AudioService$2: void onServiceDisconnected()> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.music.TrackBrowserActivity$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor getTrackCursor(com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (3)
<com.android.music.TrackBrowserActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.music.TrackBrowserActivity: void access$700(com.android.music.TrackBrowserActivity,int)> (1)
<com.android.music.RepeatingImageButton$RepeatListener: void onRepeat(android.view.View,long,int)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.email.activity.setup.AccountSetupCheckSettings$1: void run()> (2)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.LocalStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.ExchangeStore$ExchangeTransport: void checkSettings(java.net.URI)> (1)
<com.android.email.service.EmailServiceProxy$4: void run()> (1)
<com.android.email.activity.MessageList: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageList: void access$1600(com.android.email.activity.MessageList)> (1)
<com.android.email.activity.MessageList: void onResume()> (2)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.WindowManagerService: int dispatchKey(android.view.KeyEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.server.WindowManagerService: int dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (2)
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (2)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: boolean decodeMessageParams(com.android.internal.telephony.gsm.stk.RilMessage)> (1)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void access$000(com.android.phone.DTMFTwelveKeyDialer,char)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (4)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean connectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean disconnectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor access$300(com.android.music.TrackBrowserActivity,com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (2)
<com.android.music.TrackBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.TrackBrowserActivity$5: void remove(int)> (1)
<com.android.music.RepeatingImageButton: void doRepeat(boolean)> (3)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.email.activity.setup.AccountSetupCheckSettings: void onCreate(android.os.Bundle)> (1)
<com.android.email.mail.store.ExchangeStore: void checkSettings()> (1)
<com.android.email.activity.MessageList$LoadMessagesTask: void onPostExecute(android.database.Cursor)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.server.WindowManagerService: int access$1300(com.android.server.WindowManagerService,android.view.KeyEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1400(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.server.WindowManagerService: int access$1500(com.android.server.WindowManagerService,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder: boolean access$200(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.stk.RilMessage)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (3)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$3: void run()> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void stopBluetoothSco()> ()
<android.media.AudioManager: void startBluetoothSco()> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean processCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.music.TouchInterceptor$RemoveListener: void remove(int)> (2)
<com.android.music.RepeatingImageButton: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.music.RepeatingImageButton: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.music.RepeatingImageButton: void access$000(com.android.music.RepeatingImageButton,boolean)> (1)
<com.android.email.mail.Store: void checkSettings()> (1)
<com.android.email.activity.MessageList$LoadMessagesTask: void onPostExecute(java.lang.Object)> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void process()> (1)
<com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onDialerKeyDown(android.view.KeyEvent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.media.AudioManager: void setMode(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void processCommands()> (3)
<com.android.music.TouchInterceptor$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.music.TouchInterceptor: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.music.RepeatingImageButton$1: void run()> (1)
<com.android.server.WindowManagerService$InputDispatcherThread: void run()> (2)
<com.android.phone.InCallScreen: boolean handleDialerKeyDown(int,android.view.KeyEvent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.phone.PhoneUtils: void setAudioMode(android.content.Context,int)> (8)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void queueCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (6)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBondingStateChanged(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onProfileStateChanged(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAllProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnectConnected(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.WindowManagerService$1)> (1)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.settings.bluetooth.BluetoothEventRedirector$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager$1: void run()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onProfileCheckedStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,boolean)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (6)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onContextItemSelected(android.view.MenuItem)> (1)
<com.android.server.WindowManagerService$WMThread: void run()> (2)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onClicked()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setOnlineMode(boolean,boolean)> (2)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void askDisconnect()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.server.WindowManagerService: com.android.server.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onOnlineModeCheckedStateChanged(boolean)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refresh()> (2)
<com.android.settings.bluetooth.DockService: void access$000(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onResume()> (3)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceAppeared(android.bluetooth.BluetoothDevice,short,android.bluetooth.BluetoothClass,java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceDisappeared(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void syncBluetoothState()> (2)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: int getBluetoothState()> (8)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onCreateContextMenu(android.view.ContextMenu)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
<com.android.server.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> ()
<android.os.IPowerManager$Stub: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)> (3)
<android.os.PowerManager$WakeLock: void finalize()> ()
<android.os.PowerManager$WakeLock: void release(int)> (2)
<android.os.PowerManager$WakeLock: void release()> (89)
<android.bluetooth.HeadsetBase: void releaseWakeLock()> (2)
<android.bluetooth.ScoSocket: void releaseWakeLockNow()> (3)
<android.media.AsyncPlayer: void releaseWakeLock()> (1)
<android.os.PowerManager$WakeLock$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void onClose()> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.browser.BrowserActivity: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.calendar.AlertReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.contacts.ExportVCardActivity$ActualExportThread: void finalize()> ()
<com.android.contacts.ImportVCardActivity$VCardReadThread: void finalize()> ()
<com.android.deskclock.AlarmAlertWakeLock: void releaseCpuLock()> (1)
<com.android.development.Connectivity$4: void onClick(android.view.View)> (1)
<com.android.exchange.SyncManager: void releaseWakeLock(long)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleTimeout(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void releaseWakeLock()> (7)
<com.android.internal.telephony.cdma.CDMAPhone: void finalize()> ()
<com.android.internal.telephony.gsm.GsmConnection: void releaseWakeLock()> (5)
<com.android.internal.telephony.RIL: void releaseWakeLockIfDone()> (1)
<com.android.mms.transaction.SmsReceiver: void finishStartingService(android.app.Service,int)> (2)
<com.android.mms.transaction.TransactionService: void releaseWakeLock()> (2)
<com.android.phone.BluetoothHandsfree: void callStarted()> (1)
<com.android.providers.calendar.AppWidgetShared: void clearLocked()> (1)
<com.android.server.AlarmManagerService$ResultReceiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.am.ActivityManagerService: void activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (3)
<com.android.server.am.ActivityManagerService: void completePauseLocked()> (1)
<com.android.server.am.ActivityManagerService: void wakingUp()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void run()> (2)
<com.android.server.BackupManagerService$PerformClearTask: void run()> (3)
<com.android.server.BackupManagerService$PerformInitializeTask: void run()> (3)
<com.android.server.BackupManagerService$PerformRestoreTask: void run()> (5)
<com.android.server.KeyInputQueue: com.android.server.KeyInputQueue$QueuedEvent getEvent(long)> (1)
<com.android.server.LocationManagerService: void decrementPendingBroadcasts()> (2)
<com.android.server.NotificationPlayer: void releaseWakeLock()> (1)
<com.android.server.WindowManagerService: void stopFreezingDisplayLocked()> (2)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void releaseWakeLock()> (1)
<com.cooliris.media.Gallery: void onPause()> (1)
<com.cooliris.media.GridLayer: void endSlideshow()> (7)
<com.android.server.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<android.bluetooth.HeadsetBase: void finalize()> ()
<android.bluetooth.ScoSocket: void finalize()> ()
<android.bluetooth.ScoSocket: void onConnected(int)> ()
<android.media.AsyncPlayer: void access$500(android.media.AsyncPlayer)> (1)
<com.android.browser.Tab$2: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.exchange.SyncManager: void releaseMailbox(long)> (5)
<com.android.exchange.SyncManager: void runAsleep(long,long)> (4)
<com.android.exchange.SyncManager: void stopManualSync(long)> (2)
<com.android.exchange.SyncManager: void stopServiceThreads()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$600(com.android.internal.policy.impl.KeyguardViewMediator,int)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void access$000(com.android.internal.telephony.cdma.CdmaConnection)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void finalize()> ()
<com.android.internal.telephony.cdma.CdmaConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void onLocalDisconnect()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$100(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void finalize()> ()
<com.android.internal.telephony.gsm.GsmConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.mms.transaction.PrivilegedSmsReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.phone.BluetoothHandsfree: void access$2700(com.android.phone.BluetoothHandsfree)> (1)
<com.android.providers.calendar.CalendarAppWidgetService: void run()> (1)
<com.android.server.am.ActivityManagerService: void completeResumeLocked(com.android.server.am.HistoryRecord)> (2)
<com.android.server.am.ActivityManagerService: void activityPaused(android.os.IBinder,android.os.Bundle,boolean)> (3)
<android.app.ActivityManagerNative: void wakingUp()> (2)
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.WindowManagerService$KeyQ: com.android.server.KeyInputQueue$QueuedEvent getEvent(long)> (2)
<com.android.server.LocationManagerService: void access$500(com.android.server.LocationManagerService)> (3)
<com.android.server.NotificationPlayer: void access$700(com.android.server.NotificationPlayer)> (1)
<com.cooliris.media.GridInputProcessor: boolean onKeyDown(int,android.view.KeyEvent,int)> (1)
<com.cooliris.media.GridInputProcessor: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.cooliris.media.GridInputProcessor: void selectSlot(int)> (2)
<com.cooliris.media.GridInputProcessor: void touchEnded(int,int,float)> (1)
<com.cooliris.media.GridLayer: boolean changeFocusToNextSlot(float)> (4)
<com.cooliris.media.GridLayer: void stop()> (1)
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<com.android.exchange.SyncManager: void access$1100(com.android.exchange.SyncManager,long)> (1)
<com.android.exchange.SyncManager: void done(com.android.exchange.AbstractSyncService)> (2)
<com.android.exchange.SyncManager: void reloadFolderList(android.content.Context,long,boolean)> (3)
<com.android.exchange.SyncManager: void stopAccountSyncs(long,boolean)> (3)
<com.android.exchange.SyncManager: void access$100(long)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void onRemoteDisconnect(int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void onRemoteDisconnect(int)> (1)
<android.app.IActivityManager: void wakingUp()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: void clearBackupData(java.lang.String)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.LocationManagerService$ProximityListener: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$Receiver: void decrementPendingBroadcastsLocked()> (2)
<com.cooliris.media.GridLayer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.cooliris.media.GridInputProcessor: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.GridLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.Gallery: void onStop()> (1)
<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (3)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.SyncManager$5: void run()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.SyncManager$2: void updateFolderList(long)> (2)
<com.android.exchange.SyncManager: void access$300(com.android.exchange.SyncManager,long,boolean)> (2)
<com.android.exchange.SyncManager: void stopAccountSyncs(long)> (2)
<com.android.exchange.SyncManager: void stopNonAccountMailboxSyncsForAccount(long)> (2)
<com.android.exchange.SyncManager$2: void stopSync(long)> (2)
<com.android.exchange.SyncManager$CalendarObserver$1: void run()> (1)
<android.app.backup.IBackupManager: void clearBackupData(java.lang.String)> (1)
<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.LocationManagerService$Receiver: void access$700(com.android.server.LocationManagerService$Receiver)> (1)
<com.android.server.LocationManagerService$Receiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.cooliris.media.RootLayer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.cooliris.media.GridLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.Layer: boolean update(com.cooliris.media.RenderView,float)> (5)
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doListRestoreSets()> (1)
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.email.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.email.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.SyncManager$2: void hostChanged(long)> (2)
<com.android.exchange.SyncManager$AccountObserver: void onAccountChanged()> (1)
<com.android.exchange.SyncManager$ConnectivityReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (3)
<com.android.email.service.IEmailService$Stub$Proxy: void stopSync(long)> ()
<com.android.email.service.IEmailService$Stub: void stopSync(long)> (2)
<com.android.commands.bmgr.Bmgr: void doWipe()> (1)
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> ()
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> (1)
<com.android.commands.bmgr.Bmgr: void doRestorePackage(java.lang.String)> (1)
<com.cooliris.media.RenderView: void processKeyEvent()> (1)
<com.cooliris.media.Layer: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.cooliris.media.ImageButton: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.LoadingLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.MenuBar: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.RenderView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.cooliris.media.RootLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.android.commands.bmgr.Bmgr: void doList()> (1)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.email.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.IEmailService$Stub$Proxy: void hostChanged(long)> ()
<com.android.email.service.IEmailService$Stub: void hostChanged(long)> (2)
<com.android.exchange.SyncManager$AccountObserver: void access$500(com.android.exchange.SyncManager$AccountObserver)> (2)
<com.android.email.service.IEmailService: void stopSync(long)> (1)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> ()
<com.cooliris.media.RenderView: void processCurrentEvent()> (1)
<com.cooliris.media.BackgroundLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.LoadingLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.RenderView: void processTouchEvent()> (1)
<com.cooliris.media.RootLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.email.Controller: void updateMailboxList(long,com.android.email.Controller$Result)> (3)
<com.android.email.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.service.IEmailService: void hostChanged(long)> (2)
<com.android.exchange.SyncManager$3: void run()> (2)
<com.android.exchange.SyncManager$AccountObserver$1: void run()> (1)
<com.android.email.service.EmailServiceProxy$3: void run()> (1)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.email.activity.AccountFolderList: void onRefresh(long)> (2)
<com.android.email.activity.MessageList$FindMailboxTask: java.lang.Long doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupExchange: void doActivityResultValidateExistingAccount(int,android.content.Intent)> (1)
<com.android.email.service.EmailServiceProxy$9: void run()> (1)
<com.android.exchange.SyncManager: void runAccountReconciler()> (2)
<com.android.email.activity.AccountFolderList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.AccountFolderList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageList$FindMailboxTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSetupExchange: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.exchange.SyncManager: void access$900(com.android.exchange.SyncManager)> (1)
<com.android.exchange.SyncManager: void onCreate()> (1)
<com.android.exchange.SyncManager$EasAccountsUpdatedListener: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.server.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String)> (2)
<android.net.wifi.IWifiManager: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String)> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$WifiLock: void acquire()> ()
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.WifiService: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> ()
<android.net.wifi.IWifiManager$Stub: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager: boolean releaseWifiLock(android.os.IBinder)> (3)
<android.net.wifi.WifiManager$WifiLock: void finalize()> ()
<android.net.wifi.WifiManager$WifiLock: void release()> ()
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.email.provider.EmailContent$Account,com.android.email.provider.EmailContent$Mailbox)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.email.provider.EmailContent$Mailbox,com.android.exchange.EasSyncService)> (2)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.calendar.EventInfoActivity: void onPause()> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.android.mms.transaction.MessageStatusReceiver: boolean updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.calendar.AlertActivity$2: void onClick(android.view.View)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.exchange.provider.GalEmailAddressAdapter$1: void run()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void wipe()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void wipe()> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void access$000(com.android.providers.calendar.CalendarProvider2,boolean)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$700(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.calendar.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.AlertActivity: void access$700(com.android.calendar.AlertActivity)> (2)
<com.android.calendar.AlertActivity$3: void onClick(android.view.View)> (1)
<com.android.calendar.EditEvent: boolean save()> (3)
<com.android.calendar.EditEvent: boolean access$1500(com.android.calendar.EditEvent)> (1)
<com.android.calendar.EditEvent: void onBackPressed()> (1)
<com.android.calendar.EditEvent: void onClick(android.view.View)> (1)
<com.android.calendar.EditEvent$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.SelectCalendarsAdapter: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void doSaveAction()> (1)
<com.android.calendar.SelectCalendarsActivity: void onClick(android.view.View)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$700(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> (1)
<com.android.calendar.AgendaWindowAdapter: void doQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.AgendaWindowAdapter: void access$1400(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean access$600(com.android.calendar.AgendaWindowAdapter,com.android.calendar.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,int)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.AgendaWindowAdapter: void refresh(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaListView: void goTo(android.text.format.Time,boolean)> (3)
<com.android.calendar.AgendaListView: void refresh(boolean)> (2)
<com.android.calendar.AgendaActivity: void goTo(android.text.format.Time,boolean)> (2)
<com.android.calendar.AgendaActivity: void goToToday()> (1)
<com.android.calendar.AgendaActivity: void onResume()> (1)
<com.android.calendar.AgendaActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AgendaActivity$2: void onChange(boolean)> (1)
<com.android.calendar.AgendaActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.Navigator: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.Navigator: void goToToday()> (1)
<com.android.calendar.MonthView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.MenuHelper: boolean onOptionsItemSelected(android.app.Activity,android.view.MenuItem,com.android.calendar.Navigator)> (3)
<com.android.calendar.AgendaActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.CalendarActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.calendar.MonthActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.DayActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.WeekActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.EventInfoActivity: void createExceptionResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.calendar.EventInfoActivity: boolean saveResponse(android.content.ContentResolver)> (1)
<com.android.calendar.AlertActivity: void dismissAlarm(long)> (1)
<com.android.calendar.AlertActivity: void access$400(com.android.calendar.AlertActivity,long)> (1)
<com.android.calendar.AlertActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.calendar.EventInfoActivity: void updateResponse(android.content.ContentResolver,long,long,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.calendar.EditEvent: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.calendar.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.calendar.AlertActivity: void onStop()> (1)
<com.android.calendar.AlertService: void doTimeChanged()> (1)
<com.android.calendar.AlertService: void processMessage(android.os.Message)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.calendar.DismissAllAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.EditEvent: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.DeleteEventHelper$1: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])> (1)
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.SIGNAL_PERSISTENT_PROCESSES
8 Callers:
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> (1)
<android.app.ActivityManagerNative: void signalPersistentProcesses(int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void signalPersistentProcesses(int)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.Monkey: void signalPersistentProcesses()> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
Permission:android.permission.READ_SYNC_SETTINGS
139 Callers:
<android.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (14)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<com.android.email.AccountBackupRestore: void doBackupAccounts(android.content.Context,com.android.email.Preferences)> (1)
<com.android.email.activity.setup.AccountSettings: void onCreate(android.os.Bundle)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.SyncManager: long checkMailboxes()> (1)
<com.android.exchange.SyncManager: void updatePIMSyncSettings(com.android.email.provider.EmailContent$Account,int,java.lang.String)> (1)
<com.android.settings.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.AccountSyncSettings: void onSyncStateUpdated()> (3)
<com.android.settings.ManageAccountsSettings: void onSyncStateUpdated()> (4)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.android.email.AccountBackupRestore$1: void run()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.SyncManager: void run()> (1)
<com.android.exchange.SyncManager: void checkPIMSyncSettings()> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.AccountPreferenceBase: void onSyncStateUpdated()> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void onSyncStateUpdated()> (2)
<com.android.settings.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (3)
<com.android.settings.ManageAccountsSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.android.email.AccountBackupRestore: void backupAccounts(android.content.Context)> (8)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.SyncManager: void access$800(com.android.exchange.SyncManager)> (1)
<com.android.settings.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.AccountPreferenceBase: void onResume()> (7)
<com.android.settings.AddAccountSettings: void onSyncStateUpdated()> (1)
<com.android.settings.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (3)
<com.android.settings.AccountSyncSettingsInAddAccount: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.AccountSyncSettings: void onCreate(android.os.Bundle)> (4)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.android.email.activity.AccountFolderList$DeleteAccountTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.email.provider.EmailContent$Account)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.email.activity.setup.AccountSetupExchange: void doActivityResultValidateExistingAccount(int,android.content.Intent)> (1)
<com.android.email.activity.setup.AccountSetupIncoming: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.email.activity.setup.AccountSetupNames: void onNext()> (1)
<com.android.email.activity.setup.AccountSetupOutgoing: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.exchange.SyncManager: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.SyncManager$EasSyncStatusObserver: void onStatusChanged(int)> (1)
<com.android.settings.AccountSyncSettingsInAddAccount: void onResume()> (5)
<com.android.settings.AccountSyncSettings: void onResume()> (4)
<com.android.settings.AddAccountSettings: void onResume()> (4)
<com.android.settings.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.AddAccountSettings: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.settings.AccountPreferenceBase: void onCreate(android.os.Bundle)> (5)
<com.android.settings.AccountSyncSettingsInAddAccount: void onCreate(android.os.Bundle)> (4)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.android.email.activity.AccountFolderList$DeleteAccountTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountSettings: void saveSettings()> (1)
<com.android.email.activity.setup.AccountSetupOptions: void finishOnDone()> (2)
<com.android.email.activity.setup.AccountSetupOptions: void onDone()> (1)
<com.android.email.activity.setup.AccountSetupExchange: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.email.activity.setup.AccountSetupNames: void onClick(android.view.View)> (1)
<com.android.exchange.SyncManager$3: void run()> (2)
<com.android.settings.AddAccountSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ManageAccountsSettings: void onCreate(android.os.Bundle)> (3)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.android.email.activity.setup.AccountSettings: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.email.activity.setup.AccountSetupOptions: void access$000(com.android.email.activity.setup.AccountSetupOptions)> (1)
<com.android.email.activity.setup.AccountSetupOptions: void onClick(android.view.View)> (1)
<com.android.exchange.SyncManager: void runAccountReconciler()> (2)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1$1: void run()> (1)
<com.android.exchange.SyncManager: void access$900(com.android.exchange.SyncManager)> (1)
<com.android.exchange.SyncManager: void onCreate()> (1)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<com.android.exchange.SyncManager$EasAccountsUpdatedListener: void onAccountsUpdated(android.accounts.Account[])> (1)
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (8)
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<com.android.settings.AccountSyncSettings: void updateAccountCheckboxes(android.accounts.Account[])> (3)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.android.settings.AccountSyncSettingsInAddAccount: void updateAccountCheckboxes(android.accounts.Account[])> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<android.content.SyncManager$InitializerServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.ContentService: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> ()
<android.content.IContentService$Stub: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService: boolean getMasterSyncAutomatically()> (1)
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> (8)
<android.app.ContextImpl$ApplicationContentResolver: boolean getMasterSyncAutomatically()> (1)
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: boolean getSync(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleSync(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
Permission:android.permission.SET_WALLPAPER_HINTS
9 Callers:
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> ()
<android.app.IWallpaperManager$Stub: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IWallpaperManager: void setDimensionHints(int,int)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> (1)
<com.android.launcher2.Launcher: void setWallpaperDimension()> (1)
<com.android.launcher2.Launcher: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.FLASHLIGHT
6 Callers:
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> ()
<android.os.IHardwareService$Stub: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IHardwareService: void setFlashlightEnabled(boolean)> ()
<com.android.server.LightsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
7 Callers:
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.BLUETOOTH
922 Callers:
<android.server.BluetoothService: boolean isEnabled()> (8)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetooth$Stub: boolean isEnabled()> (2)
<android.server.BluetoothA2dpService: boolean connectSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: boolean onAgentAuthorize(java.lang.String,java.lang.String)> ()
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<android.bluetooth.IBluetooth: boolean isEnabled()> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSink(android.bluetooth.BluetoothDevice)> (2)
<com.android.server.ServerThread: void run()> (1)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> (15)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void startListenerDelayed()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void updateNotificationWhenBtDisabled()> (3)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.phone.BluetoothHeadsetService: void autoConnectHeadset()> (1)
<com.android.phone.BluetoothHeadsetService: void onCreate()> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.server.status.StatusBarPolicy: void <init>(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: void setSummaryToName()> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void syncBluetoothState()> (2)
<com.android.settings.deviceinfo.Status: void setBtStatus()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<android.bluetooth.BluetoothA2dp: boolean connectSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void onCreate(android.os.Bundle)> (1)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearAllDownloads()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void access$2200(com.android.phone.BluetoothHeadsetService)> (2)
<com.android.server.status.StatusBarPolicy: void installIcons(android.content.Context,com.android.server.status.StatusBarService)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: void access$000(com.android.settings.bluetooth.BluetoothNamePreference)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: int getBluetoothState()> (8)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void access$000(com.android.bluetooth.opp.BluetoothOppTransferHistory)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.bluetooth.BluetoothSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onCreateContextMenu(android.view.ContextMenu)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (3)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean connectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<android.server.BluetoothService: void access$200(android.server.BluetoothService,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$000(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean processCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (5)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void processCommands()> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onProfileStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void queueCommand(com.android.settings.bluetooth.CachedBluetoothDevice$BluetoothJob)> (6)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBondingStateChanged(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onProfileStateChanged(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAllProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnectConnected(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothEventRedirector$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager$1: void run()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onProfileCheckedStateChanged(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,boolean)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onContextItemSelected(android.view.MenuItem)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onClicked()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void setOnlineMode(boolean,boolean)> (2)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void askDisconnect()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onOnlineModeCheckedStateChanged(boolean)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refresh()> (2)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onResume()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(android.content.Context,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceAppeared(android.bluetooth.BluetoothDevice,short,android.bluetooth.BluetoothClass,java.lang.String)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceDisappeared(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.content.Context,com.android.settings.bluetooth.LocalBluetoothManager,android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothManager: void onScanningStateChanged(boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBluetoothStateChanged(boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void setBluetoothStateInt(int)> (3)
<android.server.BluetoothService: int getBluetoothState()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBluetoothState()> ()
<android.bluetooth.IBluetooth$Stub: int getBluetoothState()> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (5)
<android.bluetooth.IBluetooth: int getBluetoothState()> (2)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.bluetooth.BluetoothAdapter: int getState()> (1)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PowerDialog: void onClick(android.view.View)> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.PowerManagerService$9: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.server.BluetoothService: void getAllProperties()> (2)
<android.server.BluetoothService: java.lang.String getPropertyInternal(java.lang.String)> (5)
<android.server.BluetoothService$BondState: void loadBondState()> (1)
<android.server.BluetoothService: java.lang.String getAddressFromObjectPath(java.lang.String)> (12)
<android.server.BluetoothService: java.lang.String getObjectPathFromAddress(java.lang.String)> (14)
<android.server.BluetoothService: java.lang.String getProperty(java.lang.String)> (7)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothEventLoop: void onDeviceCreated(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDeviceDisconnectRequested(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDiscoverServicesResult(java.lang.String,boolean)> ()
<android.server.BluetoothService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothEventLoop: void onCreateDeviceResult(java.lang.String,int)> ()
<android.server.BluetoothService: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.server.BluetoothService: boolean removeBond(java.lang.String)> (2)
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> (2)
<android.server.BluetoothService: java.lang.String[] getRemoteDeviceProperties(java.lang.String)> (2)
<android.server.BluetoothService: void setLinkTimeout(java.lang.String,int)> (1)
<android.server.BluetoothService: void updateDeviceServiceChannelCache(java.lang.String)> (2)
<android.server.BluetoothService: int getDiscoverableTimeout()> (2)
<android.server.BluetoothService: int getScanMode()> (2)
<android.server.BluetoothService: java.lang.String getAddress()> (3)
<android.server.BluetoothService: java.lang.String getName()> (3)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> ()
<android.bluetooth.IBluetooth$Stub: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean removeBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setTrust(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setTrust(java.lang.String,boolean)> (2)
<android.server.BluetoothService: boolean updateRemoteDevicePropertiesCache(java.lang.String)> (3)
<android.server.BluetoothService: void addRemoteDeviceProperties(java.lang.String,java.lang.String[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> ()
<android.bluetooth.IBluetooth$Stub: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> ()
<android.bluetooth.IBluetooth$Stub: int getScanMode()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getName()> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.bluetooth.IBluetooth: boolean removeBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean setTrust(java.lang.String,boolean)> (1)
<android.server.BluetoothService: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (2)
<android.server.BluetoothService: java.lang.String getRemoteDeviceProperty(java.lang.String,java.lang.String)> (6)
<android.server.BluetoothEventLoop: void addDevice(java.lang.String,java.lang.String[])> (2)
<android.bluetooth.IBluetooth: int getDiscoverableTimeout()> (1)
<android.bluetooth.IBluetooth: int getScanMode()> (1)
<android.bluetooth.IBluetooth: java.lang.String getAddress()> (1)
<android.bluetooth.IBluetooth: java.lang.String getName()> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnectSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> (2)
<android.bluetooth.BluetoothSocket$SdpHelper: int doSdp()> (1)
<android.bluetooth.BluetoothDevice: boolean removeBond()> (1)
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (2)
<android.server.BluetoothService: android.os.ParcelUuid[] getUuidFromCache(java.lang.String)> (2)
<android.server.BluetoothService: boolean getTrustState(java.lang.String)> (2)
<android.server.BluetoothService: int getRemoteClass(java.lang.String)> (3)
<android.server.BluetoothService: java.lang.String getRemoteName(java.lang.String)> (4)
<android.server.BluetoothEventLoop: void onDeviceFound(java.lang.String,java.lang.String[])> ()
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> ()
<android.bluetooth.BluetoothAdapter: int getScanMode()> (2)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: void audioOff()> (9)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (8)
<com.android.bluetooth.opp.BluetoothOppTransfer: void doOpushSdp()> (1)
<com.android.phone.BluetoothHeadsetService$RfcommConnectThread: void run()> (2)
<android.bluetooth.BluetoothSocket: void connect()> (1)
<android.bluetooth.IBluetooth: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (1)
<android.server.BluetoothService: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (6)
<android.server.BluetoothService: void sendUuidIntent(java.lang.String)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean getTrustState(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean getTrustState(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteClass(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteName(java.lang.String)> (2)
<android.server.BluetoothService$BondState: boolean isAutoPairingBlacklisted(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void resume()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void updateCountdownSummary()> (2)
<com.android.settings.bluetooth.BluetoothNamePreference: void onClick()> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect()> (2)
<com.android.bluetooth.opp.BluetoothOppTransfer$SocketConnectThread: void run()> (2)
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (2)
<android.server.BluetoothA2dpService: boolean isSinkDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean getTrustState(java.lang.String)> (1)
<android.bluetooth.IBluetooth: int getRemoteClass(java.lang.String)> (1)
<android.bluetooth.IBluetooth: java.lang.String getRemoteName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void access$100(com.android.settings.bluetooth.BluetoothDiscoverableEnabler)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void handleModeChanged(int)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean disconnectInt(com.android.settings.bluetooth.CachedBluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$500(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition()> (2)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<com.android.phone.BluetoothHeadsetService: boolean doNextAutoConnect()> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService)> (3)
<com.android.bluetooth.opp.BluetoothOppTransfer$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (1)
<android.server.BluetoothA2dpService: boolean access$200(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean getTrustState()> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> (3)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> (11)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$2: void run()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void access$000(com.android.settings.bluetooth.BluetoothDiscoverableEnabler,int)> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: void access$1900(com.android.phone.BluetoothHeadsetService,int,int,int)> (4)
<com.android.phone.BluetoothHeadsetService: void setState(int,int)> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService: boolean access$2400(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> (4)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothSettings: boolean addDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchBtClass()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> (4)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHandsfree: void configAudioParameters()> (1)
<com.android.settings.bluetooth.BluetoothPairingRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: java.lang.String getName(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchName()> (2)
<com.android.settings.bluetooth.LocalBluetoothManager: void showError(android.bluetooth.BluetoothDevice,int,int)> (4)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.Phone)> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition()> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService$6: void disconnectHeadset()> (2)
<com.android.phone.BluetoothHeadsetService: void access$1200(com.android.phone.BluetoothHeadsetService,int,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(int)> (2)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadset(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean updateProfiles()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppTransferInfo queryRecord(android.content.Context,android.net.Uri)> (5)
<com.android.settings.bluetooth.BluetoothPairingDialog: android.view.View createView()> (4)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void showUnbondMessage(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void pair()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void showConnectingError()> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition()> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void disconnectHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: void disconnectHeadset()> (3)
<com.android.phone.BluetoothHeadsetService: void access$600(com.android.phone.BluetoothHeadsetService,int)> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void addDevices()> (1)
<com.android.settings.bluetooth.LocalBluetoothManager$Callback: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void updateProgressbar()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void openCompleteTransfer()> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConfirmationDialog()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConsentDialog()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createDisplayPasskeyDialog()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createUserEntryDialog()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onConnectingError(android.bluetooth.BluetoothDevice)> ()
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<com.android.voicedialer.BluetoothVoiceDialerActivity: void onStop()> (1)
<android.bluetooth.IBluetoothHeadset: void disconnectHeadset()> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (10)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (1)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.voicedialer.BluetoothVoiceDialerActivity$1: void onServiceConnected()> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadset(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void dispatchDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (16)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: android.view.View createView()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void access$100(com.android.bluetooth.opp.BluetoothOppTransferActivity)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadset()> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (3)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setUpDialog()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity$BluetoothTransferContentObserver: void onChange(boolean)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients()> (3)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2500(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<android.media.AudioService$2: void onServiceDisconnected()> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$14: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$15: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$16: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void stopBluetoothSco()> ()
<android.media.AudioManager: void startBluetoothSco()> ()
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioManager: void setMode(int)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.PhoneUtils: void setAudioMode(android.content.Context,int)> (8)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Phone)> (7)
<com.android.phone.PhoneUtils: int placeCall(com.android.internal.telephony.Phone,java.lang.String,android.net.Uri)> (2)
<com.android.phone.PhoneUtils: int placeCallVia(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,android.net.Uri)> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.Phone)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (31)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<android.server.BluetoothService: boolean setPropertyString(java.lang.String,java.lang.String)> (1)
<android.server.BluetoothService: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: boolean persistString(java.lang.String)> (3)
<android.server.BluetoothService: boolean setPropertyInteger(java.lang.String,int)> (1)
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setEnabled(boolean)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.server.BluetoothService: boolean setPropertyBoolean(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean setScanMode(int,int)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth: boolean setScanMode(int,int)> (1)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void proceedAndFinish()> (4)
<com.android.settings.bluetooth.RequestPermissionActivity: void access$200(com.android.settings.bluetooth.RequestPermissionActivity)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean isDiscovering()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isDiscovering()> ()
<android.bluetooth.IBluetooth$Stub: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth: boolean isDiscovering()> (1)
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> (5)
<com.android.settings.bluetooth.LocalBluetoothManager: boolean shouldShowDialogInForeground(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void startScanning(boolean)> (3)
<com.android.settings.bluetooth.LocalBluetoothManager: void stopScanning()> (2)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onUserLeaveHint()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void access$100(com.android.settings.bluetooth.BluetoothSettings,int)> (1)
<android.server.BluetoothService: java.lang.String[] listBonds()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String[] listBonds()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String[] listBonds()> (2)
<android.bluetooth.IBluetooth: java.lang.String[] listBonds()> (1)
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> (3)
<com.android.phone.BluetoothHeadsetService$HeadsetPriority: boolean load()> (2)
<com.android.settings.bluetooth.DockService: boolean hasOtherConnectedDevices(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: int getBondState(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: int getBondState(java.lang.String)> (2)
<android.bluetooth.IBluetooth: int getBondState(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: int getBondState()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getBondState()> (9)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isBusy()> (6)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getSummary()> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void checkForDeviceRemoval(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onDeviceAttributesChanged(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: android.preference.CheckBoxPreference createProfilePreference(com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refreshOnlineModePreference()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refreshProfilePreference(android.preference.CheckBoxPreference,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void <init>(android.content.Context,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void addPreferencesForProfiles()> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void refreshProfiles()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: void onCreate(android.os.Bundle)> (2)
<android.server.BluetoothService: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> ()
<android.bluetooth.IBluetooth$Stub: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (2)
<android.bluetooth.IBluetooth: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> ()
<android.server.BluetoothService: void removeServiceRecord(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: void removeServiceRecord(int)> ()
<android.bluetooth.IBluetooth$Stub: void removeServiceRecord(int)> (2)
<android.bluetooth.IBluetooth: void removeServiceRecord(int)> (1)
<android.server.BluetoothA2dpService: android.bluetooth.BluetoothDevice[] getConnectedSinks()> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: android.bluetooth.BluetoothDevice[] getConnectedSinks()> ()
<android.bluetooth.IBluetoothA2dp$Stub: android.bluetooth.BluetoothDevice[] getConnectedSinks()> (2)
<android.bluetooth.IBluetoothA2dp: android.bluetooth.BluetoothDevice[] getConnectedSinks()> (1)
<android.bluetooth.BluetoothA2dp: java.util.Set getConnectedSinks()> (4)
<android.net.wifi.WifiStateTracker: void checkIsBluetoothPlaying()> (2)
<com.android.server.status.StatusBarPolicy: void updateBluetooth(android.content.Intent)> (1)
<com.android.server.WifiService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateTracker: void notifySupplicantConnection()> (1)
<com.android.server.status.StatusBarPolicy: void access$900(com.android.server.status.StatusBarPolicy,android.content.Intent)> (1)
<android.net.wifi.WifiMonitor$MonitorThread: void run()> (2)
<com.android.server.status.StatusBarPolicy$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiMonitor: void startMonitoring()> (1)
<android.net.wifi.WifiStateTracker: void startEventLoop()> (1)
<com.android.server.WifiService: boolean setWifiEnabledBlocking(boolean,boolean,int)> (1)
<com.android.server.WifiService: boolean access$1600(com.android.server.WifiService,boolean,boolean,int)> (1)
<android.server.BluetoothA2dpService: android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()> ()
<android.bluetooth.IBluetoothA2dp$Stub: android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()> (2)
<android.bluetooth.IBluetoothA2dp: android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()> (1)
<android.bluetooth.BluetoothA2dp: java.util.Set getNonDisconnectedSinks()> (3)
<android.server.BluetoothEventLoop: boolean isOtherSinkInNonDisconnectingState(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: java.util.Set getConnectedDevices()> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: java.util.Set getConnectedDevices()> (1)
<android.server.BluetoothA2dpService: int getSinkState(android.bluetooth.BluetoothDevice)> (6)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getSinkState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getSinkState(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: java.util.Set lookupSinksMatchingStates(int[])> (4)
<android.bluetooth.IBluetoothA2dp: int getSinkState(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: java.util.Set access$1000(android.server.BluetoothA2dpService,int[])> (1)
<android.bluetooth.BluetoothA2dp: int getSinkState(android.bluetooth.BluetoothDevice)> (5)
<android.bluetooth.BluetoothA2dp: boolean isSinkConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: int getSummary(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (8)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: int getSummary(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isConnected()> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getOneOffSummary()> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean isConnected(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.ConnectSpecificProfilesActivity: int getProfileSummary(com.android.settings.bluetooth.LocalBluetoothProfileManager,com.android.settings.bluetooth.LocalBluetoothProfileManager$Profile,android.bluetooth.BluetoothDevice,int,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$OppProfileManager: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: int getSinkPriority(android.bluetooth.BluetoothDevice)> (5)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getSinkPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getSinkPriority(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.bluetooth.IBluetoothA2dp: int getSinkPriority(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void access$500(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.bluetooth.BluetoothA2dp: int getSinkPriority(android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$A2dpProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: boolean isPreferred(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<com.android.settings.bluetooth.DockService: java.lang.CharSequence[] initBtSettings(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,boolean)> (2)
<com.android.settings.bluetooth.DockService: boolean createDialog(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: int getState()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothPbap$Stub: int getState()> (2)
<android.bluetooth.IBluetoothPbap: int getState()> (1)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPbap: int getState()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.phone.BluetoothHeadsetService$6: int getState()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getState()> (2)
<android.bluetooth.IBluetoothHeadset: int getState()> (1)
<android.bluetooth.BluetoothHeadset: int getState()> (6)
<android.media.AudioService$2: void onServiceConnected()> (1)
<android.net.wifi.WifiStateTracker$DhcpHandler: boolean shouldDisableCoexistenceMode()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (2)
<android.net.wifi.WifiStateTracker: void configureInterface()> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: int getSummary(android.bluetooth.BluetoothDevice)> (1)
<android.net.wifi.WifiStateTracker: void access$700(android.net.wifi.WifiStateTracker)> (1)
<android.net.wifi.WifiStateTracker$SettingsObserver: void onChange(boolean)> (1)
<com.android.phone.BluetoothHeadsetService$6: android.bluetooth.BluetoothDevice getCurrentHeadset()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: android.bluetooth.BluetoothDevice getCurrentHeadset()> ()
<android.bluetooth.IBluetoothHeadset$Stub: android.bluetooth.BluetoothDevice getCurrentHeadset()> (2)
<android.bluetooth.IBluetoothHeadset: android.bluetooth.BluetoothDevice getCurrentHeadset()> (1)
<android.bluetooth.BluetoothHeadset: android.bluetooth.BluetoothDevice getCurrentHeadset()> (7)
<com.android.phone.InCallScreen: boolean isBluetoothAvailable()> (5)
<com.android.phone.InCallScreen: void dumpBluetoothState()> ()
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: java.util.Set getConnectedDevices()> (1)
<com.android.phone.InCallControlState: void update()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()> (2)
<com.android.phone.InCallMenu: boolean updateItems(com.android.internal.telephony.Phone)> (4)
<com.android.phone.InCallTouchUi: void updateInCallControls(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: android.view.View onCreatePanelView(int)> (1)
<com.android.phone.InCallScreen: void updateMenuItems()> (2)
<com.android.phone.InCallTouchUi: void updateState(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OtaUtils: void otaShowInProgressScreen()> (3)
<com.android.phone.OtaUtils: void otaShowListeningScreen()> (2)
<com.android.phone.InCallScreen: void updateInCallTouchUi()> (6)
<com.android.phone.InCallScreen: void access$2200(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void requestUpdateTouchUi()> (3)
<com.android.phone.PhoneApp: void updateInCallScreenTouchUi()> (3)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$HeadsetProfileManager: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.phone.BluetoothHeadsetService$6: int getBatteryUsageHint()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint()> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getBatteryUsageHint()> (2)
<android.bluetooth.IBluetoothHeadset: int getBatteryUsageHint()> (1)
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint()> (2)
<com.android.internal.os.BatteryStatsImpl: int getCurrentBluetoothPingCount()> (3)
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> (3)
<com.android.internal.os.BatteryStatsImpl: void doUnplug(long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setBtHeadset(android.bluetooth.BluetoothHeadset)> (1)
<com.android.internal.os.BatteryStatsImpl: void doPlug(long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelLocked(android.os.Parcel,int)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void addBluetoothUsage(long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int)> (1)
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> (2)
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void processMiscUsage()> (1)
<com.android.server.am.BatteryStatsService: void setOnBattery(boolean,int)> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothOn()> ()
<com.android.internal.app.IBatteryStats$Stub: void noteBluetoothOn()> (2)
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setOnBattery(boolean,int)> ()
<com.android.internal.app.IBatteryStats$Stub: void setOnBattery(boolean,int)> (2)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats: void noteBluetoothOn()> (1)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (3)
<com.android.internal.app.IBatteryStats: void setOnBattery(boolean,int)> (1)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (2)
<com.android.server.BatteryService: void sendIntent()> (1)
<com.android.settings.battery_history.BatteryHistory: void load()> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.BatteryService: void update()> (2)
<com.android.settings.battery_history.BatteryHistory: void onCreate(android.os.Bundle)> (1)
<com.android.server.BatteryService: void access$000(com.android.server.BatteryService)> (1)
<com.android.server.BatteryService: void <init>(android.content.Context)> (1)
<com.android.server.BatteryService$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> (1)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)> (6)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createScoSocket()> ()
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)> (4)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingScoOn()> ()
<com.android.bluetooth.opp.BluetoothOppRfcommListener$1: void run()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean initSocket()> (1)
<android.bluetooth.BluetoothSocket: void initSocketNative()> (1)
Permission:android.permission.RECORD_AUDIO
121 Callers:
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService: boolean access$600(android.speech.RecognitionService,android.speech.IRecognitionListener)> (3)
<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService$RecognitionServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.SpeechRecognizer: void handleCancelMessage()> (1)
<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void handleStopMessage()> (1)
<android.speech.SpeechRecognizer: void access$200(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void access$000(android.speech.SpeechRecognizer,android.content.Intent)> (2)
<android.speech.SpeechRecognizer: void access$100(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void putMessage(android.os.Message)> (4)
<android.speech.SpeechRecognizer: void cancel()> (1)
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> (1)
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void stopListening()> ()
<com.android.inputmethod.voice.VoiceInput: void cancel()> (4)
<com.android.inputmethod.voice.VoiceInput: void <init>(android.content.Context,com.android.inputmethod.voice.VoiceInput$UiListener)> (1)
<com.android.inputmethod.voice.VoiceInput: void startListeningAfterInitialization(com.android.inputmethod.voice.FieldContext)> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (5)
<com.android.inputmethod.latin.LatinIME: void hideWindow()> (3)
<com.android.inputmethod.latin.LatinIME: void onFinishInput()> (3)
<com.android.inputmethod.voice.VoiceInput: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (4)
<com.android.inputmethod.voice.VoiceInput: void startListening(com.android.inputmethod.voice.FieldContext,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (3)
<com.android.inputmethod.latin.LatinIME: void onKey(int,int[])> (4)
<com.android.inputmethod.latin.LatinIME: void swipeDown()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void handleClose()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void handleClose()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void hideWindow()> (2)
<com.google.android.voicesearch.LatinIMEWithVoice: void hideWindow()> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onFinishInput()> (2)
<com.google.android.voicesearch.LatinIMEWithVoice: void onFinishInput()> (2)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onCreate()> (3)
<com.google.android.voicesearch.LatinIMEWithVoice: void onCreate()> (3)
<com.android.inputmethod.latin.LatinIME: void reallyStartListening(boolean)> (4)
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (4)
<com.android.inputmethod.voice.LatinIMEWithVoice: void onKey(int,int[])> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void onKey(int,int[])> (1)
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void swipeDown()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void swipeDown()> (1)
<com.android.inputmethod.latin.LatinIME: void access$1100(com.android.inputmethod.latin.LatinIME,boolean)> (3)
<com.android.inputmethod.latin.LatinIME: void startListening(boolean)> (5)
<com.android.inputmethod.voice.LatinIMEWithVoice: void reallyStartListening(boolean)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void reallyStartListening(boolean)> (1)
<com.android.inputmethod.latin.LatinIME$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void launchSettings()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void launchSettings()> (1)
<com.android.inputmethod.latin.CandidateView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.CandidateView: void takeSuggestionAt(float)> ()
<com.android.inputmethod.voice.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<android.inputmethodservice.KeyboardView: void swipeDown()> (3)
<com.android.inputmethod.latin.LatinIME$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void access$1100(com.android.inputmethod.latin.LatinIME,boolean)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void access$1100(com.android.inputmethod.latin.LatinIME,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void access$700(com.android.inputmethod.latin.LatinIME,boolean)> (3)
<com.android.inputmethod.latin.LatinIME: void swipeRight()> (3)
<com.android.inputmethod.voice.LatinIMEWithVoice: void startListening(boolean)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void startListening(boolean)> (1)
<android.inputmethodservice.KeyboardView$2: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.latin.LatinKeyboardView: void swipeDown()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void swipeDown()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void access$700(com.android.inputmethod.latin.LatinIME,boolean)> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void access$700(com.android.inputmethod.latin.LatinIME,boolean)> (1)
<android.inputmethodservice.KeyboardView$OnKeyboardActionListener: void swipeRight()> (1)
<com.android.inputmethod.voice.LatinIMEWithVoice: void swipeRight()> (1)
<com.google.android.voicesearch.LatinIMEWithVoice: void swipeRight()> (1)
<android.inputmethodservice.KeyboardView: void swipeRight()> (3)
<com.android.inputmethod.latin.LatinKeyboardView: void swipeRight()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void swipeRight()> (1)
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> (2)
<com.android.camera.VideoCamera: void initializeRecorder()> (3)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.camera.VideoCamera: void access$300(com.android.camera.VideoCamera)> (8)
<com.android.camera.VideoCamera: void onPopupWindowVisibilityChanged(int)> (1)
<com.android.camera.VideoCamera: void onStopVideoRecording(boolean)> (4)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<com.android.camera.VideoCamera$MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.VideoCamera: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.VideoCamera: void onResume()> (1)
<com.android.camera.VideoCamera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.VideoCamera: void keepScreenOnAwhile()> (3)
<com.android.camera.VideoCamera: void hideAlertAndInitializeRecorder()> (1)
<com.android.camera.VideoCamera: void updateRecordingTime()> (2)
<com.android.camera.VideoCamera: void access$1600(com.android.camera.VideoCamera,int)> (1)
<com.android.camera.VideoCamera: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.camera.VideoCamera: void onBackPressed()> (1)
<com.android.camera.VideoCamera: void onInfo(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.VideoCamera: void onUserInteraction()> (1)
<com.android.camera.VideoCamera: void stopVideoRecording()> (7)
<com.android.camera.VideoCamera: void discardCurrentVideoAndInitRecorder()> (1)
<com.android.camera.VideoCamera: void access$200(com.android.camera.VideoCamera)> (4)
<com.android.camera.VideoCamera: void startVideoRecording()> (1)
<com.android.camera.VideoCamera$MyHeadUpDisplayListener$3: void run()> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.VideoCamera: void access$500(com.android.camera.VideoCamera)> (1)
<com.android.camera.VideoCamera: void onError(android.media.MediaRecorder,int,int)> (1)
<com.android.camera.VideoCamera: void onPause()> (1)
<com.android.camera.VideoCamera: void stopVideoRecordingAndGetThumbnail()> (2)
<com.android.camera.VideoCamera: void stopVideoRecordingAndReturn(boolean)> (2)
<com.android.camera.VideoCamera: void stopVideoRecordingAndShowAlert()> (1)
<com.android.camera.VideoCamera: void onClick(android.view.View)> (1)
