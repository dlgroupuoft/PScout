Permission:android.permission.CHANGE_WIFI_STATE
643 Callers:
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.INetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiStateMachine: boolean startSoftApWithConfig(android.net.wifi.WifiConfiguration,int)> (1)
<android.net.wifi.WifiStateMachine: boolean access$2300(android.net.wifi.WifiStateMachine,android.net.wifi.WifiConfiguration,int)> (2)
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.server.NetworkManagementService: void stopAccessPoint()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint()> ()
<android.os.INetworkManagementService$Stub: void stopAccessPoint()> (2)
<android.os.INetworkManagementService: void stopAccessPoint()> (2)
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.WifiService: void enforceChangePermission()> (19)
<com.android.server.WifiService: android.os.Messenger getMessenger()> (2)
<com.android.server.WifiService: boolean disableNetwork(int)> (2)
<com.android.server.WifiService: boolean enableNetwork(int,boolean)> (2)
<com.android.server.WifiService: boolean removeNetwork(int)> (2)
<com.android.server.WifiService: boolean saveConfiguration()> (2)
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> (3)
<com.android.server.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.WifiService: void addToBlacklist(java.lang.String)> (2)
<com.android.server.WifiService: void clearBlacklist()> (2)
<com.android.server.WifiService: void disconnect()> (2)
<com.android.server.WifiService: void reassociate()> (2)
<com.android.server.WifiService: void reconnect()> (2)
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> (2)
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> (2)
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<com.android.server.WifiService: void startScan(boolean)> (2)
<com.android.server.WifiService: void startWifi()> (2)
<com.android.server.WifiService: void stopWifi()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean disableNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean enableNetwork(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean removeNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean saveConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: boolean saveConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setWifiEnabled(boolean)> (2)
<com.android.server.WifiService: void checkAndStartWifi()> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void addToBlacklist(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void clearBlacklist()> ()
<android.net.wifi.IWifiManager$Stub: void clearBlacklist()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void disconnect()> ()
<android.net.wifi.IWifiManager$Stub: void disconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reassociate()> ()
<android.net.wifi.IWifiManager$Stub: void reassociate()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reconnect()> ()
<android.net.wifi.IWifiManager$Stub: void reconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setFrequencyBand(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void startScan(boolean)> ()
<android.net.wifi.IWifiManager$Stub: void startScan(boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void startWifi()> ()
<android.net.wifi.IWifiManager$Stub: void startWifi()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void stopWifi()> ()
<android.net.wifi.IWifiManager$Stub: void stopWifi()> (2)
<android.net.wifi.IWifiManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.IWifiManager: boolean removeNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean saveConfiguration()> (1)
<android.net.wifi.IWifiManager: boolean setWifiEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void addToBlacklist(java.lang.String)> (1)
<android.net.wifi.IWifiManager: void clearBlacklist()> (1)
<android.net.wifi.IWifiManager: void disconnect()> (1)
<android.net.wifi.IWifiManager: void reassociate()> (1)
<android.net.wifi.IWifiManager: void reconnect()> (1)
<android.net.wifi.IWifiManager: void setCountryCode(java.lang.String,boolean)> (1)
<android.net.wifi.IWifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.IWifiManager: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (1)
<android.net.wifi.IWifiManager: void startScan(boolean)> (2)
<android.net.wifi.IWifiManager: void startWifi()> (1)
<android.net.wifi.IWifiManager: void stopWifi()> (1)
<android.net.wifi.WifiManager: android.os.Messenger getMessenger()> (2)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.WifiManager: boolean removeNetwork(int)> ()
<android.net.wifi.WifiManager: boolean saveConfiguration()> ()
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> (10)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.WifiManager: boolean addToBlacklist(java.lang.String)> (1)
<android.net.wifi.WifiManager: boolean clearBlacklist()> (2)
<android.net.wifi.WifiManager: boolean disconnect()> (2)
<android.net.wifi.WifiManager: boolean reassociate()> (1)
<android.net.wifi.WifiManager: boolean reconnect()> ()
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (4)
<android.net.wifi.WifiManager: boolean startScanActive()> (2)
<android.net.wifi.WifiManager: boolean startScan()> ()
<android.net.wifi.WifiManager: boolean startWifi()> (1)
<android.net.wifi.WifiManager: boolean stopWifi()> (1)
<android.net.wifi.WifiManager: void asyncConnect(android.content.Context,android.os.Handler)> (2)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (1)
<com.android.settings.wifi.WifiAPITest$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiAPITest$3: void onClick(android.content.DialogInterface,int)> (1)
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onCreate(android.os.Bundle)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.server.ServerThread: void run()> (1)
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> ()
<com.android.server.WifiWatchdogService: void blacklistAp(java.lang.String)> (1)
<com.android.server.WifiWatchdogService: void handleReset()> (1)
<com.android.server.WifiWatchdogService: void handleSleep(java.lang.String)> (1)
<com.android.settings.wifi.WifiAPITest: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void refreshAccessPoints(boolean)> (3)
<com.android.server.WifiWatchdogService: void handleApUnresponsive(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.internal.telephony.MccTable: void setWifiCountryCodeFromMcc(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.settings.wifi.AdvancedSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TetherSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.sip.SipService$WifiScanProcess: void run()> (1)
<android.net.wifi.WifiStateTracker: boolean reconnect()> (1)
<android.net.wifi.WifiStateTracker: boolean teardown()> (1)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<android.net.NetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.development.Connectivity: void access$1300(com.android.development.Connectivity)> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.WifiWatchdogService: void access$1300(com.android.server.WifiWatchdogService)> (2)
<com.android.server.WifiWatchdogService: void access$1000(com.android.server.WifiWatchdogService,java.lang.String)> (2)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onBackButtonPressed()> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.server.WifiWatchdogService: void handleCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<android.net.NetworkStateTracker: boolean reconnect()> (2)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (30)
<com.android.systemui.statusbar.StatusBar: android.view.View makeStatusBarView()> (1)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void reset()> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void sleep(java.lang.String)> (1)
<com.android.settings.wifi.WifiSettings: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.server.WifiWatchdogService: void access$800(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void tryFailover(int)> (2)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (5)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.StatusBar: void start()> (3)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<com.android.server.WifiWatchdogService: void onEnabled()> (1)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void checkAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$100(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<com.android.server.WifiWatchdogService: void access$1700(com.android.server.WifiWatchdogService)> (1)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService: void handleBackgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.server.WifiWatchdogService: void onConnected(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void access$200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$300(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<com.android.server.WifiWatchdogService$2: void handleWifiStateChanged(int)> (1)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService: void access$900(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.server.WifiWatchdogService: void access$1500(com.android.server.WifiWatchdogService,java.lang.String,java.lang.String)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.WifiWatchdogService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void backgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.server.WifiWatchdogService$2: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (3)
<com.android.server.WifiWatchdogService: void handleApAlive(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.phone.SipCallOptionHandler: void access$200(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.util.State: void enter()> (13)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.internal.util.State: void exit()> (62)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<com.android.mms.transaction.Transaction: void process()> (1)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
Permission:android.permission.SET_ANIMATION_SCALE
17 Callers:
<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)> (2)
<android.view.IWindowManager$Stub$Proxy: void setAnimationScale(int,float)> ()
<android.view.IWindowManager$Stub: void setAnimationScale(int,float)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void setAnimationScale(int,float)> (3)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am: void runInstrument()> (1)
<com.android.development.DevelopmentSettings$AnimationScaleSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.spare_parts.SpareParts: void writeAnimationPreference(int,java.lang.Object)> (1)
<com.android.commands.am.Am: void run(java.lang.String[])> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.server.wm.WindowManagerService: void setAnimationScales(float[])> (2)
<android.view.IWindowManager$Stub$Proxy: void setAnimationScales(float[])> ()
<android.view.IWindowManager$Stub: void setAnimationScales(float[])> (2)
<android.view.IWindowManager: void setAnimationScales(float[])> (2)
<com.android.settings.DisplaySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
Permission:android.permission.READ_SMS
326 Callers:
<com.android.mms.ui.DeliveryReportActivity: java.util.Map getMmsReportStatus()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean copyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.transaction.RetrieveTransaction: boolean isDuplicateMessage(android.content.Context,com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> (4)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> (3)
<com.android.mms.data.Conversation: long getOrCreateThreadId(android.content.Context,com.android.mms.data.ContactList)> (2)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri)> (7)
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,com.android.mms.data.ContactList,boolean)> (2)
<com.android.mms.data.Conversation: long ensureThreadId()> (5)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (3)
<com.android.mms.transaction.MmsMessageSender: void sendReadRec(android.content.Context,java.lang.String,java.lang.String,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,com.google.android.mms.pdu.NotificationInd)> (4)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Void doInBackground(android.content.Intent[])> (1)
<com.android.mms.ui.ComposeMessageActivity: void forwardMessage(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftMmsMessage(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (3)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,android.net.Uri,boolean)> (2)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri access$400(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (1)
<com.android.mms.ui.MessageUtils$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.PushReceiver$ReceivePushTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$3100(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void access$500(android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity$23: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSlideshow()> (2)
<com.android.mms.ui.MessageUtils: void viewMmsMessageAttachment(android.content.Context,com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(int,boolean)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4700(com.android.mms.ui.ComposeMessageActivity,int,boolean)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.ComposeMessageActivity$20: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (1)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity: void checkPendingNotification()> (2)
<com.android.mms.ui.ComposeMessageActivity: void access$5400(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onUserInteraction()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$30: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStart()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity$18: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$27: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2600(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.transaction.RetryScheduler: int getResponseStatus(long)> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (10)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (2)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (4)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (3)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.ComposeMessageActivity$PduBodyCache: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (3)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: java.lang.String getDrmMimeType(long)> (3)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3400(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem access$500(com.android.mms.ui.ComposeMessageActivity,java.lang.String,long,boolean)> (2)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3600(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.util.DraftCache: void rebuildCache()> (1)
<com.android.mms.util.DraftCache: void access$000(com.android.mms.util.DraftCache)> (1)
<com.android.mms.util.DraftCache$1: void run()> (1)
<com.android.mms.util.RateController: boolean isLimitSurpassed()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)> (3)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.MessageItem: void interpretFrom(com.google.android.mms.pdu.EncodedStringValue,android.net.Uri)> (1)
<com.android.mms.ui.MessageUtils: void handleReadReport(android.content.Context,long,int,java.lang.Runnable)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (4)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getNewMessageNotificationInfo(java.lang.String,java.lang.String,android.content.Context,int,java.lang.String,long,long,int)> (2)
<com.android.mms.ui.ConversationList: void createNewMessage()> (2)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.util.Recycler$MmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.drm.DrmUtils: android.net.Uri insert(android.content.Context,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.MediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (7)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (6)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getGenericMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILMediaElement,com.google.android.mms.pdu.PduPart,com.android.mms.model.RegionModel)> (2)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,int,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getRegionMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILRegionMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduPart)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.mms.data.Conversation: void cacheAllThreads(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$800(android.content.Context)> (1)
<com.android.mms.data.Conversation$2: void run()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.MessagingNotification: int getDownloadFailedMessageCount(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void updateDownloadFailedNotification(android.content.Context)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context)> (2)
<com.android.mms.data.Conversation$1: void run()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getMmsReportRequests()> (1)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> (2)
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)> (2)
<com.android.mms.data.Conversation: void startQueryForAll(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList: void startAsyncQuery()> (3)
<com.android.mms.ui.ConversationList: void access$000(com.android.mms.ui.ConversationList)> (2)
<com.android.mms.ui.ConversationList: void onNewIntent(android.content.Intent)> (2)
<com.android.mms.ui.ConversationList: void onStart()> (2)
<com.android.mms.ui.ConversationList$1: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ConversationListAdapter$OnContentChangedListener: void onContentChanged(com.android.mms.ui.ConversationListAdapter)> (1)
<com.android.mms.ui.ConversationListAdapter: void onContentChanged()> (1)
<com.android.mms.data.Conversation: boolean loadFromThreadId(long,boolean)> (1)
<com.android.mms.data.Conversation: void <init>(android.content.Context,long,boolean)> (2)
<com.android.mms.data.Conversation: com.android.mms.data.Conversation get(android.content.Context,long,boolean)> (3)
<com.android.mms.data.Conversation: void startQueryHaveLockedMessages(android.content.AsyncQueryHandler,long,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void confirmDeleteThread(long)> (1)
<com.android.mms.ui.ConversationList: void confirmDeleteThread(long,android.content.AsyncQueryHandler)> (3)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList$6: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,long,java.lang.StringBuilder)> (1)
<com.android.mms.transaction.PushReceiver: boolean isDuplicateNotification(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.transaction.PushReceiver: boolean access$100(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.android.mms.ui.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.transaction.MessagingNotification: int getUndeliveredMessageCount(android.content.Context,long[])> (3)
<com.android.mms.transaction.MessagingNotification: void notifyFailed(android.content.Context,boolean,long,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotification(android.content.Context)> (3)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotificationForThread(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (2)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (1)
<com.android.mms.ui.ComposeMessageActivity$11: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void messageFailedToSend(android.net.Uri,int)> (2)
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.transaction.PushReceiver: long findThreadId(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<com.android.mms.transaction.PushReceiver: long access$000(android.content.Context,com.google.android.mms.pdu.GenericPdu,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(long)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,long,java.lang.String)> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.drm.DrmUtils: void cleanupStorage(android.content.Context)> (2)
<com.android.mms.MmsApp: void onCreate()> (1)
<com.android.mms.MmsApp: void onTerminate()> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.data.Conversation: void startDeleteAll(android.content.AsyncQueryHandler,int,boolean)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.data.Conversation: void startDelete(android.content.AsyncQueryHandler,int,boolean,long)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
19 Callers:
<com.android.server.WifiService: void enforceMulticastChangePermission()> (3)
<com.android.server.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<com.android.server.WifiService: void initializeMulticastFiltering()> (2)
<com.android.server.WifiService: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void initializeMulticastFiltering()> ()
<android.net.wifi.IWifiManager$Stub: void initializeMulticastFiltering()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void releaseMulticastLock()> ()
<android.net.wifi.IWifiManager$Stub: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (1)
<android.net.wifi.IWifiManager: void initializeMulticastFiltering()> (1)
<android.net.wifi.IWifiManager: void releaseMulticastLock()> (2)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$MulticastLock: void acquire()> ()
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()> ()
<android.net.wifi.WifiManager$MulticastLock: void release()> (1)
<android.net.wifi.WifiManager$MulticastLock: void finalize()> ()
Permission:android.permission.GET_TASKS
20 Callers:
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManagerNative: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> (2)
<android.app.ActivityManager: java.util.List getRunningTasks(int)> ()
<com.android.systemui.recent.RecentApplicationsActivity: void updateRunningTasks()> (1)
<com.android.systemui.recent.RecentApplicationsActivity$2: void run()> (1)
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int)> (1)
<android.app.ActivityManagerNative: java.util.List getRecentTasks(int,int)> (2)
<android.app.IActivityManager: java.util.List getRecentTasks(int,int)> (1)
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> (3)
<com.android.internal.policy.impl.RecentApplicationsDialog: void reloadButtons()> (1)
<com.android.systemui.recent.RecentApplicationsActivity: void updateRecentTasks()> (1)
<com.android.systemui.statusbar.tablet.RecentAppsPanel: java.util.ArrayList getRecentTasks()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onStart()> (1)
<com.android.systemui.recent.RecentApplicationsActivity: void access$700(com.android.systemui.recent.RecentApplicationsActivity)> (1)
<com.android.systemui.statusbar.tablet.RecentAppsPanel: void refreshApplicationList()> (1)
<com.android.systemui.statusbar.tablet.RecentAppsPanel: void onVisibilityChanged(android.view.View,int)> (3)
Permission:android.permission.ACCESS_WIFI_STATE
265 Callers:
<com.android.server.WifiService: void enforceAccessPermission()> (12)
<com.android.server.WifiService: android.net.DhcpInfo getDhcpInfo()> (2)
<com.android.server.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<com.android.server.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<com.android.server.WifiService: android.os.Messenger getMessenger()> (2)
<com.android.server.WifiService: boolean isMulticastEnabled()> (2)
<com.android.server.WifiService: boolean pingSupplicant()> (2)
<com.android.server.WifiService: int getFrequencyBand()> (2)
<com.android.server.WifiService: int getWifiApEnabledState()> (2)
<com.android.server.WifiService: int getWifiEnabledState()> (2)
<com.android.server.WifiService: java.lang.String getConfigFile()> (2)
<com.android.server.WifiService: java.util.List getConfiguredNetworks()> (2)
<com.android.server.WifiService: java.util.List getScanResults()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.DhcpInfo getDhcpInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isMulticastEnabled()> ()
<android.net.wifi.IWifiManager$Stub: boolean isMulticastEnabled()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean pingSupplicant()> ()
<android.net.wifi.IWifiManager$Stub: boolean pingSupplicant()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()> ()
<android.net.wifi.IWifiManager$Stub: int getFrequencyBand()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiApEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()> ()
<android.net.wifi.IWifiManager$Stub: java.lang.String getConfigFile()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getConfiguredNetworks()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getScanResults()> (2)
<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (1)
<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (1)
<android.net.wifi.IWifiManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.IWifiManager: boolean isMulticastEnabled()> (1)
<android.net.wifi.IWifiManager: boolean pingSupplicant()> (1)
<android.net.wifi.IWifiManager: int getFrequencyBand()> (1)
<android.net.wifi.IWifiManager: int getWifiApEnabledState()> (1)
<android.net.wifi.IWifiManager: int getWifiEnabledState()> (1)
<android.net.wifi.IWifiManager: java.lang.String getConfigFile()> (1)
<android.net.wifi.IWifiManager: java.util.List getConfiguredNetworks()> (1)
<android.net.wifi.IWifiManager: java.util.List getScanResults()> (1)
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> ()
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (11)
<android.net.wifi.WifiManager: android.os.Messenger getMessenger()> (2)
<android.net.wifi.WifiManager: boolean isMulticastEnabled()> ()
<android.net.wifi.WifiManager: boolean pingSupplicant()> ()
<android.net.wifi.WifiManager: int getFrequencyBand()> (1)
<android.net.wifi.WifiManager: int getWifiApState()> (4)
<android.net.wifi.WifiManager: int getWifiState()> (7)
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> (1)
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> (4)
<android.net.wifi.WifiManager: java.util.List getScanResults()> (3)
<com.android.settings.TetherSettings: void initWifiTethering()> (1)
<com.android.settings.wifi.WifiApEnabler: void updateTetherState(java.lang.Object[],java.lang.Object[],java.lang.Object[])> (1)
<android.net.sip.SipAudioCall: boolean isWifiOn()> (1)
<com.android.server.WifiWatchdogService$2: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.server.WifiWatchdogService: boolean requiresWatchdog(java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService: void handleBackgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.deviceinfo.Status: void setWifiStatus()> (1)
<com.android.settings.wifi.AdvancedSettings: void refreshWifiInfo()> (1)
<com.android.settings.wifi.WifiEnabler: void handleStateChanged(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiSettings: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiStatusTest$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void updateWifiState(android.content.Intent)> (1)
<android.net.wifi.WifiManager: void asyncConnect(android.content.Context,android.os.Handler)> (2)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (1)
<com.android.settings.wifi.AdvancedSettings: void initPreferences()> (1)
<android.net.wifi.WifiManager: boolean isWifiApEnabled()> ()
<com.android.settings.TetherSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.wifi.WifiEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.net.wifi.WifiManager: boolean isWifiEnabled()> (8)
<com.android.providers.settings.SettingsBackupAgent: int enableWifi(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.providers.settings.SettingsBackupAgent: void onCreate()> (1)
<com.android.settings.wifi.WifiConfigInfo: void onResume()> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onBackButtonPressed()> (1)
<com.android.settings.wifi.WifiSettings: java.util.Collection constructAccessPoints()> (1)
<com.android.systemui.statusbar.policy.NetworkController: java.lang.String huntForSsid(android.net.wifi.WifiInfo)> (1)
<com.android.server.WifiWatchdogService: boolean hasRequiredNumberOfAps(java.lang.String)> (1)
<com.android.settings.wifi.WifiStatusTest: void handleScanResultsAvailable()> (1)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiApEnabler: void access$100(com.android.settings.wifi.WifiApEnabler,java.lang.Object[],java.lang.Object[],java.lang.Object[])> (1)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<com.android.server.WifiWatchdogService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService: void onConnected(java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService: void access$900(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiEnabler: void access$200(com.android.settings.wifi.WifiEnabler,android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.wifi.WifiSettings: void handleEvent(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest: void access$100(com.android.settings.wifi.WifiStatusTest,android.net.NetworkInfo)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onCreate(android.os.Bundle)> (1)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.wifi.WifiSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: void forget()> (1)
<com.android.settings.wifi.WifiSettings: void pauseWifiScan()> (1)
<com.android.settings.wifi.WifiSettings: void refreshAccessPoints()> (1)
<com.android.settings.wifi.WifiSettings: void resumeWifiScan()> (1)
<com.android.settings.wifi.WifiSettings: void submit(com.android.settings.wifi.WifiConfigController)> (2)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.development.Connectivity: void access$1300(com.android.development.Connectivity)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettings: void updateAccessPoints()> (4)
<com.android.settings.wifi.WifiStatusTest: void access$200(com.android.settings.wifi.WifiStatusTest)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (25)
<com.android.settings.wifi.WifiApEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.sip.SipAudioCall: void startAudio()> (3)
<com.android.server.WifiWatchdogService: void access$1500(com.android.server.WifiWatchdogService,java.lang.String,java.lang.String)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void backgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.wifi.WifiEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiSettings: void access$000(com.android.settings.wifi.WifiSettings,android.content.Context,android.content.Intent)> (1)
<com.android.settings.wifi.WifiStatusTest$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (30)
<com.android.systemui.statusbar.StatusBar: android.view.View makeStatusBarView()> (1)
<com.android.settings.SettingsPreferenceFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.settings.wifi.WifiSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void showConfigUi(com.android.settings.wifi.AccessPoint,boolean)> (1)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void refreshAccessPoints(boolean)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onConnectButtonPressed()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<com.android.server.WifiWatchdogService: void handleApAlive(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (5)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.StatusBar: void start()> (3)
<com.android.settings.vpn.VpnEditor: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: void showConfigUi(com.android.settings.wifi.AccessPoint,boolean)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void updateConnectionState(android.net.NetworkInfo$DetailedState)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.internal.telephony.Connection: void separate()> (1)
<com.android.server.WifiWatchdogService: void handleCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.settings.wifi.WifiSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.wifi.WifiSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.wifi.WifiSettings: void onAddNetworkPressed()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.phone.PhoneUtils: void separateCall(com.android.internal.telephony.Connection)> (1)
<com.android.server.WifiWatchdogService: void access$800(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.settings.SettingsPreferenceFragment: boolean onContextItemSelected(android.view.MenuItem)> (4)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void onAddNetworkButtonPressed()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<com.android.phone.ManageConferenceUtils: void separateConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void checkAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.vpn.VpnSettings: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (3)
<com.android.phone.ManageConferenceUtils$2: void onClick(android.view.View)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
Permission:android.permission.ACCESS_MOCK_LOCATION
43 Callers:
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
Permission:android.permission.EXPAND_STATUS_BAR
19 Callers:
<com.android.server.StatusBarManagerService: void enforceExpandStatusBar()> (2)
<com.android.server.StatusBarManagerService: void collapse()> (3)
<com.android.server.StatusBarManagerService: void expand()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void collapse()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void collapse()> (2)
<com.android.server.StatusBarManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expand()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void expand()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.statusbar.IStatusBarService: void collapse()> (1)
<com.android.internal.statusbar.IStatusBarService: void expand()> (1)
<com.android.server.StatusBarManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.StatusBarManager: void collapse()> (2)
<android.app.StatusBarManager: void expand()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClickNetwork()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClickSettings()> (1)
<com.android.launcher2.Launcher: void showNotifications()> (1)
<com.android.systemui.statusbar.tablet.SettingsView: void onClick(android.view.View)> (1)
<com.android.launcher2.Launcher: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
Permission:android.permission.READ_LOGS
7 Callers:
<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (2)
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> ()
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (2)
<com.android.internal.os.IDropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> (1)
<com.android.internal.os.IDropBoxManagerService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)> ()
<com.android.server.DropBoxManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.BLUETOOTH_ADMIN
1070 Callers:
<android.server.BluetoothService: boolean disable(boolean)> (6)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean disable(boolean)> (2)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean disable()> ()
<android.server.BluetoothService: void restart()> (2)
<android.server.BluetoothService: void updateBluetoothState(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean disable(boolean)> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<android.bluetooth.BluetoothAdapter: boolean disable()> (3)
<com.android.internal.app.ShutdownThread: void run()> (2)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.server.BluetoothService: boolean enable(boolean)> (2)
<android.server.BluetoothService: boolean enable()> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<android.server.BluetoothService: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: boolean persistString(java.lang.String)> (3)
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setEnabled(boolean)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.server.BluetoothService: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean startDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void startScanning(boolean)> (5)
<com.android.settings.bluetooth.BluetoothFindNearby: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onBluetoothStateChanged(int)> (4)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothCallback: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean cancelDiscovery()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean cancelDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void cancelDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void stopScanning()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (6)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.BluetoothFindNearby: void onPause()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (18)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DockSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.TextToSpeechSettings: void onPause()> (3)
<com.android.settings.vpn.VpnSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean isBondingFeasible(java.lang.String)> (2)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<android.server.BluetoothService: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> (2)
<android.bluetooth.IBluetooth: boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])> ()
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<android.server.BluetoothService: boolean removeBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean removeBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean removeBond(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean removeBond()> (1)
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setTrust(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setTrust(java.lang.String,boolean)> (2)
<android.server.BluetoothService: boolean removeBondInternal(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean setTrust(java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothDeviceProfileState: boolean processCommand(int)> (9)
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> (1)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void enter()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.internal.util.State: void enter()> (13)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<android.server.BluetoothService: boolean setPin(java.lang.String,byte[])> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(java.lang.String,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPin(java.lang.String,byte[])> (2)
<android.server.BluetoothService: boolean attemptAutoPair(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean setPin(java.lang.String,byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createDisplayPasskeyOrPinDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onPair(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (19)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<android.server.BluetoothService: boolean setPasskey(java.lang.String,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(java.lang.String,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPasskey(java.lang.String,int)> (2)
<android.bluetooth.IBluetooth: boolean setPasskey(java.lang.String,int)> (1)
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> (1)
<android.server.BluetoothService: boolean setPairingConfirmation(java.lang.String,boolean)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPairingConfirmation(java.lang.String,boolean)> (2)
<android.bluetooth.IBluetooth: boolean setPairingConfirmation(java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> (2)
<android.server.BluetoothService: boolean setRemoteOutOfBandData(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteOutOfBandData(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setRemoteOutOfBandData(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setRemoteOutOfBandData(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean setRemoteOutOfBandData()> (1)
<android.server.BluetoothService: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: void disconnectDevices()> (1)
<android.bluetooth.IBluetooth: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$100(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.internal.util.State: void exit()> (62)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<android.server.BluetoothService: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.HidProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.HidProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetooth: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.settings.bluetooth.HidProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.server.BluetoothA2dpService: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean isA2dpPlaying()> (1)
<android.server.BluetoothA2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.A2dpProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (9)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean initiateScoUsingVirtualVoiceCall()> (1)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$1600(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.CallManager)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients(android.os.IBinder,boolean)> (4)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.voicedialer.VoiceDialerActivity$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.media.AudioService$2: void onServiceDisconnected(int)> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService$SetModeDeathHandler: void binderDied()> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void stopBluetoothSco()> ()
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void setMode(int)> (1)
<com.android.internal.telephony.CallManager: void setAudioMode()> (1)
<com.android.phone.PhoneUtils: void setAudioMode(com.android.internal.telephony.CallManager)> (5)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.PhoneUtils: void setAudioMode()> (4)
<com.android.phone.PhoneUtils: void switchHoldingAndActive(com.android.internal.telephony.Call)> (6)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.PhoneUtils: void mergeCalls(com.android.internal.telephony.CallManager)> (4)
<com.android.phone.PhoneUtils: void sendEmptyFlash(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (5)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneUtils: void mergeCalls()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree: void audioOff()> (11)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: boolean terminateScoUsingVirtualVoiceCall()> (6)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void setState(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$5400(com.android.phone.BluetoothHandsfree)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (6)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$1600(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (3)
<com.android.voicedialer.VoiceDialerActivity: void onStop()> (1)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<android.server.BluetoothA2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (7)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void adjustOtherSinkPriorities(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.bluetooth.IBluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$300(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean isConnectSinkFeasible(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<android.bluetooth.BluetoothPbap: boolean disconnect()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.HeadsetProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: int getPriority(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (8)
<com.android.phone.BluetoothHeadsetService: int access$100(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void adjustOtherHeadsetPriorities(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void adjustPriorities()> (1)
<android.bluetooth.BluetoothDeviceProfileState: void handleConnectionOfOtherProfiles(int)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.phone.BluetoothHeadsetService: void access$1000(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean getAutoConnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: java.lang.CharSequence[] initBtSettings(android.bluetooth.BluetoothDevice,int,boolean)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onClick(android.view.View)> (1)
<com.android.settings.bluetooth.DockService: void createDialog(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.phone.BluetoothHeadsetService: void setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (4)
<com.android.phone.BluetoothHeadsetService: void access$1400(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void doOpushSdp()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
Permission:android.permission.VIBRATE
1077 Callers:
<com.android.server.VibratorService: void vibrate(long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(long,android.os.IBinder)> (1)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.Vibrator: void vibrate(long)> (11)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.internal.app.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (5)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (3)
<com.android.phone.Ringer$VibratorThread: void run()> (2)
<com.android.stk.ToneDialog: void onCreate(android.os.Bundle)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void vibrate()> (2)
<com.android.voicedialer.VoiceDialerActivity: int playSound(int)> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (1)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.server.ServerThread: void run()> (1)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,com.android.launcher2.DragSource,java.lang.Object,int)> (3)
<com.android.launcher2.DragController: void startDrag(android.view.View,android.graphics.Bitmap,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (2)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (1)
<com.android.phone.Ringer: void ring()> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar$6: void run()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$7: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity: int access$600(com.android.voicedialer.VoiceDialerActivity,int)> (4)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (1)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.view.WindowManagerPolicy: boolean detectSafeMode()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$000(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.launcher2.AllApps3D: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.CustomizePagedView: boolean beginDragging(android.view.View)> (1)
<com.android.launcher2.Workspace: void startDrag(com.android.launcher2.CellLayout$CellInfo)> (1)
<com.android.launcher2.AllAppsPagedView: boolean beginDragging(android.view.View)> (1)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int)> (2)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.voicedialer.VoiceDialerActivity$ErrorRunnable: void run()> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean beginDragging(android.view.View)> (4)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.AllApps2D: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Folder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.voicedialer.RecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onLongClick(android.view.View)> (3)
<com.android.launcher2.PagedViewWithDraggableItems: void determineDraggingStart(android.view.MotionEvent)> (3)
<com.android.launcher2.UserFolder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.launcher2.AllAppsPagedView: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.CustomizePagedView: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.AllAppsPagedView: void determineDraggingStart(android.view.MotionEvent)> (1)
<com.android.launcher2.CustomizePagedView: void determineDraggingStart(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: void handleTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.launcher2.AllAppsPagedView: void handleTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.CustomizePagedView: void handleTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.launcher2.AllAppsPagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.CustomizePagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.PagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.AllAppsPagedView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.launcher2.CustomizePagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.PagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.Workspace: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.launcher2.SmoothPagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.Workspace: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.SmoothPagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.server.VibratorService: void vibratePattern(long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(long[],int,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibratePattern(long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService: void vibratePattern(long[],int,android.os.IBinder)> (1)
<android.os.Vibrator: void vibrate(long[],int)> (7)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onPress(int)> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void start()> (1)
<com.android.phone.HapticFeedback: void vibrate()> (4)
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,int,int,java.lang.String,int,int,android.app.Notification,int[])> (2)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$200(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (1)
<com.android.contacts.TwelveKeyDialer: void keyPressed(int)> (2)
<com.android.contacts.TwelveKeyDialer: void onClick(android.view.View)> (1)
<com.android.phone.EmergencyDialer: void keyPressed(int)> (2)
<com.android.phone.EmergencyDialer: void onClick(android.view.View)> (1)
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(java.lang.String,int,int,java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.server.NotificationManagerService: void enqueueNotificationWithTagPriority(java.lang.String,java.lang.String,int,int,android.app.Notification,int[])> (2)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.contacts.TwelveKeyDialer: boolean onLongClick(android.view.View)> (1)
<com.android.phone.EmergencyDialer: boolean onLongClick(android.view.View)> (1)
<com.android.server.am.ServiceRecord$1: void run()> (1)
<com.android.server.NotificationManagerService: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (3)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTagPriority(java.lang.String,java.lang.String,int,int,android.app.Notification,int[])> ()
<android.app.INotificationManager$Stub: void enqueueNotificationWithTagPriority(java.lang.String,java.lang.String,int,int,android.app.Notification,int[])> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> ()
<android.app.INotificationManager$Stub: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.server.NotificationManagerService: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (2)
<android.app.INotificationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.INotificationManager: void enqueueNotificationWithTagPriority(java.lang.String,java.lang.String,int,int,android.app.Notification,int[])> (1)
<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])> (1)
<android.app.INotificationManager$Stub$Proxy: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> ()
<android.app.INotificationManager$Stub: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (2)
<com.android.server.NotificationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.systemui.statusbar.policy.LocationController: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)> (1)
<android.app.INotificationManager: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])> (1)
<android.app.NotificationManager: void notify(int,android.app.Notification)> (51)
<android.accounts.AccountManagerService: void installNotification(int,android.app.Notification)> (2)
<android.content.SyncManager$SyncHandler: void installHandleTooManyDeletesNotification(android.accounts.Account,java.lang.String,long)> (1)
<com.android.basicsmsreceiver.SmsMessageReceiver: void addNotification(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateActiveNotification()> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateCompletedNotification()> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void updateIncomingFileConfirmNotification()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void createPbapNotification(java.lang.String)> (1)
<com.android.browser.WebStorageSizeManager: void scheduleOutOfSpaceNotification()> (2)
<com.android.calendar.alerts.AlertService: void postNotification(android.content.Context,android.content.SharedPreferences,java.lang.String,java.lang.String,int,boolean,boolean,long,boolean)> (1)
<com.android.contacts.vcard.ExportProcessor: void doCancelNotification()> (1)
<com.android.contacts.vcard.ExportProcessor: void doFinishNotification(java.lang.String,java.lang.String)> (1)
<com.android.contacts.vcard.ExportProcessor: void doProgressNotification(android.net.Uri,int,int)> (1)
<com.android.contacts.vcard.ImportProcessor: void doCancelNotification()> (1)
<com.android.contacts.vcard.ImportProcessor: void doFinishNotification(android.net.Uri)> (1)
<com.android.contacts.vcard.ImportProgressNotifier: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void showFailureNotification(int)> (1)
<com.android.contacts.vcard.VCardService: void handleCancelRequest(com.android.contacts.vcard.CancelRequest)> (1)
<com.android.contacts.vcard.VCardService: void handleExportRequest(com.android.contacts.vcard.ExportRequest)> (1)
<com.android.contacts.vcard.VCardService: void handleImportRequest(com.android.contacts.vcard.ImportRequest)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze()> (3)
<com.android.deskclock.AlarmReceiver: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmReceiver: void updateNotification(android.content.Context,com.android.deskclock.Alarm,int)> (1)
<com.android.email.NotificationController$2: void run()> (1)
<com.android.email.NotificationController: void postAccountNotification(com.android.emailcommon.provider.EmailContent$Account,java.lang.String,java.lang.String,java.lang.String,android.content.Intent,int)> (4)
<com.android.exchange.CalendarSyncEnabler: void showNotificationForTest(java.lang.String)> (1)
<com.android.internal.location.GpsNetInitiatedHandler: void setNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setNotification(int)> (1)
<com.android.mms.transaction.MessagingNotification: void notifyFailed(android.content.Context,boolean,long,boolean)> (3)
<com.android.mms.transaction.MessagingNotification: void updateNotification(android.content.Context,android.content.Intent,java.lang.String,int,boolean,java.lang.CharSequence,long,java.lang.String,int,int)> (1)
<com.android.mms.transaction.SimFullReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.SmsRejectedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.EmergencyCallbackModeService: void showNotification(long)> (3)
<com.android.phone.NotificationMgr: void notifyMissedCall(java.lang.String,java.lang.String,java.lang.String,long)> (3)
<com.android.phone.NotificationMgr: void showDataDisconnectedRoaming()> (2)
<com.android.phone.NotificationMgr: void showNetworkSelection(java.lang.String)> (1)
<com.android.phone.NotificationMgr: void updateCfi(boolean)> (1)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (7)
<com.android.phone.NotificationMgr: void updateMwi(boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: void onLegacyContactImportFailure()> (1)
<com.android.providers.downloads.RealSystemFacade: void postNotification(long,android.app.Notification)> (1)
<com.android.server.connectivity.Tethering: void showTetheredNotification(int)> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.NotificationManagerService: void updateAdbNotification(boolean)> (1)
<com.android.server.ThrottleService$MyHandler: void postNotification(int,int,int,int)> (1)
<com.android.server.UiModeManagerService: void adjustStatusBarCarModeLocked()> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void enableNotification(android.app.Notification)> (2)
<com.android.server.WifiService: void setNotificationVisible(boolean,int,boolean,int)> (2)
<com.android.settings.bluetooth.BluetoothPairingRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.stk.StkAppService: void launchIdleText()> (1)
<com.android.systemui.usb.StorageNotification: void setMediaStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (1)
<com.android.systemui.usb.StorageNotification: void setUsbStorageNotification(int,int,int,boolean,boolean,android.app.PendingIntent)> (2)
<android.accounts.AccountManagerService: void createNoCredentialsPermissionNotification(android.accounts.Account,android.content.Intent)> (1)
<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,android.content.SyncManager$ActiveSyncContext)> (4)
<com.android.basicsmsreceiver.SmsMessageReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$300(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$400(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification: void access$500(com.android.bluetooth.opp.BluetoothOppNotification)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService,java.lang.String)> (2)
<com.android.browser.WebStorageSizeManager: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.browser.WebStorageSizeManager: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.contacts.vcard.ExportProcessor: void run()> (1)
<com.android.contacts.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.vcard.ImportProcessor: void runInternal()> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void access$400(com.android.contacts.vcard.ImportVCardActivity,int)> (1)
<com.android.contacts.vcard.VCardService: void access$200(com.android.contacts.vcard.VCardService,com.android.contacts.vcard.CancelRequest)> (1)
<com.android.contacts.vcard.VCardService: void access$100(com.android.contacts.vcard.VCardService,com.android.contacts.vcard.ExportRequest)> (1)
<com.android.contacts.vcard.VCardService: void access$000(com.android.contacts.vcard.VCardService,com.android.contacts.vcard.ImportRequest)> (1)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (3)
<com.android.deskclock.AlarmAlert: void snooze()> (1)
<com.android.deskclock.AlarmReceiver: void access$000(com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.email.NotificationController: void showDownloadForwardFailedNotification(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.NotificationController: void showLoginFailedNotification(long)> (3)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.email.SecurityPolicy: void policiesRequired(long)> (2)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.internal.location.GpsNetInitiatedHandler: void handleNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onRestrictedStateChanged(android.os.AsyncResult)> (3)
<com.android.mms.transaction.MessagingNotification: void notifyDownloadFailed(android.content.Context,long)> (1)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context,boolean)> (2)
<com.android.mms.transaction.MessagingNotification: void notifySendFailed(android.content.Context)> (1)
<com.android.mms.transaction.MessagingNotification: void access$200(android.content.Context,android.content.Intent,java.lang.String,int,boolean,java.lang.CharSequence,long,java.lang.String,int,int)> (1)
<com.android.phone.EmergencyCallbackModeService: void access$200(com.android.phone.EmergencyCallbackModeService,long)> (1)
<com.android.phone.EmergencyCallbackModeService: void resetEcmTimer(android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallbackModeService: void startTimerNotification()> (2)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.NotificationMgr: void updateNetworkSelection(int)> (1)
<com.android.phone.CallNotifier: void onCfiChanged(boolean)> (1)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.CallNotifier: void onMwiChanged(boolean)> (3)
<com.android.providers.contacts.ContactsProvider2: void importLegacyContactsInBackground()> (1)
<com.android.providers.downloads.SystemFacade: void postNotification(long,android.app.Notification)> (2)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.NotificationManagerService: void access$1100(com.android.server.NotificationManagerService,boolean)> (1)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void showDisconnect()> (1)
<com.android.server.vpn.VpnService$NotificationHelper: void update(long)> (1)
<com.android.server.WifiService: void checkAndSetNotification()> (1)
<com.android.server.WifiService: void resetNotification()> (1)
<com.android.stk.StkAppService: void handleCmd(com.android.internal.telephony.cat.CatCmdMessage)> (2)
<com.android.systemui.usb.StorageNotification: void onStorageStateChangedAsync(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.systemui.usb.StorageNotification: void updateUsbMassStorageNotification(boolean)> (2)
<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,java.lang.String)> (2)
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.bluetooth.opp.BluetoothOppNotification$NotificationUpdateThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.browser.Tab$3: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.browser.Tab$3: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> (1)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.contacts.vcard.ProcessorBase: void run()> ()
<com.android.vcard.VCardEntryConstructor: void endEntry()> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlertFullScreen$2: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (1)
<com.android.deskclock.AlarmReceiver$1: void run()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)> (1)
<com.android.email.MessagingController: void sendPendingMessagesSynchronous(com.android.emailcommon.provider.EmailContent$Account,long)> (2)
<com.android.email.MessagingController: void synchronizeMailboxSynchronous(com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (1)
<com.android.email.service.AccountService$1: void notifyLoginFailed(long)> (2)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.email.activity.setup.AccountSecurity$2: void run()> (1)
<com.android.email.service.PolicyService$1: void policiesRequired(long)> (2)
<com.android.server.location.GpsLocationProvider: void reportNiNotification(int,int,int,int,int,java.lang.String,java.lang.String,int,int,java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.SmsReceiverService: void messageFailedToSend(android.net.Uri,int)> (2)
<com.android.mms.transaction.MessagingNotification: void updateSendFailedNotification(android.content.Context)> (3)
<com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo: void deliver(android.content.Context,boolean,int,int)> (1)
<com.android.phone.EmergencyCallbackModeService$3: void onTick(long)> (1)
<com.android.phone.EmergencyCallbackModeService: void access$000(com.android.phone.EmergencyCallbackModeService,android.os.AsyncResult)> (1)
<com.android.phone.EmergencyCallbackModeService: void onCreate()> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.phone.CallNotifier: void access$100(com.android.phone.CallNotifier,boolean)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.CallNotifier: void access$000(com.android.phone.CallNotifier,boolean)> (1)
<com.android.phone.CallNotifier: void sendMwiChangedDelayed(long)> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.providers.downloads.DownloadNotification: void notificationForCompletedDownload(long,java.lang.String,int,int,long)> (2)
<com.android.providers.downloads.DownloadNotification: void updateActiveNotification(java.util.Collection)> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.NotificationManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.vpn.VpnService: void onDisconnect()> (6)
<com.android.server.vpn.VpnService$1: void run()> (1)
<com.android.server.WifiService: void access$1600(com.android.server.WifiService)> (1)
<com.android.server.WifiService: void access$1400(com.android.server.WifiService)> (2)
<com.android.stk.StkAppService: void access$400(com.android.stk.StkAppService,com.android.internal.telephony.cat.CatCmdMessage)> (1)
<com.android.stk.StkAppService: void handleDelayedCmd()> (1)
<com.android.systemui.usb.StorageNotification: void access$100(com.android.systemui.usb.StorageNotification,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.systemui.usb.StorageNotification: void onUsbMassStorageConnectionChangedAsync(boolean)> (1)
<android.content.SyncManager: void sendSyncAlarmMessage()> (1)
<android.content.SyncManager: void sendCheckAlarmsMessage()> (3)
<android.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.vcard.VCardInterpreter: void endEntry()> (2)
<com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.MessagingController$10: void run()> (1)
<com.android.email.MessagingController$9: void run()> (1)
<com.android.email.MessagingController: void access$400(com.android.email.MessagingController,com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (2)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void notifyLoginFailed(long)> ()
<com.android.emailcommon.service.IAccountService$Stub: void notifyLoginFailed(long)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void policiesRequired(long)> ()
<com.android.emailcommon.service.IPolicyService$Stub: void policiesRequired(long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateAllNotifications(android.content.Context)> (2)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.PhoneApp: void access$1300(com.android.phone.PhoneApp,android.content.Intent)> (1)
<com.android.phone.CallNotifier$1: void onCallForwardingIndicatorChanged(boolean)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.CallNotifier$1: void onMessageWaitingIndicatorChanged(boolean)> (1)
<com.android.providers.downloads.DownloadNotification: void updateCompletedNotification(java.util.Collection)> (1)
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.downloads.DownloadNotification: void updateNotification(java.util.Collection)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.vpn.L2tpIpsecPskService: void onDisconnect()> (1)
<com.android.server.vpn.L2tpIpsecService: void onDisconnect()> (1)
<com.android.server.vpn.L2tpService: void onDisconnect()> (1)
<com.android.server.vpn.PptpService: void onDisconnect()> (1)
<com.android.server.vpn.VpnServiceBinder$2: void run()> (1)
<com.android.server.vpn.VpnService: void onError(java.lang.Throwable)> (9)
<com.android.server.WifiService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiService$NotificationEnabledSettingObserver: void onChange(boolean)> (1)
<com.android.stk.StkAppService: void access$1200(com.android.stk.StkAppService)> (1)
<com.android.systemui.usb.StorageNotification$2: void run()> (1)
<com.android.systemui.usb.StorageNotification: void access$000(com.android.systemui.usb.StorageNotification,boolean)> (1)
<android.content.SyncManager: void access$900(android.content.SyncManager)> (1)
<android.content.SyncManager: void access$100(android.content.SyncManager)> (3)
<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])> (2)
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> (6)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.vcard.VCardInterpreterCollection: void endEntry()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard(boolean)> (3)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (6)
<com.android.email.MessagingController$2: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void notifyLoginFailed(long)> (1)
<com.android.emailcommon.service.IPolicyService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IPolicyService: void policiesRequired(long)> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.data.Conversation$1: void run()> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (7)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (1)
<com.android.internal.util.State: void enter()> (13)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.server.vpn.L2tpIpsecPskService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.PptpService: void onError(java.lang.Throwable)> (1)
<com.android.server.vpn.VpnService: boolean onConnect(java.lang.String,java.lang.String)> (5)
<com.android.server.vpn.VpnService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (5)
<com.android.server.vpn.VpnService: void checkConnectivity()> (5)
<com.android.server.vpn.VpnService: void onError(int)> (5)
<com.android.server.vpn.VpnService: void waitUntilConnectedOrTimedout()> (5)
<com.android.systemui.usb.StorageNotification$1: void run()> (1)
<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$7: void onStatusChanged(int)> (2)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)> (1)
<android.content.SyncManager: void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseVCardFile()> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard(boolean)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.emailcommon.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (5)
<com.android.email.Controller$ControllerService$1: void loadAttachment(long,boolean)> (2)
<com.android.email.Controller$LegacyListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$1: void run()> (1)
<com.android.email.service.PolicyService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.PolicyServiceProxy$5: void run()> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.server.vpn.L2tpIpsecPskService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.L2tpIpsecService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.L2tpService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.PptpService: boolean onConnect(java.lang.String,java.lang.String)> (1)
<com.android.server.vpn.VpnServiceBinder$1: void run()> (1)
<com.android.server.vpn.L2tpIpsecPskService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.PptpService: void access$600(com.android.server.vpn.VpnService,java.lang.Throwable)> (1)
<com.android.server.vpn.L2tpIpsecPskService: void checkConnectivity()> (1)
<com.android.server.vpn.L2tpIpsecService: void checkConnectivity()> (1)
<com.android.server.vpn.L2tpService: void checkConnectivity()> (1)
<com.android.server.vpn.PptpService: void checkConnectivity()> (1)
<com.android.server.vpn.VpnService: void access$500(com.android.server.vpn.VpnService)> (5)
<com.android.server.vpn.L2tpIpsecPskService: void onError(int)> (1)
<com.android.server.vpn.L2tpIpsecService: void onError(int)> (1)
<com.android.server.vpn.L2tpService: void onError(int)> (1)
<com.android.server.vpn.PptpService: void onError(int)> (1)
<com.android.server.vpn.L2tpIpsecPskService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.L2tpIpsecService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.L2tpService: void waitUntilConnectedOrTimedout()> (1)
<com.android.server.vpn.PptpService: void waitUntilConnectedOrTimedout()> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$6: void onServiceChanged(android.content.SyncAdapterType,boolean)> (1)
<android.content.SyncManager: void scheduleLocalSync(android.accounts.Account,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V30: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseVCardFile()> (1)
<com.android.email.Controller$12: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.email.Controller$12$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasSyncService: void doProgressCallback(long,long,int)> (2)
<com.android.exchange.EasSyncService: void doStatusCallback(long,long,int)> (2)
<com.android.exchange.ExchangeService$1$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(long,boolean)> (2)
<com.android.email.MessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.MessagingListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.MessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.server.vpn.L2tpIpsecPskService: void access$500(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.L2tpIpsecService: void access$500(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.L2tpService: void access$500(com.android.server.vpn.VpnService)> (1)
<com.android.server.vpn.PptpService: void access$500(com.android.server.vpn.VpnService)> (1)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager: void access$1100(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager$6: void onServiceChanged(java.lang.Object,boolean)> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.email.Controller$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasOutboxService: void doProgressCallback(long,long,int)> (1)
<com.android.exchange.EasSyncService: void loadAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasOutboxService: void doStatusCallback(long,long,int)> (1)
<com.android.exchange.ExchangeService$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void loadAttachment(long,boolean)> (1)
<com.android.email.GroupMessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentFinished(long,long,long)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (2)
<com.android.email.Controller$12: void broadcastCallback(com.android.email.Controller$ServiceCallbackWrapper)> (1)
<com.android.exchange.EasOutboxService: void loadAttachment(com.android.exchange.PartRequest)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.ExchangeService$1: void broadcastCallback(com.android.exchange.ExchangeService$ServiceCallbackWrapper)> (4)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.MessagingController$8: void run()> (1)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<com.android.contacts.vcard.ImportProcessor: boolean readOneVCard(android.net.Uri,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.vcard.ImportRequest constructImportRequest(android.net.Uri,android.net.Uri)> (1)
<com.android.email.Controller$12: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.ExchangeService$1: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxListStatus(long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxStatus(long,int,int)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxListStatus(long,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxStatus(long,int,int)> (3)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.emailcommon.service.IEmailServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxListStatus(long,int,int)> (3)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.exchange.ExchangeService$2: void startSync(long,boolean)> (2)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.exchange.EasOutboxService: void sendCallback(long,java.lang.String,int)> (1)
<com.android.exchange.ExchangeService$1$2: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.ExchangeService$1$3: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.ExchangeService: void reloadFolderListFailed(long)> (1)
<com.android.exchange.ExchangeService$1$4: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void startSync(long,boolean)> (2)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (3)
<com.android.emailcommon.service.IEmailService: void startSync(long,boolean)> (3)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void updateFolderList(long)> (2)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.email.Controller: void sendMessage(long,long)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$5: void run()> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (2)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (3)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (3)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$1500(com.android.email.activity.MessageListFragment)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)> (1)
<android.os.Vibrator: void cancel()> (8)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void stop()> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.stk.ToneDialog: void onDestroy()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.phone.CallNotifier$EmergencyTonePlayerVibrator: void access$300(com.android.phone.CallNotifier$EmergencyTonePlayerVibrator)> (2)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (5)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.downloads.StorageManager: void trimDatabase()> (1)
<com.android.providers.downloads.StorageManager: void access$100(com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run()> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (1)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<android.net.Downloads$DownloadBase: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.net.Downloads$ById: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.net.Downloads$ByUri: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadService$1: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)> ()
<android.media.IMediaScannerListener$Stub: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.media.IMediaScannerListener: void scanCompleted(java.lang.String,android.net.Uri)> (1)
<android.media.MediaScannerConnection$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.DownloadService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles(int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace(java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace(int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination(com.android.providers.downloads.DownloadThread$State,byte[],int)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,boolean,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile(int,java.lang.String,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (2)
<com.android.browser.Controller$7$1: void run()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (2)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<android.net.Downloads$ByUri: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.Downloads$ById: android.net.Uri getDownloadUri(long)> (5)
<android.net.Downloads$ById: android.net.Downloads$StatusInfo getStatus(android.content.Context,long)> ()
<android.net.Downloads$ById: android.os.ParcelFileDescriptor openDownload(android.content.Context,long,java.lang.String)> ()
<android.net.Downloads$ById: java.io.InputStream openDownloadStream(android.content.Context,long)> ()
<android.net.Downloads$ById: java.lang.String getMimeTypeForId(android.content.Context,long)> ()
<android.net.Downloads$ById: void deleteDownload(android.content.Context,long)> ()
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> (9)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders(com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> (1)
<com.android.providers.downloads.DownloadInfo: void startIfReady(long,com.android.providers.downloads.StorageManager)> (2)
<com.android.providers.downloads.DownloadService: boolean scanFile(com.android.providers.downloads.DownloadInfo,boolean,boolean)> (2)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (2)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownload(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: boolean access$700(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo,boolean,boolean)> (1)
<com.android.providers.downloads.DownloadService: void deleteDownload(long)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo access$600(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void access$500(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: void access$800(com.android.providers.downloads.DownloadService,long)> (1)
Permission:android.permission.MODIFY_AUDIO_SETTINGS
687 Callers:
<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)> (5)
<android.media.AudioService: void setBluetoothScoOn(boolean)> (2)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<android.media.AudioService: void setSpeakerphoneOn(boolean)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> ()
<android.media.IAudioService$Stub: void setBluetoothScoOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> ()
<android.media.IAudioService$Stub: void setSpeakerphoneOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setBluetoothScoOn(boolean)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.IAudioService: void setSpeakerphoneOn(boolean)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setBluetoothScoOn(boolean)> (3)
<android.media.AudioManager: void setMode(int)> (1)
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> (2)
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void stopBluetoothSco()> ()
<com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread: void connectSco()> (1)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void connectSco()> (1)
<com.android.phone.BluetoothHandsfree: void closeConnectedSco()> (2)
<com.android.internal.telephony.CallManager: void setAudioMode()> (1)
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> ()
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (8)
<com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread: void run()> (2)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void access$1100(com.android.phone.BluetoothHandsfree)> (2)
<com.android.phone.BluetoothHandsfree: void audioOff()> (11)
<com.android.phone.PhoneUtils: void setAudioMode(com.android.internal.telephony.CallManager)> (5)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: void activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothEnabled()> (2)
<com.android.phone.BluetoothHandsfree: void connectScoThread()> (2)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void shutdown()> (1)
<com.android.phone.BluetoothHandsfree$SignalScoCloseThread: void shutdown()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: boolean terminateScoUsingVirtualVoiceCall()> (6)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.PhoneUtils: void setAudioMode()> (4)
<com.android.phone.PhoneUtils: void switchHoldingAndActive(com.android.internal.telephony.Call)> (6)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (9)
<com.android.phone.BluetoothHandsfree: void access$3200(com.android.phone.BluetoothHandsfree)> (3)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$1600(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHandsfree: boolean initiateScoUsingVirtualVoiceCall()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.PhoneUtils: void mergeCalls(com.android.internal.telephony.CallManager)> (4)
<com.android.phone.PhoneUtils: void sendEmptyFlash(com.android.internal.telephony.Phone)> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (3)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (5)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$5400(com.android.phone.BluetoothHandsfree)> (3)
<com.android.phone.BluetoothHeadsetService$6: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (6)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneUtils: void mergeCalls()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.CallManager)> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$1600(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.media.AudioService$SetModeDeathHandler: void binderDied()> (1)
<com.android.voicedialer.VoiceDialerActivity: void onStop()> (1)
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<android.bluetooth.BluetoothDeviceProfileState: boolean processCommand(int)> (9)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients(android.os.IBinder,boolean)> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void enter()> (1)
<android.media.AudioService$2: void onServiceDisconnected(int)> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.internal.util.State: void enter()> (13)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.internal.util.StateMachine: void start()> (13)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<android.media.AudioManager: boolean isBluetoothA2dpOn()> ()
<android.media.AudioManager: boolean isWiredHeadsetOn()> ()
<android.media.AudioManager: void setMicrophoneMute(boolean)> (1)
<com.android.phone.PhoneUtils: void setMuteInternal(com.android.internal.telephony.Phone,boolean)> (3)
<com.android.phone.PhoneUtils: void access$100(com.android.internal.telephony.Phone,boolean)> (1)
<com.android.phone.PhoneUtils: void setMute(boolean)> (7)
<com.android.phone.PhoneUtils: void startNewCall(com.android.internal.telephony.CallManager)> (2)
<com.android.phone.CallNotifier: void onResendMute()> (1)
<com.android.phone.InCallScreen: void onMuteClick()> (3)
<com.android.phone.PhoneUtils: java.lang.Boolean restoreMuteState()> (2)
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.media.AudioManager: void setParameters(java.lang.String)> (8)
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> (3)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: void configAudioParameters()> (1)
<com.android.phone.PhoneApp: void handleQueryTTYModeResponse(android.os.Message)> (1)
<com.android.phone.PhoneUtils: void turnOnNoiseSuppression(android.content.Context,boolean,boolean)> (1)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.phone.PhoneApp: void access$900(com.android.phone.PhoneApp,android.os.Message)> (1)
<com.android.phone.PhoneUtils: void restoreNoiseSuppression(android.content.Context)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$300(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean isConnectSinkFeasible(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothA2dp: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
143 Callers:
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (2)
<com.android.browser.BreadCrumbView: void popView()> (2)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onBackPressed()> (2)
<com.android.browser.CombinedBookmarkHistoryView: boolean onBackPressed()> (1)
<com.android.browser.ShortcutActivity: void onBackPressed()> (1)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onBackKey()> (2)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.CombinedBookmarkHistoryView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.OptionsMenuHandler: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PieControl$MenuAdapter: void onClick(android.view.View)> (1)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (3)
<com.android.browser.provider.BrowserProvider2: boolean isValidParent(java.lang.String,java.lang.String,long)> (1)
<com.android.browser.provider.BrowserProvider2: int updateHistoryInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.browser.provider.BrowserProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> (1)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> (2)
<com.android.browser.Controller$8: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.Controller$8: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> (1)
<com.android.browser.Controller$RetainIconsOnStartupTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$RetainIconsOnStartupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserSettings: void updateBookmarksRlzParameter(android.content.Context)> (1)
<com.android.browser.BrowserSettings: void access$3900(com.android.browser.BrowserSettings,android.content.Context)> (1)
<com.android.browser.BrowserSettings$RlzUpdateTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserSettings$RlzUpdateTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.homepages.RequestHandler: void writeTemplatedIndex()> (1)
<com.android.browser.homepages.RequestHandler: void doHandleRequest()> (1)
<com.android.browser.homepages.RequestHandler: void run()> (2)
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.browser.preferences.ImportWizard: void migrateBookmarks(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.preferences.ImportWizard: void done()> (1)
<com.android.browser.preferences.ImportWizard: void onClick(android.view.View)> (1)
<com.android.browser.SuggestionsAdapter$CombinedCursor: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (7)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserSettings: void clearHistory(android.content.Context)> (1)
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> ()
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: void loadBookmarks()> (1)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<com.android.browser.Controller$4: java.lang.String[] doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$4: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<android.webkit.WebIconDatabase$EventHandler: void bulkRequestIcons(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$500(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (2)
<android.webkit.WebIconDatabase$EventHandler: void postMessage(android.os.Message)> (1)
<android.webkit.WebIconDatabase$EventHandler: void access$900(android.webkit.WebIconDatabase$EventHandler,android.os.Message)> (7)
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<android.webkit.WebIconDatabase: void close()> (1)
<android.webkit.WebIconDatabase: void open(java.lang.String)> (1)
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)> (3)
<android.webkit.WebIconDatabase: void removeAllIcons()> (1)
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> ()
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)> (3)
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> (1)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.BrowserSettings: void clearCache(android.content.Context)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean,long)> (1)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryView$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryView$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$GetAccountsTask: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$GetAccountsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.BATTERY_STATS
18 Callers:
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (1)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (2)
<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimeBattery()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimeBattery()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimeBattery()> ()
<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: long getAwakeTimePlugged()> ()
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimePlugged()> (2)
<com.android.internal.app.IBatteryStats: long getAwakeTimePlugged()> ()
Permission:android.permission.READ_USER_DICTIONARY
102 Callers:
<com.android.inputmethod.latin.UserDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.UserDictionary: void addWord(java.lang.String,int)> (3)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.ExpandableDictionary: void addWord(java.lang.String,int)> (7)
<com.android.inputmethod.latin.LatinIME: boolean addWordToDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.AutoDictionary: void addWord(java.lang.String,int)> (2)
<com.android.inputmethod.latin.AutoDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.UserBigramDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.UserDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.CandidateView: void addToDictionary(java.lang.CharSequence)> (2)
<com.android.inputmethod.latin.LatinIME: void checkAddToDictionary(java.lang.CharSequence,int,boolean)> (2)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.CandidateView: boolean onLongClick(android.view.View)> (1)
<com.android.inputmethod.latin.CandidateView: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void addToAutoAndUserBigramDictionaries(java.lang.CharSequence,int)> (3)
<com.android.inputmethod.latin.LatinIME: void addToOnlyBigramDictionary(java.lang.CharSequence,int)> (1)
<com.android.inputmethod.latin.LatinIME: boolean pickDefaultSuggestion()> (1)
<com.android.inputmethod.latin.LatinIME: void commitTyped(android.view.inputmethod.InputConnection)> (5)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.LatinIME: void handleSeparator(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (3)
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.CharSequence)> (2)
<com.android.inputmethod.voice.VoiceIMEConnector: void handleVoiceResults(boolean)> (2)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int[],int,int)> (2)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.latin.LatinIME: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.CharSequence)> (2)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int[],int,int)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void updateVoiceResults()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int[],int,int)> (6)
<com.android.inputmethod.latin.LatinIME: void launchDebugSettings()> ()
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (4)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.KeyboardView$2: void onTextInput(java.lang.CharSequence)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnTextInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.keyboard.KeyboardView$2: void onCodeInput(int,int[],int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.KeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean invokeOnKey(int)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int[],int,int)> (1)
<com.android.inputmethod.latin.LatinIME$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyLongPressed()> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyPressed()> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onSwipeDown()> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(int,int,int)> (2)
<com.android.inputmethod.voice.VoiceInput$UiListener: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void repeatKey(int)> (3)
<com.android.inputmethod.voice.VoiceInput$ImeRecognitionListener: void onResults(android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onDoubleTapEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressShiftTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean handleSuddenJump(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventForRelease(int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startKeyRepeatTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(int)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onTouchEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.PointerTracker,long)> (2)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.PointerTracker,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointers(long)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.settings.UserDictionarySettings: android.database.Cursor createCursor()> (1)
<com.android.settings.UserDictionarySettings: void onActivityCreated(android.os.Bundle)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (2)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.inputmethod.latin.UserDictionary$2: void run()> (2)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.settings.UserDictionarySettings: void onAddOrEditFinished(java.lang.String)> (1)
<com.android.settings.UserDictionarySettings: void access$100(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String)> (2)
<com.android.settings.UserDictionarySettings: void access$200(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$MyAdapter: void onClick(android.view.View)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
Permission:android.permission.MOUNT_UNMOUNT_FILESYSTEMS
57 Callers:
<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)> (3)
<android.os.storage.IMountService$Stub$Proxy: void setUsbMassStorageEnabled(boolean)> ()
<android.os.storage.IMountService$Stub: void setUsbMassStorageEnabled(boolean)> (2)
<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)> (2)
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.storage.IMountService: void setUsbMassStorageEnabled(boolean)> (2)
<android.os.storage.IMountService$Stub$Proxy: void shutdown(android.os.storage.IMountShutdownObserver)> ()
<android.os.storage.IMountService$Stub: void shutdown(android.os.storage.IMountShutdownObserver)> (2)
<com.android.server.MountService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.storage.StorageManager: void disableUsbMassStorage()> (1)
<android.os.storage.StorageManager: void enableUsbMassStorage()> (1)
<android.os.storage.IMountService: void shutdown(android.os.storage.IMountShutdownObserver)> (1)
<com.android.systemui.usb.UsbStorageActivity$8: void run()> (1)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.MountService: int mountVolume(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: int mountVolume(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int mountVolume(java.lang.String)> (2)
<android.os.storage.IMountService: int mountVolume(java.lang.String)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter$2: void run()> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void onCancel(android.content.DialogInterface)> (1)
<com.android.settings.deviceinfo.Memory: void mount()> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void updateProgressState()> (2)
<com.android.settings.deviceinfo.Memory: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.os.storage.ExternalStorageFormatter$1: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.server.MountService: void unmountVolume(java.lang.String,boolean)> (2)
<android.os.storage.IMountService$Stub$Proxy: void unmountVolume(java.lang.String,boolean)> ()
<android.os.storage.IMountService$Stub: void unmountVolume(java.lang.String,boolean)> (2)
<android.os.storage.IMountService: void unmountVolume(java.lang.String,boolean)> (2)
<com.android.settings.deviceinfo.Memory: void doUnmount()> (2)
<com.android.settings.deviceinfo.Memory: void access$100(com.android.settings.deviceinfo.Memory)> (1)
<com.android.settings.deviceinfo.Memory: void unmount()> (1)
<com.android.settings.deviceinfo.Memory$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.MountService: int[] getStorageUsers(java.lang.String)> (4)
<android.os.storage.IMountService$Stub$Proxy: int[] getStorageUsers(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int[] getStorageUsers(java.lang.String)> (2)
<com.android.server.MountService: void finishMediaUpdate()> (2)
<android.os.storage.IMountService: int[] getStorageUsers(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: void finishMediaUpdate()> ()
<android.os.storage.IMountService$Stub: void finishMediaUpdate()> (2)
<com.android.settings.deviceinfo.Memory: boolean hasAppsAccessingStorage()> (1)
<com.android.systemui.usb.UsbStorageActivity: void checkStorageUsersAsync()> (1)
<android.os.storage.IMountService: void finishMediaUpdate()> (1)
<com.android.systemui.usb.UsbStorageActivity: void access$900(com.android.systemui.usb.UsbStorageActivity)> (1)
<com.android.systemui.usb.UsbStorageActivity$9: void run()> (1)
Permission:android.permission.CAMERA
13 Callers:
<android.hardware.Camera: android.hardware.Camera open()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void startCamera()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void access$200(com.android.wallpaper.walkaround.WalkAroundWallpaper)> (2)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onVisibilityChanged(boolean)> (1)
<android.hardware.Camera: void native_setup(java.lang.Object)> ()
<android.media.MediaRecorder: void setVideoSource(int)> (1)
<com.android.camera.VideoCamera: void initializeRecorder()> (1)
<com.android.camera.VideoCamera: void startVideoRecording()> (1)
<com.android.camera.VideoCamera: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.VideoCamera: boolean onKeyDown(int,android.view.KeyEvent)> (2)
Permission:android.permission.WRITE_SMS
225 Callers:
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesOlderThanDate(android.content.Context,long,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)> (2)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri()> (2)
<com.android.mms.data.Conversation: void markAsRead()> (1)
<com.android.mms.ui.ComposeMessageActivity: void startMsgListQuery()> (3)
<com.android.mms.ui.ComposeMessageActivity: void checkPendingNotification()> (2)
<com.android.mms.ui.ComposeMessageActivity: void access$5400(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadMessageContent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity: void onUserInteraction()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$30: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStart()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMessageSent()> (2)
<com.android.mms.ui.ComposeMessageActivity$18: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$27: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$4: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mms.ui.MessageListAdapter$OnDataSetChangedListener: void onContentChanged(com.android.mms.ui.MessageListAdapter)> (1)
<com.android.mms.ui.MessageListAdapter: void onContentChanged()> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> (10)
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (2)
<com.android.mms.transaction.MmsMessageSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)> (4)
<com.android.mms.ui.MessageItem: void <init>(android.content.Context,java.lang.String,android.database.Cursor,com.android.mms.ui.MessageListAdapter$ColumnsMap,java.util.regex.Pattern)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getMultimediaMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getNotificationIndDetails(android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)> (1)
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)> (3)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromMessageUri(android.content.Context,android.net.Uri)> (4)
<com.android.mms.ui.ComposeMessageActivity$PduBodyCache: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)> (4)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.ui.MessageListAdapter: com.android.mms.ui.MessageItem getCachedMessageItem(java.lang.String,long,android.database.Cursor)> (3)
<com.android.mms.ui.MessageUtils: java.lang.String getMessageDetails(android.content.Context,android.database.Cursor,int)> (1)
<com.android.mms.util.DownloadManager: java.lang.String access$400(com.android.mms.util.DownloadManager,android.net.Uri)> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromUri(android.net.Uri)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void initSlideList()> (2)
<com.android.mms.ui.ComposeMessageActivity: boolean copyMedia(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean copyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToSDCard(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: java.lang.String getDrmMimeType(long)> (3)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem getMessageItem(java.lang.String,long,boolean)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.util.DownloadManager$4: void run()> (1)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage load(com.android.mms.ui.ComposeMessageActivity,android.net.Uri)> (3)
<com.android.mms.data.WorkingMessage: void readStateFromBundle(android.os.Bundle)> (1)
<com.android.mms.ui.SlideshowEditActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3400(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$3500(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2600(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveSomethingToCopyToDrmProvider(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeMenuStringRsrc(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int getDrmMimeSavedStringRsrc(long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: com.android.mms.ui.MessageItem access$500(com.android.mms.ui.ComposeMessageActivity,java.lang.String,long,boolean)> (2)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean handleForwardedMessage()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2700(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$2800(com.android.mms.ui.ComposeMessageActivity,long)> (1)
<com.android.mms.ui.ComposeMessageActivity: int access$3600(com.android.mms.ui.ComposeMessageActivity,long,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void startDeleteAll(android.content.AsyncQueryHandler,int,boolean)> (1)
<com.android.mms.ui.ConversationList$DeleteThreadListener$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftMmsMessage(long)> (1)
<com.android.mms.data.WorkingMessage: void updateDraftSmsMessage(long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage: void access$600(com.android.mms.data.WorkingMessage,long,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$4: void run()> (1)
<com.android.mms.data.Conversation: void startDelete(android.content.AsyncQueryHandler,int,boolean,long)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.data.Conversation: android.net.Uri getUri(long)> (1)
<com.android.mms.ui.ComposeMessageActivity: android.content.Intent createIntent(android.content.Context,long)> (4)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getNewMessageNotificationInfo(java.lang.String,java.lang.String,android.content.Context,int,java.lang.String,long,long,int)> (2)
<com.android.mms.ui.ComposeMessageActivity: void forwardMessage(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ConversationList: void createNewMessage()> (2)
<com.android.mms.ui.ConversationList: void openThread(long)> (2)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getMmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$3100(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ConversationList: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationList: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.drm.DrmUtils: android.net.Uri insert(android.content.Context,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.MediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (7)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.AudioModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (6)
<com.android.mms.model.RegionMediaModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper)> (2)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getGenericMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILMediaElement,com.google.android.mms.pdu.PduPart,com.android.mms.model.RegionModel)> (2)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.ImageModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,int,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.TextModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.VideoModel: void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,com.android.mms.drm.DrmWrapper,com.android.mms.model.RegionModel)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getMediaModel(android.content.Context,org.w3c.dom.smil.SMILMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduBody)> (1)
<com.android.mms.model.MediaModelFactory: com.android.mms.model.MediaModel getRegionMediaModel(android.content.Context,java.lang.String,java.lang.String,org.w3c.dom.smil.SMILRegionMediaElement,com.android.mms.model.LayoutModel,com.google.android.mms.pdu.PduPart)> (1)
<com.android.mms.model.SlideshowModel: com.android.mms.model.SlideshowModel createFromPduBody(android.content.Context,com.google.android.mms.pdu.PduBody)> (2)
<com.android.mms.data.WorkingMessage: android.net.Uri createDraftMmsMessage(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (3)
<com.android.mms.data.WorkingMessage: android.net.Uri access$400(com.google.android.mms.pdu.PduPersister,com.google.android.mms.pdu.SendReq,com.android.mms.model.SlideshowModel)> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri saveAsMms(boolean)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$23: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSlideshow()> (2)
<com.android.mms.ui.MessageUtils: void viewMmsMessageAttachment(android.content.Context,com.android.mms.data.WorkingMessage)> (1)
<com.android.mms.ui.MessageUtils$ResizeImageResultCallback: void onResizeResult(com.google.android.mms.pdu.PduPart,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addAttachment(int,boolean)> (1)
<com.android.mms.ui.MessageUtils$3$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$4700(com.android.mms.ui.ComposeMessageActivity,int,boolean)> (1)
<com.android.mms.ui.ComposeMessageActivity$20: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.drm.DrmUtils: void cleanupStorage(android.content.Context)> (2)
<com.android.mms.MmsApp: void onCreate()> (1)
<com.android.mms.MmsApp: void onTerminate()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)> (1)
<com.android.mms.ui.ConversationList$ThreadListQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$1000(android.content.Context)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.data.WorkingMessage: android.net.Uri readDraftMmsMessage(android.content.Context,long,java.lang.StringBuilder)> (1)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.WRITE_USER_DICTIONARY
98 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.settings.UserDictionarySettings: void onAddOrEditFinished(java.lang.String)> (1)
<com.android.settings.UserDictionarySettings: void access$100(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.settings.UserDictionarySettings: void deleteWord(java.lang.String)> (2)
<com.android.settings.UserDictionarySettings: void access$200(com.android.settings.UserDictionarySettings,java.lang.String)> (1)
<com.android.settings.UserDictionarySettings$MyAdapter: void onClick(android.view.View)> (1)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.inputmethod.latin.UserDictionary$2: void run()> (2)
<com.android.inputmethod.latin.UserDictionary: void addWord(java.lang.String,int)> (3)
<com.android.inputmethod.latin.ExpandableDictionary: void addWord(java.lang.String,int)> (7)
<com.android.inputmethod.latin.LatinIME: boolean addWordToDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.LatinIME: void promoteToUserDictionary(java.lang.String,int)> (1)
<com.android.inputmethod.latin.AutoDictionary: void addWord(java.lang.String,int)> (2)
<com.android.inputmethod.latin.AutoDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.UserBigramDictionary: void addWord(java.lang.String,int)> (1)
<com.android.inputmethod.latin.UserDictionary: void addWords(android.database.Cursor)> (1)
<com.android.inputmethod.latin.CandidateView: void addToDictionary(java.lang.CharSequence)> (2)
<com.android.inputmethod.latin.LatinIME: void checkAddToDictionary(java.lang.CharSequence,int,boolean)> (2)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.UserDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.CandidateView: boolean onLongClick(android.view.View)> (1)
<com.android.inputmethod.latin.CandidateView: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void addToAutoAndUserBigramDictionaries(java.lang.CharSequence,int)> (3)
<com.android.inputmethod.latin.LatinIME: void addToOnlyBigramDictionary(java.lang.CharSequence,int)> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.LatinIME: boolean pickDefaultSuggestion()> (1)
<com.android.inputmethod.latin.LatinIME: void commitTyped(android.view.inputmethod.InputConnection)> (5)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.LatinIME: void handleSeparator(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (3)
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.CharSequence)> (2)
<com.android.inputmethod.voice.VoiceIMEConnector: void handleVoiceResults(boolean)> (2)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int[],int,int)> (2)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.latin.LatinIME: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.CharSequence)> (2)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int[],int,int)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void updateVoiceResults()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int[],int,int)> (6)
<com.android.inputmethod.latin.LatinIME: void launchDebugSettings()> ()
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (4)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.KeyboardView$2: void onTextInput(java.lang.CharSequence)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnTextInput(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.keyboard.KeyboardView$2: void onCodeInput(int,int[],int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.KeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean invokeOnKey(int)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int[],int,int)> (1)
<com.android.inputmethod.latin.LatinIME$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyLongPressed()> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyPressed()> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onSwipeDown()> (2)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(int,int,int)> (2)
<com.android.inputmethod.voice.VoiceInput$UiListener: void onVoiceResults(java.util.List,java.util.Map)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void repeatKey(int)> (3)
<com.android.inputmethod.voice.VoiceInput$ImeRecognitionListener: void onResults(android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onDoubleTapEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressShiftTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean handleSuddenJump(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventForRelease(int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startKeyRepeatTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(int)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onTouchEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.PointerTracker,long)> (2)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.PointerTracker,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointers(long)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
Permission:android.permission.INTERNET
478 Callers:
<android.webkit.WebSettings: void <init>(android.content.Context,android.webkit.WebView)> (1)
<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (2)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (3)
<com.android.browser.ScrollWebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (5)
<com.android.browser.PhoneUi: android.webkit.WebView createWebView(boolean)> (1)
<com.android.browser.ScrollWebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> (2)
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.browser.ScrollWebView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.browser.PhoneUi: android.webkit.WebView createSubWebView(boolean)> ()
<com.android.browser.XLargeUi: android.webkit.WebView createWebView(boolean)> (1)
<android.webkit.WebView: void <init>(android.content.Context)> (11)
<com.android.browser.ScrollWebView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.browser.XLargeUi: android.webkit.WebView createSubWebView(boolean)> ()
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.browser.GoogleAccountLogin: void <init>(android.app.Activity,android.accounts.Account,java.lang.Runnable)> (1)
<com.android.browser.ScrollWebView: void <init>(android.content.Context)> (4)
<com.android.email.activity.setup.DebugFragment: void clearWebViewCache()> (1)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.android.email.activity.setup.DebugFragment: void onClick(android.view.View)> (1)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (19)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (25)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<android.webkit.WebSettings: void verifyNetworkAccess()> (1)
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> (2)
<com.android.email.activity.MessageViewFragmentBase: void blockNetworkLoads(boolean)> (5)
<com.android.email.activity.MessageFileViewFragment: void blockNetworkLoads(boolean)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onShowPicturesInHtml()> (3)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromBody(java.lang.String,java.lang.String)> (3)
<com.android.email.activity.MessageViewFragmentBase: void resetView()> (7)
<com.android.email.activity.MessageViewFragment: void blockNetworkLoads(boolean)> (1)
<com.android.email.activity.MessageFileViewFragment: void onShowPicturesInHtml()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onShowPicturesInHtml()> (1)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (3)
<com.android.email.activity.MessageViewFragment: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void resetView()> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.String[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragmentBase: void clearContent()> (3)
<com.android.email.activity.MessageViewFragmentBase: void loadMessageIfResumed()> (3)
<com.android.email.activity.MessageViewFragment: void resetView()> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageFileViewFragment: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragment: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (1)
<com.android.email.Controller$Result: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (12)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void clearContent()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onDestroy()> (3)
<com.android.email.activity.MessageViewFragment: void clearContent()> (2)
<com.android.email.activity.MessageFileViewFragment: void loadMessageIfResumed()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onResume()> (3)
<com.android.email.activity.MessageViewFragment: void loadMessageIfResumed()> (2)
<com.android.email.activity.AccountFolderList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.AccountFolderListFragment$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$2: void run()> (1)
<com.android.email.Controller: void loadMessageForView(long)> (1)
<com.android.email.RefreshManager$ControllerResult: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.service.MailService$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageFileViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageListXLFragmentManager: void onMessageViewClosed()> (1)
<com.android.email.activity.MessageFileViewFragment: void openMessage(android.net.Uri)> (1)
<com.android.email.activity.MessageFileViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void openMessage(long)> (2)
<com.android.email.MessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.MessagingListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (3)
<com.android.email.activity.MessageListXLFragmentManager: void access$600(com.android.email.activity.MessageListXLFragmentManager)> (1)
<com.android.email.activity.MessageFileView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMessage(long)> (4)
<com.android.email.activity.MessageView: void messageChanged()> (3)
<com.android.email.GroupMessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewFinished(long)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewStarted(long)> (2)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageListXLFragmentManager$ThreePaneLayoutCallback: void onVisiblePanesChanged(int)> (1)
<com.android.email.activity.MessageViewBase: void onCreate(android.os.Bundle)> (3)
<com.android.email.activity.MessageListXL: boolean moveToNewer()> (2)
<com.android.email.activity.MessageListXL: boolean moveToOlder()> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMailbox(long,long)> (3)
<com.android.email.activity.MessageListXL$MessageListFragmentCallback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: boolean moveToNewer()> (2)
<com.android.email.activity.MessageView: boolean moveToOlder()> (3)
<com.android.email.activity.MessageView: void onResume()> (2)
<com.android.email.MessagingController$7: void run()> (1)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (1)
<com.android.email.activity.ThreePaneLayout$Callback: void onVisiblePanesChanged(int)> (2)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXL: void onCurrentMessageGone()> (2)
<com.android.email.activity.MessageListXL: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXL: void onMoveToOlder()> (1)
<com.android.email.activity.MessageListXLFragmentManager$MailboxFinderCallback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void selectAccount(long,long,long)> (4)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$Callback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void onDeleteMessage()> (2)
<com.android.email.activity.MessageView: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageViewBase: void onResume()> (3)
<com.android.email.Controller$4: void run()> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationStart(android.animation.Animator)> (1)
<com.android.email.activity.MessageListXL: void access$1200(com.android.email.activity.MessageListXL)> (2)
<com.android.email.activity.MessageListXL: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$Callback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void loadState(android.os.Bundle)> (1)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void initFromIntent()> (1)
<com.android.email.activity.MessageListXL: void selectAccount(long)> (2)
<com.android.email.activity.MailboxListFragment$Callback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Integer)> (1)
<com.android.email.activity.MessageView: boolean handleMenuItem(int)> (1)
<com.android.email.activity.MessageViewFragment$Callback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageFileView: void onResume()> (2)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MoveMessageToDialog$Callback: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Long)> (1)
<com.android.email.activity.MessageListXL: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MailboxListFragment$Callback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void access$2000(com.android.email.activity.MessageListXL,long)> (1)
<com.android.email.activity.MessageListXL: void updateAccountList(android.database.Cursor)> (1)
<com.android.email.activity.MailboxListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.email.activity.MessageViewFragment$Callback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MoveMessageToDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageListXL$ActionBarNavigationCallback: boolean onNavigationItemSelected(int,long)> (1)
<com.android.email.activity.MessageListXL: void access$1800(com.android.email.activity.MessageListXL,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void onDelete()> (1)
<com.android.email.activity.MessageCommandButtonView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.providers.downloads.DownloadProvider: void checkInsertPermissions(android.content.ContentValues)> (1)
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (1)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<com.android.providers.downloads.DownloadProvider: void logVerboseOpenFileInfo(android.net.Uri,java.lang.String)> (1)
<com.android.providers.downloads.DownloadProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<android.net.Downloads$DownloadBase: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.net.Downloads$ById: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.net.Downloads$ByUri: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<android.net.Downloads$ByUri: android.database.Cursor getProgressCursor(android.content.Context,long)> ()
<android.net.Downloads$ByUri: android.database.Cursor getCurrentOtaDownloads(android.content.Context,java.lang.String)> (1)
<android.net.Downloads$ByUri: android.net.Downloads$StatusInfo getStatus(android.content.Context,java.lang.String,long)> ()
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (2)
<com.android.browser.Controller$7$1: void run()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.Object)> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (2)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<android.net.Downloads$ByUri: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.Downloads$ById: android.net.Uri getDownloadUri(long)> (5)
<android.net.Downloads$ById: android.net.Downloads$StatusInfo getStatus(android.content.Context,long)> ()
<android.net.Downloads$ById: android.os.ParcelFileDescriptor openDownload(android.content.Context,long,java.lang.String)> ()
<android.net.Downloads$ById: java.io.InputStream openDownloadStream(android.content.Context,long)> ()
<android.net.Downloads$ById: java.lang.String getMimeTypeForId(android.content.Context,long)> ()
<android.net.Downloads$ById: void deleteDownload(android.content.Context,long)> ()
<com.android.providers.downloads.StorageManager: void trimDatabase()> (1)
<com.android.providers.downloads.StorageManager: void access$100(com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run()> (1)
<com.android.providers.downloads.DownloadService$1: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)> ()
<android.media.IMediaScannerListener$Stub: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.media.IMediaScannerListener: void scanCompleted(java.lang.String,android.net.Uri)> (1)
<android.media.MediaScannerConnection$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.DownloadService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> (9)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders(com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> (1)
<com.android.providers.downloads.DownloadInfo: void startIfReady(long,com.android.providers.downloads.StorageManager)> (2)
<com.android.providers.downloads.DownloadService: boolean scanFile(com.android.providers.downloads.DownloadInfo,boolean,boolean)> (2)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (2)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownload(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: boolean access$700(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo,boolean,boolean)> (1)
<com.android.providers.downloads.DownloadService: void deleteDownload(long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo access$600(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void access$500(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: void access$800(com.android.providers.downloads.DownloadService,long)> (1)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles(int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace(java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace(int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination(com.android.providers.downloads.DownloadThread$State,byte[],int)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,boolean,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile(int,java.lang.String,long)> (1)
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(java.lang.String,java.util.Map)> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> (2)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(java.lang.String,java.util.Map)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> ()
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpSessionNotifier: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpServer: void run()> (1)
<java.net.ServerSocket: void bind(java.net.SocketAddress)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> (3)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.net.HttpURLConnection createConnection(java.lang.String,java.util.Map)> (2)
<com.cooliris.media.UriTexture: java.io.BufferedInputStream createInputStreamFromRemoteUrl(java.lang.String,org.apache.http.conn.ClientConnectionManager)> (1)
<com.example.android.rssreader.RssReader$RSSWorker: void run()> (2)
<com.cooliris.media.UriTexture: android.graphics.Bitmap createFromUri(android.content.Context,java.lang.String,int,int,long,org.apache.http.conn.ClientConnectionManager)> (6)
<com.example.android.rssreader.RssReader: void doRSS(java.lang.CharSequence)> (1)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.CropImage: void performReturn(android.content.Context,android.os.Bundle,java.lang.String)> (2)
<com.cooliris.media.MediaItemTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (2)
<com.cooliris.media.UriTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (1)
<com.cooliris.media.UriTexture: java.lang.String writeHttpDataInDirectory(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.cooliris.wallpaper.RandomDataSource: android.graphics.Bitmap getBitmapForIndex(android.content.Context,int)> (1)
<com.example.android.rssreader.RssReader: void access$100(com.example.android.rssreader.RssReader,java.lang.CharSequence)> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.CropImage: void access$100(android.content.Context,android.os.Bundle,java.lang.String)> (1)
<com.cooliris.media.CropImage: void launchCropperOrFinish(android.content.Context,com.cooliris.media.MediaItem)> (1)
<com.cooliris.media.Texture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (2)
<com.cooliris.media.CropImage$1: void onMediaScannerConnected()> (1)
<com.cooliris.wallpaper.Slideshow$DataSource: android.graphics.Bitmap getBitmapForIndex(android.content.Context,int)> (1)
<com.example.android.rssreader.RssReader$1: void onClick(android.view.View)> (1)
<com.cooliris.media.CropImage$1: void shutdown(java.lang.String)> (2)
<com.cooliris.media.GridInputProcessor$1: void run()> (1)
<com.cooliris.media.AdaptiveBackgroundTexture: android.graphics.Bitmap load(com.cooliris.media.RenderView)> (1)
<com.cooliris.media.RenderView: void loadTextureAsync(com.cooliris.media.Texture)> (2)
<com.cooliris.wallpaper.Slideshow: android.graphics.Bitmap getRandomBitmap()> (1)
<com.cooliris.media.CropImage$1: void onScanCompleted(java.lang.String,android.net.Uri)> (2)
<com.cooliris.media.RenderView: void access$600(com.cooliris.media.RenderView,com.cooliris.media.Texture)> (1)
<com.cooliris.media.RenderView: void loadTexture(com.cooliris.media.Texture)> (8)
<com.cooliris.wallpaper.Slideshow: void performSetup(int,int)> (1)
<com.cooliris.media.RenderView$TextureLoadThread: void load(com.cooliris.media.Texture)> (1)
<com.cooliris.media.BackgroundLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawables: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawManager: void drawBlendedComponents(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,float,int,int,float,float,com.cooliris.media.MediaBucketList,com.cooliris.media.MediaBucketList,boolean)> (1)
<com.cooliris.media.LoadingLayer: void generate(com.cooliris.media.RenderView,com.cooliris.media.RenderView$Lists)> (1)
<com.cooliris.media.MenuBar: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: boolean bind(com.cooliris.media.Texture)> (13)
<com.cooliris.media.TimeBar: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.wallpaper.Slideshow: void drawFrame()> (2)
<com.cooliris.media.RenderView$TextureLoadThread: void run()> (2)
<com.cooliris.media.Layer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (8)
<com.cooliris.media.GridLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.GridLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Layer: void generate(com.cooliris.media.RenderView,com.cooliris.media.RenderView$Lists)> ()
<com.cooliris.media.Layer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.BackgroundLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.CrossFadingTexture: boolean bind(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridDrawManager: void drawDisplayItem(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,com.cooliris.media.DisplayItem,com.cooliris.media.Texture,int,com.cooliris.media.Texture,float)> (3)
<com.cooliris.media.GridDrawManager: void drawFocusItems(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,float,boolean,float)> (1)
<com.cooliris.media.GridDrawManager: void drawThumbnails(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,int)> (1)
<com.cooliris.media.RenderView: boolean bindMixed(com.cooliris.media.Texture,com.cooliris.media.Texture,float)> (2)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,float,float,float,float)> (2)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,float,float)> (5)
<com.cooliris.media.RenderView: void draw2D(com.cooliris.media.Texture,int,int,int,int)> (1)
<com.cooliris.media.RenderView: void drawMixed2D(com.cooliris.media.Texture,com.cooliris.media.Texture,float,float,float,float,float,float)> (1)
<com.cooliris.wallpaper.Slideshow$1: void run()> (1)
<com.cooliris.wallpaper.Slideshow: void onVisibilityChanged(boolean)> ()
<com.cooliris.media.RenderView: void <init>(android.content.Context)> (4)
<com.cooliris.media.ImageButton: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.LoadingLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PopupMenu: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.cooliris.media.RootLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.TimeBar: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Layer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (8)
<com.cooliris.media.RootLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (2)
<com.cooliris.media.RootLayer: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.GridLayer: void renderOpaque(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void drawHighlight(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11,int)> (1)
<com.cooliris.media.ImageButton: void renderBlended(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.BackgroundLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.HudLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.ImageButton: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.LoadingLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.MenuBar: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.PathBarLayer: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<com.cooliris.media.RenderView: void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)> (1)
<com.cooliris.media.TimeBar: void onSurfaceCreated(com.cooliris.media.RenderView,javax.microedition.khronos.opengles.GL11)> (1)
<java.net.URL: java.io.InputStream openStream()> (2)
<com.android.browser.WallpaperHandler: void run()> (2)
<com.google.common.io.Resources$1: java.io.InputStream getInput()> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.google.common.io.Resources$1: java.lang.Object getInput()> (1)
<com.google.common.io.InputSupplier: java.lang.Object getInput()> (16)
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> (1)
<com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)> (1)
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)> (3)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)> (2)
<com.google.common.io.ByteStreams: long length(com.google.common.io.InputSupplier)> ()
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> (1)
<com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)> (2)
<com.google.common.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)> (1)
<com.google.common.io.MultiInputStream: void advance()> (3)
<com.google.common.io.MultiReader: void advance()> (3)
<com.google.common.io.ByteStreams$4: java.lang.Object getInput()> (1)
<com.google.common.io.Files: boolean equal(java.io.File,java.io.File)> ()
<com.google.common.io.Files: byte[] toByteArray(java.io.File)> (1)
<com.google.common.io.Resources: byte[] toByteArray(java.net.URL)> ()
<com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)> (1)
<com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)> (1)
<com.google.common.io.Files: java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)> (1)
<com.google.common.io.Files: void copy(java.io.File,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.OutputStream)> ()
<com.google.common.io.Resources: void copy(java.net.URL,java.io.OutputStream)> ()
<com.google.common.io.CharStreams$2: java.lang.Object getInput()> (1)
<com.google.common.io.Files: java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.Resources: java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.CharStreams: java.lang.String toString(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.Files: java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: java.util.List readLines(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Resources: java.util.List readLines(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)> ()
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> (2)
<com.google.common.io.MultiInputStream: int read()> (3)
<com.google.common.io.MultiInputStream: void <init>(java.util.Iterator)> (1)
<com.google.common.io.MultiReader: int read(char[],int,int)> (2)
<com.google.common.io.MultiReader: long skip(long)> (1)
<com.google.common.io.MultiReader: void <init>(java.util.Iterator)> (1)
<com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: byte[] getDigest(java.io.File,java.security.MessageDigest)> ()
<com.google.common.io.Files: long getChecksum(java.io.File,java.util.zip.Checksum)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.File)> (1)
<com.google.common.io.Resources: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.MultiInputStream: long skip(long)> (1)
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> (1)
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> (1)
<com.google.common.io.Files: void move(java.io.File,java.io.File)> ()
<com.google.common.io.ByteStreams$5: java.lang.Object getInput()> (1)
<com.google.common.io.CharStreams$4: java.lang.Object getInput()> (1)
<java.net.URLConnection: void connect()> (2)
<java.net.URLConnection: java.io.InputStream getInputStream()> (2)
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> (2)
<com.cooliris.picasa.GDataClient: void callMethod(org.apache.http.client.methods.HttpUriRequest,com.cooliris.picasa.GDataClient$Operation)> (5)
<com.cooliris.picasa.GDataClient: void delete(java.lang.String,com.cooliris.picasa.GDataClient$Operation)> (1)
<com.cooliris.picasa.GDataClient: void get(java.lang.String,com.cooliris.picasa.GDataClient$Operation)> (2)
<com.cooliris.picasa.GDataClient: void post(java.lang.String,byte[],java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.GDataClient: void put(java.lang.String,byte[],java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.GDataClient: void putStream(java.lang.String,java.io.InputStream,java.lang.String,com.cooliris.picasa.GDataClient$Operation)> ()
<com.cooliris.picasa.PicasaApi: int deleteEntry(java.lang.String)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
Permission:android.permission.SET_WALLPAPER
1403 Callers:
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> ()
<android.app.IWallpaperManager$Stub: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (3)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> (4)
<android.app.WallpaperManager: void setResource(int)> (2)
<android.app.WallpaperManager: void setStream(java.io.InputStream)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: void run()> (2)
<com.cooliris.media.Photographs$SetWallpaperThread: void run()> (2)
<com.cooliris.media.Wallpaper$SetWallpaperThread: void run()> (2)
<android.app.WallpaperManager: void clear()> (2)
<com.android.launcher2.WallpaperChooserDialogFragment: void selectWallpaper(int)> (2)
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> (1)
<android.content.Context: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.cooliris.media.Photographs: void onActivityResult(int,int,android.content.Intent)> (1)
<com.cooliris.media.Wallpaper: void onActivityResult(int,int,android.content.Intent)> (1)
<android.app.ContextImpl: void clearWallpaper()> (1)
<com.android.internal.service.wallpaper.ImageWallpaper$DrawableEngine: void updateWallpaperLocked()> (2)
<com.android.launcher2.WallpaperChooserDialogFragment: void access$000(com.android.launcher2.WallpaperChooserDialogFragment,int)> (1)
<com.android.launcher2.WallpaperChooserDialogFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.Context: void setWallpaper(java.io.InputStream)> (1)
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> (458)
<android.content.Context: void clearWallpaper()> (1)
<com.android.internal.service.wallpaper.ImageWallpaper$DrawableEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.internal.service.wallpaper.ImageWallpaper$DrawableEngine$WallpaperObserver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.launcher2.WallpaperChooserDialogFragment$1: void onClick(android.view.View)> (1)
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> (458)
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.accounts.ChooseAccountActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.Activity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.Application: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.FullBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.IntentService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.LauncherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.NativeActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.Service: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<android.content.SyncActivityTooManyDeletes: void setWallpaper(android.graphics.Bitmap)> (3)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)> (3)
<android.preference.PreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.TestBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.TestListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.tts.TtsService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<android.widget.RemoteViewsService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BookmarkSearch: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.Browser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.ShortcutActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calculator2.Calculator: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AbstractCalendarActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.alerts.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.alerts.AlertService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AllInOneActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AsyncQueryServiceHelper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.CalendarSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.event.EditEventActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.ActivityBase: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.Camera: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.VideoCamera: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.certinstaller.CertFileList: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.certinstaller.CertFile: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.certinstaller.CertInstaller: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ContactBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ContactDetailActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ContactEditorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ContactsFrontDoor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.JoinContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.NonPhoneActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.CallContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.CallDetailActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactOptionsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactSaveService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.DialtactsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.RecentCallsListActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.test.FragmentTestActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.TwelveKeyDialer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.util.EmptyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.contacts.vcard.CancelActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.vcard.ExportVCardActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.vcard.ImportVCardActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.vcard.SelectAccountActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.contacts.vcard.VCardService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.defcontainer.DefaultContainerService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmAlert: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.AlarmClock: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.AlarmKlaxon: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.HandleSetAlarm: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.SetAlarm: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AccountsTester: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppHwConfigList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppHwPref: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.AppPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.ConfigurationViewer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Connectivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.DataList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Details: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.DevelopmentSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.Development: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.EnterURL: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.InstrumentationList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.LogViewer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.MediaScannerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PackageBrowser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PackageSummary: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PermissionDetails: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.PointerLocation: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.ProcessInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.RunningProcesses: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.ShowActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.SyncAdapterDriver: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.development.UnderdevelopedSettings: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.AccountFolderList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.AccountShortcutPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MailboxList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageCompose: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageFileView: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageListXL: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageViewBase: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.MessageView: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSettingsXL: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupExchange: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.activity.Welcome: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.Controller$ControllerService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.Email: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.ExchangeUtils$NullEmailService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.AccountService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.AttachmentDownloadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.MailService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.PolicyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.PopImapAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.PopImapSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.CalendarSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.ContactsSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.EmailSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.ExchangeService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.Exchange: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.globaltime.GlobalTime: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.BackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.DebugSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.Settings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ChooserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.PlatLogoActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.ResolverActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.RingtonePickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.util.AsyncService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.launcher2.LauncherApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.launcher2.Launcher: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.launcher2.WallpaperChooser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.magicsmoke.MagicSmokeSelector: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.magicsmoke.MagicSmoke: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.MmsApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.transaction.SmsReceiverService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mms.transaction.TransactionService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mms.ui.ClassZeroActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ComposeMessageActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ConversationList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.DeliveryReportActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.ManageSimMessages: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideEditorActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideshowActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.SlideshowEditActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.AudioPreview: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.CreatePlaylist: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.DeleteItems: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPlaybackActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MediaPlaybackService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.MusicPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.QueryBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.RenamePlaylist: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.ScanningProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.TrackBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.VideoBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis1.Visualization1: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis2.Visualization2: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis3.Visualization3: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis4.Visualization4: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis5.Visualization5: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.WeekSelector: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.ADNList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.BluetoothHeadsetService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.CallFeaturesSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.CdmaCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.CellBroadcastSms: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.ChangeIccPinScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.DataUsage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.DeleteFdnContactScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EditFdnContactScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyCallbackModeService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.EmergencyCallHandler: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EmergencyDialer: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EnableFdnScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.EnableIccPinScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FakePhoneActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FdnList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.FdnSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GetPin2Screen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.GsmUmtsCallOptions: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.InCallScreenShowActivation: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.InCallScreen: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.NetworkQueryService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phone.NetworkSetting: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.OutgoingCallBroadcaster: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.PhoneApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.Settings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.SimContacts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.SipCallOptionHandler: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.sip.SipEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.sip.SipSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.applications.ApplicationLauncher: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.calendar.CalendarDebug: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.calendar.EmptyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.downloads.DownloadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.downloads.SizeLimitActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.downloads.ui.DownloadList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.providers.media.MediaScannerService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.media.MtpService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.providers.settings.SettingsBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.DialogActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.LoadAverageService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.SystemBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.settings.accounts.AddAccountSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.accounts.ChooseAccountActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ActivityPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ApnEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ApnSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.AppWidgetPickActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.settings.BandMode: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.BatteryInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.DockService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockGeneric: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPassword: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPatternTutorial: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ChooseLockPattern: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ConfirmLockPassword: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.ConfirmLockPattern: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.CreateShortcut: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.settings.CredentialStorage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.CryptKeeper$Blank: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.CryptKeeper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DebugIntentSender: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.DeviceAdminAdd: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.deviceinfo.Status: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Display: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.IccLockSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.MediaFormat: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.RadioInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$DockSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SettingsLicenseActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$LocalePickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$RunningServicesActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$StorageUseActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.TestingSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.UsageStats: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiAPITest: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiConfigInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiInfo: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiPickerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.settings.wifi.WifiStatusTest: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.spare_parts.SpareParts: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.StkAppService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.stk.StkApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.StkDialogActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.StkInputActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.StkLauncherActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.StkMenuActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.stk.ToneDialog: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.SystemUIService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.usb.UsbConfirmActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.usb.UsbPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.usb.UsbResolverActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.systemui.usb.UsbStorageActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.EffectsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.KenBurnsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.OverlaysActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.OverlayTitleActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.ProjectsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.service.ApiService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.videoeditor.TransitionsActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.VideoEditorActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.voicedialer.VoiceDialerActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.fall.Fall: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.fall.FallWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.galaxy.Galaxy: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.grass.Grass: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.grass.GrassWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.cache.CacheService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.ActiveWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.CropImage: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Gallery: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.MonitoredActivity: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.MovieView: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Photographs: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.media.Wallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.cooliris.picasa.PicasaService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.example.android.jetboy.JetBoy: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.lunarlander.LunarLander: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.notepad.NoteEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.notepad.NotesList: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.notepad.NotesLiveFolder: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.notepad.TitleEditor: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.rssreader.RssReader: void setWallpaper(android.graphics.Bitmap)> (3)
<com.example.android.snake.Snake: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.DownloadVoiceData: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.EngineSettings: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.GetSampleText: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.Pico: void setWallpaper(android.graphics.Bitmap)> (3)
<android.content.ContextWrapper: void clearWallpaper()> (458)
<android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> (3)
<android.accounts.ChooseAccountActivity: void setWallpaper(java.io.InputStream)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)> (3)
<android.app.Activity: void setWallpaper(java.io.InputStream)> (3)
<android.app.AliasActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.Application: void setWallpaper(java.io.InputStream)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)> (3)
<android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)> (2)
<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.FullBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<android.app.IntentService: void setWallpaper(java.io.InputStream)> (2)
<android.app.LauncherActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.NativeActivity: void setWallpaper(java.io.InputStream)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(java.io.InputStream)> (2)
<android.app.Service: void setWallpaper(java.io.InputStream)> (2)
<android.app.TabActivity: void setWallpaper(java.io.InputStream)> (3)
<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)> (2)
<android.content.SyncActivityTooManyDeletes: void setWallpaper(java.io.InputStream)> (3)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)> (3)
<android.preference.PreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<android.speech.RecognitionService: void setWallpaper(java.io.InputStream)> (2)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(java.io.InputStream)> (3)
<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)> (2)
<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)> (2)
<android.test.TestBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<android.test.TestListActivity: void setWallpaper(java.io.InputStream)> (3)
<android.tts.TtsService: void setWallpaper(java.io.InputStream)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)> (2)
<android.widget.RemoteViewsService: void setWallpaper(java.io.InputStream)> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(java.io.InputStream)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BookmarkSearch: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.Browser: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.ShortcutActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calculator2.Calculator: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AbstractCalendarActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.alerts.AlertActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.alerts.AlertService: void setWallpaper(java.io.InputStream)> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AllInOneActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AsyncQueryServiceHelper: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.CalendarSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.event.EditEventActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.SearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.ActivityBase: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.Camera: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.VideoCamera: void setWallpaper(java.io.InputStream)> (3)
<com.android.certinstaller.CertFileList: void setWallpaper(java.io.InputStream)> (4)
<com.android.certinstaller.CertFile: void setWallpaper(java.io.InputStream)> (3)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(java.io.InputStream)> (4)
<com.android.certinstaller.CertInstaller: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ContactBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ContactDetailActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ContactEditorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ContactsFrontDoor: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.JoinContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.NonPhoneActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.CallContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.CallDetailActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactOptionsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactSaveService: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.DialtactsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.RecentCallsListActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.test.FragmentTestActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.TwelveKeyDialer: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.util.EmptyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.contacts.vcard.CancelActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.vcard.ExportVCardActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.vcard.ImportVCardActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.vcard.SelectAccountActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.contacts.vcard.VCardService: void setWallpaper(java.io.InputStream)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.defcontainer.DefaultContainerService: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmAlert: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.AlarmClock: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.AlarmKlaxon: void setWallpaper(java.io.InputStream)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.HandleSetAlarm: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.SetAlarm: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AccountsTester: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppHwConfigList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppHwPref: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.AppPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.ConfigurationViewer: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Connectivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.DataList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Details: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.DevelopmentSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.Development: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.EnterURL: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.InstrumentationList: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.LogViewer: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.MediaScannerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PackageBrowser: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PackageSummary: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PermissionDetails: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.PointerLocation: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.ProcessInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.RunningProcesses: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.ShowActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.SyncAdapterDriver: void setWallpaper(java.io.InputStream)> (3)
<com.android.development.UnderdevelopedSettings: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.AccountFolderList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.AccountShortcutPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MailboxList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageCompose: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageFileView: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageList: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageListXL: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageViewBase: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.MessageView: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSettingsXL: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupExchange: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.activity.Welcome: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.Controller$ControllerService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.Email: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.ExchangeUtils$NullEmailService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.AccountService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.AttachmentDownloadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.MailService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.PolicyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.PopImapAuthenticatorService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.PopImapSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.CalendarSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.ContactsSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.EmailSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.ExchangeService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.Exchange: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.globaltime.GlobalTime: void setWallpaper(java.io.InputStream)> (3)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.BackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.DebugSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.Settings: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ChooserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.PlatLogoActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.ResolverActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.RingtonePickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void setWallpaper(java.io.InputStream)> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.util.AsyncService: void setWallpaper(java.io.InputStream)> (2)
<com.android.launcher2.LauncherApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.launcher2.Launcher: void setWallpaper(java.io.InputStream)> (3)
<com.android.launcher2.WallpaperChooser: void setWallpaper(java.io.InputStream)> (3)
<com.android.magicsmoke.MagicSmokeSelector: void setWallpaper(java.io.InputStream)> (3)
<com.android.magicsmoke.MagicSmoke: void setWallpaper(java.io.InputStream)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.MmsApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.transaction.SmsReceiverService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mms.transaction.TransactionService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mms.ui.ClassZeroActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ComposeMessageActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ConversationList: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.DeliveryReportActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.ManageSimMessages: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideEditorActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideshowActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.SlideshowEditActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.AudioPreview: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.CreatePlaylist: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.DeleteItems: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPlaybackActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MediaPlaybackService: void setWallpaper(java.io.InputStream)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.MusicPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.QueryBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.RenamePlaylist: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.ScanningProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.TrackBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.VideoBrowserActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis1.Visualization1: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis2.Visualization2: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis3.Visualization3: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis4.Visualization4: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis5.Visualization5: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.WeekSelector: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.ADNList: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.BluetoothHeadsetService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.CallFeaturesSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.CdmaCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.CellBroadcastSms: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.ChangeIccPinScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.DataUsage: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.DeleteFdnContactScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EditFdnContactScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyCallbackModeService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.EmergencyCallHandler: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EmergencyDialer: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EnableFdnScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.EnableIccPinScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FakePhoneActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FdnList: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.FdnSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GetPin2Screen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.GsmUmtsCallOptions: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.InCallScreenShowActivation: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.InCallScreen: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.NetworkQueryService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phone.NetworkSetting: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.OutgoingCallBroadcaster: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.PhoneApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.Settings: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.SimContacts: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.SipCallOptionHandler: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.sip.SipEditor: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.sip.SipSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.applications.ApplicationLauncher: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.calendar.CalendarDebug: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.calendar.EmptyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.downloads.DownloadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.downloads.SizeLimitActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.downloads.ui.DownloadList: void setWallpaper(java.io.InputStream)> (3)
<com.android.providers.media.MediaScannerService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.media.MtpService: void setWallpaper(java.io.InputStream)> (2)
<com.android.providers.settings.SettingsBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.DialogActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.LoadAverageService: void setWallpaper(java.io.InputStream)> (2)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.SystemBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.settings.accounts.AddAccountSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.accounts.ChooseAccountActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ActivityPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ApnEditor: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ApnSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.AppWidgetPickActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.settings.BandMode: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.BatteryInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.DockService: void setWallpaper(java.io.InputStream)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockGeneric: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPassword: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPatternTutorial: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ChooseLockPattern: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ConfirmLockPassword: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.ConfirmLockPattern: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.CreateShortcut: void setWallpaper(java.io.InputStream)> (4)
<com.android.settings.CredentialStorage: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.CryptKeeper$Blank: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.CryptKeeper: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DebugIntentSender: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.DeviceAdminAdd: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.deviceinfo.Status: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Display: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.IccLockSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.MediaFormat: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.RadioInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$DockSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SettingsLicenseActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$LocalePickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$RunningServicesActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$StorageUseActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.TestingSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.UsageStats: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiAPITest: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiConfigInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiInfo: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiPickerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void setWallpaper(java.io.InputStream)> (3)
<com.android.settings.wifi.WifiStatusTest: void setWallpaper(java.io.InputStream)> (3)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(java.io.InputStream)> (3)
<com.android.spare_parts.SpareParts: void setWallpaper(java.io.InputStream)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.StkAppService: void setWallpaper(java.io.InputStream)> (2)
<com.android.stk.StkApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.StkDialogActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.StkInputActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.StkLauncherActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.StkMenuActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.stk.ToneDialog: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.SystemUIService: void setWallpaper(java.io.InputStream)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.usb.UsbConfirmActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.usb.UsbPermissionActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.usb.UsbResolverActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.systemui.usb.UsbStorageActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.EffectsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.KenBurnsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.OverlaysActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.OverlayTitleActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.ProjectsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.service.ApiService: void setWallpaper(java.io.InputStream)> (2)
<com.android.videoeditor.TransitionsActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.VideoEditorActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.voicedialer.VoiceDialerActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.fall.Fall: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.fall.FallWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.galaxy.Galaxy: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.grass.Grass: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.grass.GrassWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.cache.CacheService: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.ActiveWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.CropImage: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Gallery: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.MonitoredActivity: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.MovieView: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Photographs: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.media.Wallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.cooliris.picasa.PicasaService: void setWallpaper(java.io.InputStream)> (2)
<com.example.android.jetboy.JetBoy: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.lunarlander.LunarLander: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.notepad.NoteEditor: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.notepad.NotesList: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.notepad.NotesLiveFolder: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.notepad.TitleEditor: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.rssreader.RssReader: void setWallpaper(java.io.InputStream)> (3)
<com.example.android.snake.Snake: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.DownloadVoiceData: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.EngineSettings: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.GetSampleText: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.Pico: void setWallpaper(java.io.InputStream)> (3)
<android.accessibilityservice.AccessibilityService: void clearWallpaper()> (2)
<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()> (3)
<android.accounts.ChooseAccountActivity: void clearWallpaper()> (3)
<android.accounts.GrantCredentialsPermissionActivity: void clearWallpaper()> (3)
<android.app.ActivityGroup: void clearWallpaper()> (3)
<android.app.Activity: void clearWallpaper()> (3)
<android.app.AliasActivity: void clearWallpaper()> (3)
<android.app.Application: void clearWallpaper()> (2)
<android.app.backup.BackupAgentHelper: void clearWallpaper()> (3)
<android.app.backup.BackupAgent: void clearWallpaper()> (2)
<android.app.ExpandableListActivity: void clearWallpaper()> (3)
<android.app.FullBackupAgent: void clearWallpaper()> (3)
<android.app.IntentService: void clearWallpaper()> (2)
<android.app.LauncherActivity: void clearWallpaper()> (3)
<android.app.ListActivity: void clearWallpaper()> (3)
<android.app.NativeActivity: void clearWallpaper()> (3)
<android.app.ReceiverRestrictedContext: void clearWallpaper()> (2)
<android.app.Service: void clearWallpaper()> (2)
<android.app.TabActivity: void clearWallpaper()> (3)
<android.content.MutableContextWrapper: void clearWallpaper()> (2)
<android.content.SyncActivityTooManyDeletes: void clearWallpaper()> (3)
<android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()> (2)
<android.inputmethodservice.InputMethodService: void clearWallpaper()> (3)
<android.preference.PreferenceActivity: void clearWallpaper()> (3)
<android.service.wallpaper.WallpaperService: void clearWallpaper()> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void clearWallpaper()> (3)
<android.speech.RecognitionService: void clearWallpaper()> (2)
<android.test.ActivityUnitTestCase$MockParent: void clearWallpaper()> (3)
<android.test.IsolatedContext: void clearWallpaper()> (2)
<android.test.mock.MockApplication: void clearWallpaper()> (3)
<android.test.RenamingDelegatingContext: void clearWallpaper()> (2)
<android.test.TestBrowserActivity: void clearWallpaper()> (3)
<android.test.TestListActivity: void clearWallpaper()> (3)
<android.tts.TtsService: void clearWallpaper()> (2)
<android.view.ContextThemeWrapper: void clearWallpaper()> (2)
<android.widget.RemoteViewsService: void clearWallpaper()> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void clearWallpaper()> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppService: void clearWallpaper()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearWallpaper()> (3)
<com.android.bluetooth.opp.TestActivity: void clearWallpaper()> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void clearWallpaper()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void clearWallpaper()> (2)
<com.android.browser.AddBookmarkPage: void clearWallpaper()> (3)
<com.android.browser.BookmarkSearch: void clearWallpaper()> (3)
<com.android.browser.BrowserActivity: void clearWallpaper()> (3)
<com.android.browser.BrowserBackupAgent: void clearWallpaper()> (3)
<com.android.browser.BrowserPreferencesPage: void clearWallpaper()> (3)
<com.android.browser.Browser: void clearWallpaper()> (3)
<com.android.browser.ShortcutActivity: void clearWallpaper()> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void clearWallpaper()> (3)
<com.android.calculator2.Calculator: void clearWallpaper()> (3)
<com.android.calendar.AbstractCalendarActivity: void clearWallpaper()> (3)
<com.android.calendar.alerts.AlertActivity: void clearWallpaper()> (3)
<com.android.calendar.alerts.AlertService: void clearWallpaper()> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void clearWallpaper()> (3)
<com.android.calendar.AllInOneActivity: void clearWallpaper()> (3)
<com.android.calendar.AsyncQueryServiceHelper: void clearWallpaper()> (3)
<com.android.calendar.CalendarApplication: void clearWallpaper()> (3)
<com.android.calendar.CalendarBackupAgent: void clearWallpaper()> (4)
<com.android.calendar.CalendarSettingsActivity: void clearWallpaper()> (3)
<com.android.calendar.event.EditEventActivity: void clearWallpaper()> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void clearWallpaper()> (3)
<com.android.calendar.SearchActivity: void clearWallpaper()> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void clearWallpaper()> (3)
<com.android.camera.ActivityBase: void clearWallpaper()> (3)
<com.android.camera.Camera: void clearWallpaper()> (3)
<com.android.camera.VideoCamera: void clearWallpaper()> (3)
<com.android.certinstaller.CertFileList: void clearWallpaper()> (4)
<com.android.certinstaller.CertFile: void clearWallpaper()> (3)
<com.android.certinstaller.CertInstallerMain: void clearWallpaper()> (4)
<com.android.certinstaller.CertInstaller: void clearWallpaper()> (3)
<com.android.contacts.activities.AttachPhotoActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ContactBrowserActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ContactDetailActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ContactEditorActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ContactSelectionActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ContactsFrontDoor: void clearWallpaper()> (3)
<com.android.contacts.activities.JoinContactActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.NonPhoneActivity: void clearWallpaper()> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void clearWallpaper()> (3)
<com.android.contacts.CallContactActivity: void clearWallpaper()> (3)
<com.android.contacts.CallDetailActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactOptionsActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactsActivity: void clearWallpaper()> (3)
<com.android.contacts.ContactsApplication: void clearWallpaper()> (3)
<com.android.contacts.ContactSaveService: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void clearWallpaper()> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void clearWallpaper()> (3)
<com.android.contacts.DialtactsActivity: void clearWallpaper()> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void clearWallpaper()> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void clearWallpaper()> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void clearWallpaper()> (3)
<com.android.contacts.RecentCallsListActivity: void clearWallpaper()> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void clearWallpaper()> (3)
<com.android.contacts.test.FragmentTestActivity: void clearWallpaper()> (3)
<com.android.contacts.TwelveKeyDialer: void clearWallpaper()> (3)
<com.android.contacts.util.EmptyService: void clearWallpaper()> (2)
<com.android.contacts.vcard.CancelActivity: void clearWallpaper()> (3)
<com.android.contacts.vcard.ExportVCardActivity: void clearWallpaper()> (3)
<com.android.contacts.vcard.ImportVCardActivity: void clearWallpaper()> (3)
<com.android.contacts.vcard.SelectAccountActivity: void clearWallpaper()> (3)
<com.android.contacts.vcard.VCardService: void clearWallpaper()> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void clearWallpaper()> (3)
<com.android.defcontainer.DefaultContainerService: void clearWallpaper()> (3)
<com.android.deskclock.AlarmAlertFullScreen: void clearWallpaper()> (3)
<com.android.deskclock.AlarmAlert: void clearWallpaper()> (4)
<com.android.deskclock.AlarmClock: void clearWallpaper()> (3)
<com.android.deskclock.AlarmKlaxon: void clearWallpaper()> (2)
<com.android.deskclock.DeskClock: void clearWallpaper()> (3)
<com.android.deskclock.HandleSetAlarm: void clearWallpaper()> (3)
<com.android.deskclock.SetAlarm: void clearWallpaper()> (3)
<com.android.deskclock.SettingsActivity: void clearWallpaper()> (3)
<com.android.development.AccountsTester: void clearWallpaper()> (3)
<com.android.development.AppHwConfigList: void clearWallpaper()> (3)
<com.android.development.AppHwPref: void clearWallpaper()> (3)
<com.android.development.AppPicker: void clearWallpaper()> (3)
<com.android.development.BadBehaviorActivity$BadService: void clearWallpaper()> (2)
<com.android.development.BadBehaviorActivity: void clearWallpaper()> (3)
<com.android.development.ConfigurationViewer: void clearWallpaper()> (3)
<com.android.development.Connectivity: void clearWallpaper()> (3)
<com.android.development.DataList: void clearWallpaper()> (3)
<com.android.development.Details: void clearWallpaper()> (3)
<com.android.development.DevelopmentSettings: void clearWallpaper()> (3)
<com.android.development.Development: void clearWallpaper()> (4)
<com.android.development.EnterURL: void clearWallpaper()> (3)
<com.android.development.InstrumentationList: void clearWallpaper()> (3)
<com.android.development.LogViewer: void clearWallpaper()> (3)
<com.android.development.MediaScannerActivity: void clearWallpaper()> (3)
<com.android.development.PackageBrowser: void clearWallpaper()> (3)
<com.android.development.PackageSummary: void clearWallpaper()> (3)
<com.android.development.PermissionDetails: void clearWallpaper()> (3)
<com.android.development.PointerLocation: void clearWallpaper()> (3)
<com.android.development.ProcessInfo: void clearWallpaper()> (3)
<com.android.development.RunningProcesses: void clearWallpaper()> (3)
<com.android.development.ShowActivity: void clearWallpaper()> (3)
<com.android.development.SyncAdapterDriver: void clearWallpaper()> (3)
<com.android.development.UnderdevelopedSettings: void clearWallpaper()> (4)
<com.android.email.activity.AccountFolderList: void clearWallpaper()> (3)
<com.android.email.activity.AccountShortcutPicker: void clearWallpaper()> (3)
<com.android.email.activity.MailboxList: void clearWallpaper()> (3)
<com.android.email.activity.MessageCompose: void clearWallpaper()> (3)
<com.android.email.activity.MessageFileView: void clearWallpaper()> (3)
<com.android.email.activity.MessageList: void clearWallpaper()> (3)
<com.android.email.activity.MessageListXL: void clearWallpaper()> (3)
<com.android.email.activity.MessageViewBase: void clearWallpaper()> (3)
<com.android.email.activity.MessageView: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSecurity: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSettingsXL: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupActivity: void clearWallpaper()> (3)
<com.android.email.activity.setup.AccountSetupBasics: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupExchange: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupNames: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupOptions: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void clearWallpaper()> (3)
<com.android.email.activity.Welcome: void clearWallpaper()> (3)
<com.android.email.Controller$ControllerService: void clearWallpaper()> (2)
<com.android.email.Email: void clearWallpaper()> (3)
<com.android.email.ExchangeUtils$NullEmailService: void clearWallpaper()> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void clearWallpaper()> (3)
<com.android.email.service.AccountService: void clearWallpaper()> (2)
<com.android.email.service.AttachmentDownloadService: void clearWallpaper()> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void clearWallpaper()> (3)
<com.android.email.service.EasAuthenticatorService: void clearWallpaper()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void clearWallpaper()> (3)
<com.android.email.service.MailService: void clearWallpaper()> (2)
<com.android.email.service.PolicyService: void clearWallpaper()> (2)
<com.android.email.service.PopImapAuthenticatorService: void clearWallpaper()> (2)
<com.android.email.service.PopImapSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.CalendarSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.ContactsSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.EmailSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.ExchangeService: void clearWallpaper()> (2)
<com.android.exchange.Exchange: void clearWallpaper()> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void clearWallpaper()> (3)
<com.android.globaltime.GlobalTime: void clearWallpaper()> (3)
<com.android.htmlviewer.HTMLViewerActivity: void clearWallpaper()> (3)
<com.android.inputmethod.latin.BackupAgent: void clearWallpaper()> (4)
<com.android.inputmethod.latin.DebugSettings: void clearWallpaper()> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void clearWallpaper()> (3)
<com.android.inputmethod.latin.LatinIME: void clearWallpaper()> (3)
<com.android.inputmethod.latin.Settings: void clearWallpaper()> (3)
<com.android.internal.app.AlertActivity: void clearWallpaper()> (3)
<com.android.internal.app.ChooserActivity: void clearWallpaper()> (3)
<com.android.internal.app.DisableCarModeActivity: void clearWallpaper()> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void clearWallpaper()> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void clearWallpaper()> (3)
<com.android.internal.app.NetInitiatedActivity: void clearWallpaper()> (3)
<com.android.internal.app.PlatLogoActivity: void clearWallpaper()> (3)
<com.android.internal.app.ResolverActivity: void clearWallpaper()> (3)
<com.android.internal.app.RingtonePickerActivity: void clearWallpaper()> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void clearWallpaper()> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void clearWallpaper()> (3)
<com.android.internal.util.AsyncService: void clearWallpaper()> (2)
<com.android.launcher2.LauncherApplication: void clearWallpaper()> (3)
<com.android.launcher2.Launcher: void clearWallpaper()> (3)
<com.android.launcher2.WallpaperChooser: void clearWallpaper()> (3)
<com.android.magicsmoke.MagicSmokeSelector: void clearWallpaper()> (3)
<com.android.magicsmoke.MagicSmoke: void clearWallpaper()> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.mms.MmsApp: void clearWallpaper()> (3)
<com.android.mms.transaction.SmsReceiverService: void clearWallpaper()> (2)
<com.android.mms.transaction.TransactionService: void clearWallpaper()> (2)
<com.android.mms.ui.ClassZeroActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ComposeMessageActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ConversationList: void clearWallpaper()> (3)
<com.android.mms.ui.DeliveryReportActivity: void clearWallpaper()> (3)
<com.android.mms.ui.EditSlideDurationActivity: void clearWallpaper()> (3)
<com.android.mms.ui.ManageSimMessages: void clearWallpaper()> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SearchActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideEditorActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideshowActivity: void clearWallpaper()> (3)
<com.android.mms.ui.SlideshowEditActivity: void clearWallpaper()> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void clearWallpaper()> (3)
<com.android.music.AlbumBrowserActivity: void clearWallpaper()> (3)
<com.android.music.ArtistAlbumBrowserActivity: void clearWallpaper()> (3)
<com.android.music.AudioPreview: void clearWallpaper()> (3)
<com.android.music.CreatePlaylist: void clearWallpaper()> (3)
<com.android.music.DeleteItems: void clearWallpaper()> (3)
<com.android.music.MediaPickerActivity: void clearWallpaper()> (3)
<com.android.music.MediaPlaybackActivity: void clearWallpaper()> (3)
<com.android.music.MediaPlaybackService: void clearWallpaper()> (2)
<com.android.music.MusicBrowserActivity: void clearWallpaper()> (3)
<com.android.music.MusicPicker: void clearWallpaper()> (3)
<com.android.music.PlaylistBrowserActivity: void clearWallpaper()> (3)
<com.android.music.QueryBrowserActivity: void clearWallpaper()> (3)
<com.android.music.RenamePlaylist: void clearWallpaper()> (3)
<com.android.music.ScanningProgress: void clearWallpaper()> (3)
<com.android.music.TrackBrowserActivity: void clearWallpaper()> (3)
<com.android.music.VideoBrowserActivity: void clearWallpaper()> (3)
<com.android.musicvis.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.musicvis.vis1.Visualization1: void clearWallpaper()> (3)
<com.android.musicvis.vis2.Visualization2: void clearWallpaper()> (3)
<com.android.musicvis.vis3.Visualization3: void clearWallpaper()> (3)
<com.android.musicvis.vis4.Visualization4: void clearWallpaper()> (3)
<com.android.musicvis.vis5.Visualization5: void clearWallpaper()> (3)
<com.android.music.WeekSelector: void clearWallpaper()> (3)
<com.android.packageinstaller.InstallAppProgress: void clearWallpaper()> (3)
<com.android.packageinstaller.PackageInstallerActivity: void clearWallpaper()> (3)
<com.android.packageinstaller.UninstallAppProgress: void clearWallpaper()> (3)
<com.android.packageinstaller.UninstallerActivity: void clearWallpaper()> (3)
<com.android.phone.ADNList: void clearWallpaper()> (3)
<com.android.phone.BluetoothHeadsetService: void clearWallpaper()> (2)
<com.android.phone.CallFeaturesSetting: void clearWallpaper()> (3)
<com.android.phone.CdmaCallOptions: void clearWallpaper()> (3)
<com.android.phone.CellBroadcastSms: void clearWallpaper()> (3)
<com.android.phone.ChangeIccPinScreen: void clearWallpaper()> (3)
<com.android.phone.DataUsage: void clearWallpaper()> (3)
<com.android.phone.DeleteFdnContactScreen: void clearWallpaper()> (3)
<com.android.phone.EditFdnContactScreen: void clearWallpaper()> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void clearWallpaper()> (3)
<com.android.phone.EmergencyCallbackModeService: void clearWallpaper()> (2)
<com.android.phone.EmergencyCallHandler: void clearWallpaper()> (3)
<com.android.phone.EmergencyDialer: void clearWallpaper()> (3)
<com.android.phone.EnableFdnScreen: void clearWallpaper()> (3)
<com.android.phone.EnableIccPinScreen: void clearWallpaper()> (3)
<com.android.phone.FakePhoneActivity: void clearWallpaper()> (3)
<com.android.phone.FdnList: void clearWallpaper()> (3)
<com.android.phone.FdnSetting: void clearWallpaper()> (3)
<com.android.phone.GetPin2Screen: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void clearWallpaper()> (3)
<com.android.phone.GsmUmtsCallOptions: void clearWallpaper()> (3)
<com.android.phone.InCallScreenShowActivation: void clearWallpaper()> (3)
<com.android.phone.InCallScreen: void clearWallpaper()> (3)
<com.android.phone.NetworkQueryService: void clearWallpaper()> (2)
<com.android.phone.NetworkSetting: void clearWallpaper()> (3)
<com.android.phone.OutgoingCallBroadcaster: void clearWallpaper()> (3)
<com.android.phone.PhoneApp: void clearWallpaper()> (3)
<com.android.phone.Settings: void clearWallpaper()> (3)
<com.android.phone.SimContacts: void clearWallpaper()> (3)
<com.android.phone.SipCallOptionHandler: void clearWallpaper()> (3)
<com.android.phone.sip.SipEditor: void clearWallpaper()> (3)
<com.android.phone.sip.SipSettings: void clearWallpaper()> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void clearWallpaper()> (3)
<com.android.providers.applications.ApplicationLauncher: void clearWallpaper()> (3)
<com.android.providers.calendar.CalendarDebug: void clearWallpaper()> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void clearWallpaper()> (3)
<com.android.providers.calendar.EmptyService: void clearWallpaper()> (2)
<com.android.providers.downloads.DownloadService: void clearWallpaper()> (2)
<com.android.providers.downloads.SizeLimitActivity: void clearWallpaper()> (3)
<com.android.providers.downloads.ui.DownloadList: void clearWallpaper()> (3)
<com.android.providers.media.MediaScannerService: void clearWallpaper()> (2)
<com.android.providers.media.MtpService: void clearWallpaper()> (2)
<com.android.providers.settings.SettingsBackupAgent: void clearWallpaper()> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void clearWallpaper()> (4)
<com.android.provision.DefaultActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.DialogActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.google.GoogleSearch: void clearWallpaper()> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void clearWallpaper()> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void clearWallpaper()> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchActivity: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void clearWallpaper()> (3)
<com.android.server.LoadAverageService: void clearWallpaper()> (2)
<com.android.server.PackageManagerBackupAgent: void clearWallpaper()> (3)
<com.android.server.ShutdownActivity: void clearWallpaper()> (3)
<com.android.server.SystemBackupAgent: void clearWallpaper()> (4)
<com.android.settings.accounts.AddAccountSettings: void clearWallpaper()> (3)
<com.android.settings.accounts.ChooseAccountActivity: void clearWallpaper()> (3)
<com.android.settings.ActivityPicker: void clearWallpaper()> (3)
<com.android.settings.ApnEditor: void clearWallpaper()> (3)
<com.android.settings.ApnSettings: void clearWallpaper()> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void clearWallpaper()> (3)
<com.android.settings.AppWidgetPickActivity: void clearWallpaper()> (4)
<com.android.settings.BandMode: void clearWallpaper()> (3)
<com.android.settings.BatteryInfo: void clearWallpaper()> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void clearWallpaper()> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void clearWallpaper()> (3)
<com.android.settings.bluetooth.DockService: void clearWallpaper()> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void clearWallpaper()> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void clearWallpaper()> (3)
<com.android.settings.ChooseLockGeneric: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPassword: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPatternTutorial: void clearWallpaper()> (3)
<com.android.settings.ChooseLockPattern: void clearWallpaper()> (3)
<com.android.settings.ConfirmLockPassword: void clearWallpaper()> (3)
<com.android.settings.ConfirmLockPattern: void clearWallpaper()> (3)
<com.android.settings.CreateShortcut: void clearWallpaper()> (4)
<com.android.settings.CredentialStorage: void clearWallpaper()> (3)
<com.android.settings.CryptKeeper$Blank: void clearWallpaper()> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void clearWallpaper()> (3)
<com.android.settings.CryptKeeper: void clearWallpaper()> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void clearWallpaper()> (3)
<com.android.settings.DebugIntentSender: void clearWallpaper()> (3)
<com.android.settings.DeviceAdminAdd: void clearWallpaper()> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void clearWallpaper()> (3)
<com.android.settings.deviceinfo.Status: void clearWallpaper()> (3)
<com.android.settings.Display: void clearWallpaper()> (3)
<com.android.settings.IccLockSettings: void clearWallpaper()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void clearWallpaper()> (3)
<com.android.settings.MediaFormat: void clearWallpaper()> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void clearWallpaper()> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearWallpaper()> (3)
<com.android.settings.RadioInfo: void clearWallpaper()> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$DockSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void clearWallpaper()> (3)
<com.android.settings.SettingsLicenseActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$LocalePickerActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$RunningServicesActivity: void clearWallpaper()> (3)
<com.android.settings.SettingsSafetyLegalActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$SoundSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$StorageSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$StorageUseActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$TetherSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings: void clearWallpaper()> (3)
<com.android.settings.Settings$VpnSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$WifiSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void clearWallpaper()> (3)
<com.android.settings.TestingSettings: void clearWallpaper()> (3)
<com.android.settings.UsageStats: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiAPITest: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiConfigInfo: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiInfo: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiPickerActivity: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void clearWallpaper()> (3)
<com.android.settings.wifi.WifiStatusTest: void clearWallpaper()> (3)
<com.android.soundrecorder.SoundRecorder: void clearWallpaper()> (3)
<com.android.spare_parts.SpareParts: void clearWallpaper()> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void clearWallpaper()> (3)
<com.android.stk.StkAppService: void clearWallpaper()> (2)
<com.android.stk.StkApp: void clearWallpaper()> (3)
<com.android.stk.StkDialogActivity: void clearWallpaper()> (3)
<com.android.stk.StkInputActivity: void clearWallpaper()> (3)
<com.android.stk.StkLauncherActivity: void clearWallpaper()> (3)
<com.android.stk.StkMenuActivity: void clearWallpaper()> (3)
<com.android.stk.ToneDialog: void clearWallpaper()> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void clearWallpaper()> (3)
<com.android.systemui.SystemUIService: void clearWallpaper()> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void clearWallpaper()> (3)
<com.android.systemui.usb.UsbConfirmActivity: void clearWallpaper()> (3)
<com.android.systemui.usb.UsbPermissionActivity: void clearWallpaper()> (3)
<com.android.systemui.usb.UsbResolverActivity: void clearWallpaper()> (3)
<com.android.systemui.usb.UsbStorageActivity: void clearWallpaper()> (3)
<com.android.videoeditor.EffectsActivity: void clearWallpaper()> (3)
<com.android.videoeditor.KenBurnsActivity: void clearWallpaper()> (3)
<com.android.videoeditor.OverlaysActivity: void clearWallpaper()> (3)
<com.android.videoeditor.OverlayTitleActivity: void clearWallpaper()> (3)
<com.android.videoeditor.ProjectsActivity: void clearWallpaper()> (3)
<com.android.videoeditor.service.ApiService: void clearWallpaper()> (2)
<com.android.videoeditor.TransitionsActivity: void clearWallpaper()> (3)
<com.android.videoeditor.VideoEditorActivity: void clearWallpaper()> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void clearWallpaper()> (3)
<com.android.voicedialer.VoiceDialerActivity: void clearWallpaper()> (3)
<com.android.wallpaper.fall.Fall: void clearWallpaper()> (3)
<com.android.wallpaper.fall.FallWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.galaxy.Galaxy: void clearWallpaper()> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.grass.Grass: void clearWallpaper()> (3)
<com.android.wallpaper.grass.GrassWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void clearWallpaper()> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void clearWallpaper()> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void clearWallpaper()> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void clearWallpaper()> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void clearWallpaper()> (3)
<com.cooliris.cache.CacheService: void clearWallpaper()> (3)
<com.cooliris.media.ActiveWallpaper: void clearWallpaper()> (3)
<com.cooliris.media.CropImage: void clearWallpaper()> (3)
<com.cooliris.media.Gallery: void clearWallpaper()> (3)
<com.cooliris.media.MonitoredActivity: void clearWallpaper()> (3)
<com.cooliris.media.MovieView: void clearWallpaper()> (3)
<com.cooliris.media.PhotoAppWidgetBind: void clearWallpaper()> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void clearWallpaper()> (3)
<com.cooliris.media.Photographs: void clearWallpaper()> (3)
<com.cooliris.media.Wallpaper: void clearWallpaper()> (3)
<com.cooliris.picasa.PicasaService: void clearWallpaper()> (2)
<com.example.android.jetboy.JetBoy: void clearWallpaper()> (3)
<com.example.android.lunarlander.LunarLander: void clearWallpaper()> (3)
<com.example.android.notepad.NoteEditor: void clearWallpaper()> (3)
<com.example.android.notepad.NotesList: void clearWallpaper()> (3)
<com.example.android.notepad.NotesLiveFolder: void clearWallpaper()> (3)
<com.example.android.notepad.TitleEditor: void clearWallpaper()> (3)
<com.example.android.rssreader.RssReader: void clearWallpaper()> (3)
<com.example.android.snake.Snake: void clearWallpaper()> (3)
<com.svox.pico.CheckVoiceData: void clearWallpaper()> (3)
<com.svox.pico.DownloadVoiceData: void clearWallpaper()> (3)
<com.svox.pico.EngineSettings: void clearWallpaper()> (3)
<com.svox.pico.GetSampleText: void clearWallpaper()> (3)
<com.svox.pico.Pico: void clearWallpaper()> (3)
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
91 Callers:
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,boolean,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (2)
<com.android.browser.BreadCrumbView: void popView()> (2)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.BrowserBookmarksPage: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onBackPressed()> (2)
<com.android.browser.CombinedBookmarkHistoryView: boolean onBackPressed()> (1)
<com.android.browser.ShortcutActivity: void onBackPressed()> (1)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onBackKey()> (2)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.CombinedBookmarkHistoryView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.OptionsMenuHandler: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PieControl$MenuAdapter: void onClick(android.view.View)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.BrowserContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.browser.Controller$8: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$8: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory(android.content.Context)> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.preferences.ImportWizard: void migrateBookmarks(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.preferences.ImportWizard: void done()> (1)
<com.android.browser.preferences.ImportWizard: void onClick(android.view.View)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (7)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserSettings: void updateBookmarksRlzParameter(android.content.Context)> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserSettings: void access$3900(com.android.browser.BrowserSettings,android.content.Context)> (1)
<com.android.browser.BrowserSettings$RlzUpdateTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserSettings$RlzUpdateTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
Permission:android.permission.WRITE_EXTERNAL_STORAGE
82 Callers:
<com.android.providers.downloads.DownloadProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.downloads.StorageManager: void trimDatabase()> (1)
<com.android.providers.downloads.StorageManager: void access$100(com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager$1: void run()> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (1)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<android.net.Downloads$DownloadBase: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.net.Downloads$ById: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<android.net.Downloads$ByUri: long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadService$1: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub$Proxy: void scanCompleted(java.lang.String,android.net.Uri)> ()
<android.media.IMediaScannerListener$Stub: void scanCompleted(java.lang.String,android.net.Uri)> (2)
<android.media.IMediaScannerListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.media.IMediaScannerListener: void scanCompleted(java.lang.String,android.net.Uri)> (1)
<android.media.MediaScannerConnection$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.DownloadService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.downloads.StorageManager: long discardPurgeableFiles(int,long)> (1)
<com.android.providers.downloads.StorageManager: void findSpace(java.io.File,long,int)> (1)
<com.android.providers.downloads.StorageManager: void verifySpace(int,java.lang.String,long)> (3)
<com.android.providers.downloads.DownloadThread: void writeDataToDestination(com.android.providers.downloads.DownloadThread$State,byte[],int)> (1)
<com.android.providers.downloads.Helpers: java.lang.String generateSaveFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,boolean,com.android.providers.downloads.StorageManager)> (1)
<com.android.providers.downloads.StorageManager: void verifySpaceBeforeWritingToFile(int,java.lang.String,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.downloads.DownloadInfo: android.net.Uri getMyDownloadsUri()> (1)
<com.android.providers.downloads.DownloadInfo: void sendIntentIfRequested()> (1)
<com.android.providers.downloads.DownloadThread: void notifyDownloadCompleted(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (2)
<com.android.browser.Controller$7$1: void run()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (3)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onSaveAttachment(com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.browser.Controller$7: void onReceiveValue(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (2)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (4)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<android.net.Downloads$ByUri: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.Downloads$ById: android.net.Uri getDownloadUri(long)> (5)
<android.net.Downloads$ById: android.net.Downloads$StatusInfo getStatus(android.content.Context,long)> ()
<android.net.Downloads$ById: android.os.ParcelFileDescriptor openDownload(android.content.Context,long,java.lang.String)> ()
<android.net.Downloads$ById: java.io.InputStream openDownloadStream(android.content.Context,long)> ()
<android.net.Downloads$ById: java.lang.String getMimeTypeForId(android.content.Context,long)> ()
<android.net.Downloads$ById: void deleteDownload(android.content.Context,long)> ()
<com.android.providers.downloads.DownloadInfo: android.net.Uri getAllDownloadsUri()> (9)
<com.android.providers.downloads.DownloadInfo$Reader: void readRequestHeaders(com.android.providers.downloads.DownloadInfo)> (1)
<com.android.providers.downloads.DownloadInfo: void notifyPauseDueToSize(boolean)> (1)
<com.android.providers.downloads.DownloadInfo: void startIfReady(long,com.android.providers.downloads.StorageManager)> (2)
<com.android.providers.downloads.DownloadService: boolean scanFile(com.android.providers.downloads.DownloadInfo,boolean,boolean)> (2)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void notifyThroughDatabase(int,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.downloads.DownloadThread: void reportProgress(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void updateDatabaseFromHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadInfo$Reader: com.android.providers.downloads.DownloadInfo newDownloadInfo(android.content.Context,com.android.providers.downloads.SystemFacade)> (1)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (2)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownload(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: boolean access$700(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo,boolean,boolean)> (1)
<com.android.providers.downloads.DownloadService: void deleteDownload(long)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo access$600(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void access$500(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadService: void access$800(com.android.providers.downloads.DownloadService,long)> (1)
Permission:android.permission.REORDER_TASKS
21 Callers:
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int)> (1)
<android.app.ActivityManagerNative: void moveTaskToFront(int,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void moveTaskToFront(int,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void moveTaskToFront(int,int)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void switchTo(com.android.internal.policy.impl.RecentApplicationsDialog$RecentTag)> (2)
<com.android.systemui.recent.RecentApplicationsActivity$LocalCarouselViewHelper: void onCardSelected(int)> (1)
<com.android.systemui.statusbar.tablet.RecentAppsPanel: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onClick(android.view.View)> (1)
<com.android.ex.carousel.CarouselViewHelper: void onCardSelected(int)> (1)
<com.android.ex.carousel.CarouselRS$CarouselCallback: void onCardSelected(int)> (1)
<com.android.ex.carousel.CarouselRS$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> (1)
<android.app.ActivityManagerNative: void moveTaskToBack(int)> (2)
<android.app.IActivityManager: void moveTaskToBack(int)> ()
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> (1)
<android.app.ActivityManagerNative: void moveTaskBackwards(int)> (2)
<android.app.IActivityManager: void moveTaskBackwards(int)> ()
Permission:android.permission.SET_PROCESS_LIMIT
17 Callers:
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.DevelopmentSettings: void writeProcessLimitOptions()> (1)
<com.android.development.DevelopmentSettings: void access$2300(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings$11: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)> (1)
<android.app.ActivityManagerNative: void setProcessForeground(android.os.IBinder,int,boolean)> (2)
<android.app.IActivityManager: void setProcessForeground(android.os.IBinder,int,boolean)> (1)
<com.android.server.NotificationManagerService: void keepProcessAliveLocked(int)> (3)
<com.android.server.NotificationManagerService: void cancelToastLocked(int)> (2)
<com.android.server.NotificationManagerService: void showNextToastLocked()> (2)
<com.android.server.NotificationManagerService: void handleTimeout(com.android.server.NotificationManagerService$ToastRecord)> (1)
<com.android.server.NotificationManagerService: void access$1700(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$ToastRecord)> (2)
<com.android.server.NotificationManagerService: void scheduleTimeoutLocked(com.android.server.NotificationManagerService$ToastRecord,boolean)> (1)
Permission:android.permission.WRITE_APN_SETTINGS
80 Callers:
<com.android.providers.telephony.TelephonyProvider: void checkPermission()> (3)
<com.android.providers.telephony.TelephonyProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.telephony.TelephonyProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.telephony.TelephonyProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider()> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setPreferredApn(int)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.util.ArrayList buildWaitingApns(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void createAllApnList()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.settings.ApnSettings: void setSelectedApnKey(java.lang.String)> (1)
<com.android.settings.ApnSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.ApnSettings: android.net.Uri access$400()> (2)
<com.android.settings.ApnSettings: boolean restoreDefaultApn()> (1)
<com.android.settings.ApnSettings: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.internal.telephony.gsm.GSMPhone: boolean updateCurrentCarrierInProvider()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
Permission:android.permission.ACCESS_FINE_LOCATION
166 Callers:
<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)> (5)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (4)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.cooliris.media.ReverseGeocoder: java.lang.String computeMostGranularCommonLocation(com.cooliris.media.MediaSet)> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateSetViewDetailModeStrings(android.content.Context,com.cooliris.media.MediaSet,int)> (1)
<com.cooliris.media.ReverseGeocoder: boolean process(com.cooliris.media.MediaSet)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.Camera: void startReceivingLocationUpdates()> (3)
<com.android.server.location.LocationBasedCountryDetector: void registerEnabledProviders(java.util.List)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateDetailModeStrings(android.content.Context,java.util.ArrayList)> (1)
<com.cooliris.media.ReverseGeocoder: void run()> (2)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (2)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (2)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.cooliris.media.HudLayer$14: void run()> (1)
<com.cooliris.media.ReverseGeocoder: void <init>(android.content.Context)> (1)
<com.android.camera.Camera: void access$800(com.android.camera.Camera)> (3)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$5800(com.android.camera.Camera)> (4)
<com.android.camera.Camera: void restorePreferences()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.cooliris.app.App: void <init>(android.content.Context)> (6)
<com.android.camera.Camera$8: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.camera.Camera$MyCameraPickerListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera$MyHeadUpDisplayListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera$MyIndicatorWheelListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera: void access$5900(com.android.camera.Camera)> (1)
<com.android.server.location.ComprehensiveCountryDetector$3: void run()> (1)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.Photographs: void onCreate(android.os.Bundle)> (1)
<com.android.camera.ui.CameraPicker$Listener: void onSharedPreferenceChanged()> (1)
<com.android.camera.ui.HeadUpDisplay$Listener: void onSharedPreferenceChanged()> (2)
<com.android.camera.ui.IndicatorWheel$Listener: void onSharedPreferenceChanged()> (2)
<com.android.camera.Camera$9: void run()> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.android.camera.ui.CameraPicker: void onClick(android.view.View)> (1)
<com.android.camera.ui.HeadUpDisplay$2: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.camera.ui.HeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.IndicatorWheel: void onOtherSettingChanged()> (1)
<com.android.camera.ui.IndicatorWheel: void onSettingChanged()> (1)
<com.android.camera.ui.CamcorderHeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.CameraHeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.OtherSettingsPopup$Listener: void onOtherSettingChanged()> (1)
<com.android.camera.ui.BasicSettingPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.VideoCamera: void restorePreferences()> (1)
<com.android.camera.ui.OtherSettingsPopup: void onSettingChanged()> (1)
<com.android.camera.ui.BasicSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.VideoCamera: void access$3300(com.android.camera.VideoCamera)> (1)
<com.android.camera.ui.InLineSettingPicker$Listener: void onSettingChanged()> (1)
<com.android.camera.VideoCamera$6: void run()> (1)
<com.android.camera.ui.InLineSettingPicker: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingPicker: boolean access$200(com.android.camera.ui.InLineSettingPicker,int)> (3)
<com.android.camera.ui.InLineSettingPicker$1: void run()> (1)
<com.android.camera.ui.InLineSettingPicker$2: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingPicker$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(android.location.Criteria,boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (4)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<com.android.server.location.LocationBasedCountryDetector: int getTotalEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
Permission:android.permission.USE_CREDENTIALS
279 Callers:
<android.accounts.AccountManagerService: void getAuthTokenLabel(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)> (1)
<android.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$4: void doWork()> (1)
<android.accounts.AccountManager$5: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (11)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$3: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.EmailContent$Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.TitleBarXLarge: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences,boolean)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent)> (1)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.AccountService$1: void restoreAccountsIfNeeded()> (2)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void restoreAccountsIfNeeded()> ()
<com.android.emailcommon.service.IAccountService$Stub: void restoreAccountsIfNeeded()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void restoreAccountsIfNeeded()> (1)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$5: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (9)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$12: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.wm.WindowManagerService$1: void acquired()> (1)
<com.android.server.wm.WindowManagerService$1: void released()> (1)
<com.android.server.wm.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (6)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (15)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (2)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.PowerManagerService$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.WaveView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$2: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void checkPuk()> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeMotionWhenKeyguardShowingTq()> (1)
<com.android.server.wm.InputManager$Callbacks: void notifyLidSwitchChanged(long,boolean)> ()
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.widget.WaveView: void setGrabbedState(int)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.wm.InputManager$Callbacks: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$2: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (8)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputManager$Callbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<android.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (5)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
Permission:android.permission.READ_CONTACTS
1108 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: java.util.ArrayList loadFromEf(int)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.providers.contacts.LegacyContactImporter: void updateDisplayNamesAndLookupKeys()> (1)
<com.android.providers.contacts.LegacyContactImporter: void importContactsFromLegacyDb()> (1)
<com.android.providers.contacts.LegacyContactImporter: boolean importContacts()> (1)
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)> (1)
<com.android.providers.contacts.ContactsProvider2: void importLegacyContactsInBackground()> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.providers.contacts.SocialProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: com.android.contacts.ContactLoader$Result doInBackground(java.lang.Void[])> (1)
<com.android.contacts.ContactLoader$LoadContactTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (11)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (8)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache: void access$500(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.providers.contacts.SocialProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (6)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.mms.ui.RecipientsAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<com.android.contacts.list.ContactListFilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.list.ContactListFilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.phone.BluetoothAtPhonebook: java.lang.String getLastDialledNumber()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$5400(com.android.phone.BluetoothHandsfree)> (3)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()> (1)
<com.android.contacts.ContactLoader$LoadContactTask: void loadDirectoryMetaData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.AttachPhotoActivity: java.util.ArrayList queryForAllRawContactIds(android.content.ContentResolver,long)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (2)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> (1)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (1)
<com.android.contacts.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.vcard.ExportProcessor: void run()> (1)
<com.android.contacts.vcard.ProcessorBase: void run()> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String)> (1)
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.contacts.CallDetailActivity: void updateData(android.net.Uri)> (1)
<com.android.contacts.CallDetailActivity: void onResume()> (2)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (4)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.contacts.model.EntityDeltaList: com.android.contacts.model.EntityDeltaList fromQuery(android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosFromDatabase(boolean)> (2)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()> (1)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (16)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactsFrontDoor: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.NonPhoneActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.test.FragmentTestActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactInfoLoaded(android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$600(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.model.EntityModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)> (1)
<com.android.contacts.model.EntityModifier: void parseExtras(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(android.accounts.Account,com.android.contacts.model.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorFragment: void createContact(android.accounts.Account)> (3)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (4)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (16)
<com.android.contacts.quickcontact.QuickContactActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactsFrontDoor: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.CallContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.test.FragmentTestActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (12)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (6)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean performClick()> (3)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactUriQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (5)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactIdLoaded(android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.EventInfoFragment$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result load(android.content.Context,java.lang.String)> (2)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportProcessor: void doFinishNotification(android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> (9)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (4)
<com.android.contacts.list.ContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$400(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClick(android.view.View)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor buildCursorForSearchSuggestionsBasedOnFilter(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,int)> (1)
<com.android.contacts.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.widget.ContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> (2)
<com.android.email.NotificationController$2: void run()> (1)
<com.android.contacts.activities.ContactBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void checkSelection()> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.ContactsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.list.StrequentContactListFragment: void refreshSelectedContactUri()> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (16)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (5)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragmentForRequest()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.StrequentContactListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.StrequentContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void configureFragments(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFiltersLoaded()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureContentView(boolean,android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onAction()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (3)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFiltersLoaded()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.ContactListFilterController: void notifyContactListFilterChanged()> (3)
<com.android.contacts.list.ContactListFilterController: void notifyContacListFiltersLoaded()> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (4)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onBackPressed()> (3)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(int)> (1)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.ContactsActivity: void onBackPressed()> (2)
<com.android.contacts.list.ContactListFilterController: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (3)
<com.android.contacts.list.ContactEntryListFragment: void finish()> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.StrequentContactListFragment: void finish()> (2)
<com.android.contacts.list.ContactEntryListFragment: void onClose()> (7)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.ContactPickerFragment: void onClose()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.JoinContactListFragment: void onClose()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onClose()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onClose()> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClose()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.vcard.VCardComposer: java.lang.String createOneEntryInternal(java.lang.String,java.lang.reflect.Method)> (2)
<com.android.vcard.VCardComposer: boolean createOneEntry(java.lang.reflect.Method)> (1)
<com.android.vcard.VCardComposer: java.lang.String access$300(com.android.vcard.VCardComposer,java.lang.String,java.lang.reflect.Method)> (1)
<com.android.vcard.VCardComposer: boolean createOneEntry()> (3)
<com.android.vcard.VCardComposer$HandlerForOutputStream: boolean onInit(android.content.Context)> (1)
<com.android.vcard.VCardComposer$OneEntryHandler: boolean onInit(android.content.Context)> (2)
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: boolean init(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.vcard.VCardComposer: boolean init(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.contacts.editor.AggregationSuggestionEngine: void loadAggregationSuggestions(android.net.Uri)> (1)
<com.android.contacts.RecentCallsListActivity: java.lang.String getBetterNumberFromContacts(java.lang.String)> (1)
<com.android.contacts.RecentCallsListActivity: void callEntry(int)> (1)
<com.android.contacts.RecentCallsListActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> (1)
<com.android.calendar.event.EditEventView$AddAttendeeClickListener: void onClick(android.view.View)> (2)
<com.android.calendar.event.EditEventView: void updateAttendees(java.util.HashMap)> (1)
<com.android.calendar.event.EditEventView: boolean prepareForSave()> (5)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventFragment: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean)> (1)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable)> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void access$400(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (6)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithResponse(java.lang.Object,long,long,long,long,int,int,long,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (4)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (11)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (9)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.DayView: void access$3000(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.EventInfoFragment: void doEdit()> (1)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$3: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2000(com.android.calendar.EventInfoFragment)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.DayView: void access$3400(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.EventInfoFragment$5: void onClick(android.view.View)> (1)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (7)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<android.pim.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)> (1)
<com.android.voicedialer.VoiceContact: java.lang.String redialNumber(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.phone.BluetoothAtPhonebook: boolean queryPhonebook(java.lang.String,com.android.phone.BluetoothAtPhonebook$PhonebookResult)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult access$500(com.android.phone.BluetoothAtPhonebook,java.lang.String,boolean)> (4)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleReadCommand()> (21)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean startInitialQuery()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$900(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache: com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData get(java.lang.String)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> (1)
<com.android.phone.CallLogAsync$GetLastOutgoingCallTask: java.lang.String doInBackground(com.android.phone.CallLogAsync$GetLastOutgoingCallArgs[])> (1)
<com.android.phone.CallLogAsync$GetLastOutgoingCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.EntityDelta: void buildAssert(java.util.ArrayList)> (1)
<com.android.contacts.model.EntityDeltaList: java.util.ArrayList buildDiff()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveEmailContact(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2900(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromStructuredNameToFullName()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()> (3)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (3)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (3)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: boolean queryContactInfo(com.android.contacts.RecentCallsListActivity$CallerInfoQuery)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void run()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.PhoneUtils$4: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (2)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.contacts.ContactLoader$LoadContactTask: void loadGroupMetaData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.list.ProviderStatusLoader: void loadProviderStatus()> (2)
<com.android.contacts.list.ProviderStatusLoader: int getProviderStatus()> (2)
<com.android.contacts.list.ProviderStatusLoader: java.lang.String getProviderStatusData()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void updateFragmentVisibility()> (2)
<com.android.contacts.list.ContactsUnavailableFragment: void update()> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onResume()> (2)
<com.android.contacts.list.ContactsUnavailableFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.list.ProviderStatusLoader$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.ContactsActivity: void onResume()> (2)
<com.android.contacts.list.ProviderStatusLoader$1: void run()> (1)
<com.android.contacts.interactions.ImportExportInteraction: void doShareVisibleContacts()> (1)
<com.android.contacts.interactions.ImportExportInteraction: void access$200(com.android.contacts.interactions.ImportExportInteraction)> (1)
<com.android.contacts.interactions.ImportExportInteraction$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (3)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.ui.ConversationListItemData)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (1)
<com.android.mms.data.Contact$ContactsCache: byte[] loadAvatarData(com.android.mms.data.Contact)> (2)
<com.android.mms.data.Contact$ContactsCache: void fillPhoneTypeContact(com.android.mms.data.Contact,android.database.Cursor)> (2)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.mms.ui.ComposeMessageActivity$22: void run()> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.contacts.CallLogProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.editor.StructuredNameEditorView: void switchFromFullNameToStructuredName()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.RecentCallsListActivity: void startQuery()> (2)
<com.android.contacts.RecentCallsListActivity: void access$000(com.android.contacts.RecentCallsListActivity)> (2)
<com.android.contacts.RecentCallsListActivity: void onResume()> (2)
<com.android.contacts.RecentCallsListActivity$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void onContentChanged()> (1)
<com.android.common.widget.GroupingListAdapter: void onContentChanged()> (1)
<com.android.common.widget.GroupingListAdapter$1: void onChange(boolean)> (1)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment$1: void onRequest(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (3)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.ContactEditorFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void doSaveAction()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onBackPressed()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.list.ProviderStatusLoader: void retryUpgrade()> (1)
<com.android.contacts.list.ContactsUnavailableFragment: void onClick(android.view.View)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void endEntry()> (1)
<com.android.vcard.VCardInterpreter: void endEntry()> (2)
<com.android.vcard.VCardInterpreterCollection: void endEntry()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard(boolean)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseVCardFile()> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V30: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (2)
<com.android.contacts.vcard.ImportProcessor: boolean readOneVCard(android.net.Uri,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.vcard.ImportRequest constructImportRequest(android.net.Uri,android.net.Uri)> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.model.EntityDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.MANAGE_ACCOUNTS
362 Callers:
<android.accounts.AccountManagerService: void checkManageAccountsPermission()> (6)
<android.accounts.AccountManagerService: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManagerService: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (2)
<android.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void clearPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> ()
<android.accounts.IAccountManager$Stub: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> ()
<android.accounts.IAccountManager$Stub: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (1)
<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)> (1)
<android.accounts.IAccountManager: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (1)
<android.accounts.IAccountManager: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (1)
<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (1)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$6: void doWork()> (1)
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManager$7: void doWork()> (1)
<android.accounts.AccountManager$9: void doWork()> (1)
<android.accounts.AccountManager$3: void doWork()> (1)
<android.accounts.AccountManager$8: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.test.IsolatedContext$MockAccountManager: void clearPassword(android.accounts.Account)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (4)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (11)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (3)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$3: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.EmailContent$Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.TitleBarXLarge: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences,boolean)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent)> (1)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<com.cooliris.picasa.PicasaApi: android.accounts.Account[] getAccounts(android.content.Context)> (3)
<com.cooliris.picasa.PicasaService: boolean getIsSyncable(android.content.Context,android.accounts.Account)> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.emailcommon.utility.AccountReconciler: boolean reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.ContentResolver)> (2)
<com.android.email.provider.EmailProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.exchange.ExchangeService$AccountObserver: void onAccountChanged()> (1)
<com.android.settings.accounts.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.AccountService$1: void restoreAccountsIfNeeded()> (2)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaService: void requestSync(android.content.Context,int,long)> (2)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.exchange.ExchangeService: void runAccountReconcilerSync(android.content.Context)> (1)
<com.android.exchange.ExchangeService$AccountObserver: void access$400(com.android.exchange.ExchangeService$AccountObserver)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void restoreAccountsIfNeeded()> ()
<com.android.emailcommon.service.IAccountService$Stub: void restoreAccountsIfNeeded()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<com.android.email.service.MailService$8: void runInternal(android.content.Context)> (1)
<com.android.exchange.ExchangeService: void access$800(com.android.exchange.ExchangeService,android.content.Context)> (2)
<com.android.exchange.ExchangeService$AccountObserver$1: void run()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void restoreAccountsIfNeeded()> (1)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.android.email.service.MailService$8: void runInternal(java.lang.Object)> (1)
<com.android.exchange.ExchangeService$3: void run()> (1)
<com.android.exchange.ExchangeService$7: void run()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$5: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<com.android.email.service.MailService$8: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (9)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$12: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.wm.WindowManagerService$1: void acquired()> (1)
<com.android.server.wm.WindowManagerService$1: void released()> (1)
<com.android.server.wm.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (6)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (15)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (2)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.server.PowerManagerService$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.WaveView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$2: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void checkPuk()> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeMotionWhenKeyguardShowingTq()> (1)
<com.android.server.wm.InputManager$Callbacks: void notifyLidSwitchChanged(long,boolean)> ()
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.widget.WaveView: void setGrabbedState(int)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.wm.InputManager$Callbacks: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$2: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (8)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputManager$Callbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<android.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<android.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (5)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbumPhotos(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.AlbumEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaApi: int getAlbums(android.accounts.AccountManager,android.content.SyncResult,com.cooliris.picasa.UserEntry,com.cooliris.picasa.GDataParser$EntryHandler)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,com.cooliris.picasa.AlbumEntry,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider: void syncUserAlbums(com.cooliris.picasa.PicasaContentProvider$SyncContext,com.cooliris.picasa.UserEntry,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUserPhotos(com.cooliris.picasa.PicasaContentProvider$SyncContext,java.lang.String,android.content.SyncResult)> (1)
Permission:android.permission.WRITE_SYNC_SETTINGS
70 Callers:
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ()
<android.content.IContentService$Stub: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (10)
<android.app.ContextImpl$ApplicationContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.preferences.ImportWizard: void done()> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void saveSettings()> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.settings.accounts.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.browser.preferences.ImportWizard: void onClick(android.view.View)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onPause()> (2)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<android.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ()
<android.content.IContentService$Stub: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.content.IContentService$Stub: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.app.ContextImpl$ApplicationContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ()
<android.content.IContentService$Stub: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (10)
<android.app.ContextImpl$ApplicationContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<android.content.SyncManager$InitializerServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> ()
<android.content.IContentService$Stub: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService: void setMasterSyncAutomatically(boolean)> (1)
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> (5)
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()> ()
<com.android.settings.accounts.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.BROADCAST_STICKY
2127 Callers:
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String)> (6)
<com.android.internal.telephony.cdma.CDMAPhone: void sendEmergencyCallbackModeChange()> (3)
<com.android.internal.telephony.IccCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (10)
<com.android.server.am.ActivityManagerService: void broadcastStickyIntent(android.content.Intent,java.lang.String)> (1)
<com.android.server.BatteryService: void sendIntent()> (1)
<com.android.server.WiredAccessoryObserver: void sendIntent(int,int,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendEmergencyCallbackModeChange()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.RuimCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.cdma.RuimRecords: void onRuimReady()> (1)
<com.android.internal.telephony.gsm.SimCard: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.gsm.SIMRecords: void onSimReady()> (3)
<com.android.internal.telephony.IccCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (3)
<com.android.server.BatteryService: void processValues()> (1)
<com.android.server.WiredAccessoryObserver: void sendIntents(int,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.gsm.SIMRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onSimReady()> (1)
<com.android.internal.telephony.cdma.RuimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.gsm.SimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.IccCard: void getIccCardStatusDone(android.os.AsyncResult)> (3)
<com.android.server.BatteryService: void update()> (2)
<com.android.server.WiredAccessoryObserver: void access$300(com.android.server.WiredAccessoryObserver,int,int,java.lang.String)> (1)
<com.android.internal.telephony.IccRecords: void onRecordLoaded()> ()
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onRecordLoaded()> (3)
<com.android.internal.telephony.cdma.RuimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.IccCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (3)
<com.android.server.BatteryService: void access$000(com.android.server.BatteryService)> (2)
<com.android.server.BatteryService: void <init>(android.content.Context,com.android.server.LightsService)> (1)
<com.android.internal.telephony.cdma.RuimCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<com.android.server.BatteryService$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.BatteryService$2: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void sendStickyBroadcast(android.content.Intent)> (31)
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> (458)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.SupplicantStateTracker: void sendSupplicantStateChangedBroadcast(android.net.wifi.SupplicantState,boolean)> (1)
<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)> (3)
<android.net.wifi.WifiStateMachine: void setWifiApState(int)> (1)
<android.net.wifi.WifiStateMachine: void setWifiState(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateSpnDisplay()> (5)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateSpnDisplay()> (5)
<com.android.server.ConnectivityService: void sendProxyBroadcast(android.net.ProxyProperties)> (2)
<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void sendFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionStateChanged(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities)> (1)
<com.android.server.TelephonyRegistry: void broadcastServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.server.TelephonyRegistry: void broadcastSignalStrengthChanged(android.telephony.SignalStrength)> (1)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.ThrottleService$MyHandler: void clearThrottleAndNotification()> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.usb.UsbService: void update(boolean)> (2)
<com.android.server.DockObserver: void update()> (2)
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.accounts.ChooseAccountActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ActivityGroup: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.Application: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.ExpandableListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.FullBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.IntentService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.NativeActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.content.MutableContextWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyBroadcast(android.content.Intent)> (3)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyBroadcast(android.content.Intent)> (3)
<android.preference.PreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.service.wallpaper.WallpaperService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.speech.RecognitionService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.IsolatedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.TestBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.TestListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.tts.TtsService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<android.widget.RemoteViewsService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.TestActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BookmarkSearch: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.Browser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.ShortcutActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calculator2.Calculator: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AbstractCalendarActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.AlertService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.event.EditEventActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.ActivityBase: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.Camera: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.VideoCamera: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertFileList: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertFile: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertInstallerMain: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertInstaller: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactDetailActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactEditorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactsFrontDoor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.JoinContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.NonPhoneActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallDetailActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactOptionsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactSaveService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.DialtactsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.RecentCallsListActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.test.FragmentTestActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.TwelveKeyDialer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.util.EmptyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.vcard.CancelActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.ExportVCardActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.ImportVCardActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.SelectAccountActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.VCardService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.defcontainer.DefaultContainerService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlert: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.AlarmClock: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmKlaxon: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.HandleSetAlarm: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SetAlarm: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AccountsTester: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwConfigList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwPref: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ConfigurationViewer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Connectivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DataList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Details: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DevelopmentSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Development: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.EnterURL: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.InstrumentationList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.LogViewer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.MediaScannerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageBrowser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageSummary: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PermissionDetails: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PointerLocation: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ProcessInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.RunningProcesses: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ShowActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.SyncAdapterDriver: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.development.UnderdevelopedSettings: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.AccountFolderList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.AccountShortcutPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MailboxList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageCompose: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageFileView: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageListXL: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageViewBase: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageView: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSecurity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSettingsXL: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupExchange: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Welcome: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.Controller$ControllerService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.Email: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.ExchangeUtils$NullEmailService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.AccountService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.MailService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PolicyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PopImapAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.CalendarSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ContactsSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.EmailSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ExchangeService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.Exchange: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.globaltime.GlobalTime: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.BackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.DebugSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIME: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.Settings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ChooserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.DisableCarModeActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.NetInitiatedActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.PlatLogoActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ResolverActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.RingtonePickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.util.AsyncService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.launcher2.LauncherApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.Launcher: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.WallpaperChooser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.magicsmoke.MagicSmoke: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.MmsApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.transaction.SmsReceiverService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.ui.ClassZeroActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ComposeMessageActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConversationList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.DeliveryReportActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ManageSimMessages: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideEditorActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowEditActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AudioPreview: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.CreatePlaylist: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.DeleteItems: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.PlaylistBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.QueryBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.RenamePlaylist: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ScanningProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.TrackBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.VideoBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis3.Visualization3: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis4.Visualization4: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis5.Visualization5: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.WeekSelector: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.InstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ADNList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.BluetoothHeadsetService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.CallFeaturesSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CellBroadcastSms: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ChangeIccPinScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DataUsage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DeleteFdnContactScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EditFdnContactScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.EmergencyCallHandler: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyDialer: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableFdnScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableIccPinScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FakePhoneActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GetPin2Screen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallOptions: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreenShowActivation: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreen: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.NetworkQueryService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.NetworkSetting: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.OutgoingCallBroadcaster: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.PhoneApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.Settings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SimContacts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SipCallOptionHandler: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.sip.SipEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.sip.SipSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.applications.ApplicationLauncher: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarDebug: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.EmptyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.downloads.DownloadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.downloads.SizeLimitActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.downloads.ui.DownloadList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.media.MediaScannerService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.media.MtpService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.settings.SettingsBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.DialogActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.LoadAverageService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.server.PackageManagerBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.SystemBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.accounts.AddAccountSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.accounts.ChooseAccountActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ActivityPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AppWidgetPickActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.BandMode: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.BatteryInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DockService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockGeneric: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPassword: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternTutorial: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPattern: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPassword: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPattern: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CreateShortcut: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.CredentialStorage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeper$Blank: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DebugIntentSender: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminAdd: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Status: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Display: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.IccLockSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MediaFormat: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RadioInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DockSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsLicenseActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$LocalePickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$RunningServicesActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$StorageUseActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TestingSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UsageStats: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiAPITest: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiConfigInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiInfo: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiPickerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiStatusTest: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.soundrecorder.SoundRecorder: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.spare_parts.SpareParts: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkAppService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.stk.StkApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkDialogActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkInputActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkLauncherActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkMenuActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.ToneDialog: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.SystemUIService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbConfirmActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbResolverActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbStorageActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.EffectsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.OverlaysActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.OverlayTitleActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.ProjectsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.service.ApiService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.VideoEditorActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.VoiceDialerActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.fall.Fall: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.cache.CacheService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.ActiveWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.CropImage: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Gallery: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MonitoredActivity: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MovieView: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Photographs: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Wallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.picasa.PicasaService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.example.android.jetboy.JetBoy: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.lunarlander.LunarLander: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NoteEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NotesList: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NotesLiveFolder: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.TitleEditor: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.rssreader.RssReader: void sendStickyBroadcast(android.content.Intent)> (3)
<com.example.android.snake.Snake: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.DownloadVoiceData: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.EngineSettings: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.GetSampleText: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.Pico: void sendStickyBroadcast(android.content.Intent)> (3)
<android.net.wifi.SupplicantStateTracker: void access$200(android.net.wifi.SupplicantStateTracker,android.net.wifi.SupplicantState,boolean)> (3)
<android.net.wifi.WifiStateMachine: void access$8300(android.net.wifi.WifiStateMachine,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void handleNetworkDisconnect()> (1)
<android.net.wifi.WifiStateMachine: void handleSuccessfulIpConfiguration(android.net.DhcpInfoInternal)> (1)
<android.net.wifi.WifiStateMachine: void access$1300(android.net.wifi.WifiStateMachine,int)> (5)
<android.net.wifi.WifiStateMachine: void access$1200(android.net.wifi.WifiStateMachine,int)> (5)
<com.android.internal.policy.impl.PhoneWindowManager$2: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTime()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updateSpnDisplay()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.ServiceStateTracker: void updateSpnDisplay()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.server.ConnectivityService: void handleApplyDefaultProxy(int)> (1)
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> (3)
<com.android.server.ConnectivityService: void access$1600(com.android.server.ConnectivityService,android.content.Intent)> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)> (2)
<com.android.server.ConnectivityService: void sendStickyBroadcastDelayed(android.content.Intent,int)> (2)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int)> (2)
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.usb.UsbService: void access$400(com.android.server.usb.UsbService,boolean)> (1)
<com.android.server.usb.UsbService: void systemReady()> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.music.MediaPlaybackService: void notifyChange(java.lang.String)> (16)
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine: void access$4700(android.net.wifi.WifiStateMachine)> (3)
<android.net.wifi.WifiStateMachine: void access$8900(android.net.wifi.WifiStateMachine,android.net.DhcpInfoInternal)> (2)
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState$1: void run()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState$1: void run()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)> (3)
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> ()
<android.net.IConnectivityManager$Stub: void setGlobalProxy(android.net.ProxyProperties)> (2)
<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy()> (1)
<com.android.server.ConnectivityService: void access$200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendInetConditionBroadcast(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendGeneralBroadcastDelayed(android.net.NetworkInfo,java.lang.String,int)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.usb.UsbService$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$1600(com.android.music.MediaPlaybackService,java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void addToPlayList(long[],int)> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void moveQueueItem(int,int)> (1)
<com.android.music.MediaPlaybackService: void next(boolean)> (6)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void pause()> (4)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wm.WindowManagerService$PolicyThread: void run()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,int,boolean)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void access$1400(com.android.server.ConnectivityService)> (2)
<com.android.server.ConnectivityService: void handleInetConditionHoldEnd(int,int)> (1)
<com.android.server.ConnectivityService: void access$300(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void sendConnectedBroadcastDelayed(android.net.NetworkInfo,int)> (2)
<com.android.internal.util.State: void enter()> (13)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void moveQueueItem(int,int)> (2)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService: void open(java.lang.String)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void access$1000(com.android.server.ConnectivityService,int,int)> (2)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void doNotifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void moveQueueItem(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: void moveQueueItem(int,int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void openCurrent()> (9)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.wm.WindowManagerService$1)> (1)
<com.android.settings.ProxySelector: boolean saveToDb()> (1)
<com.android.server.ConnectivityService: void handleInetConditionChange(int,int)> (1)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (2)
<com.android.music.IMediaPlaybackService: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void moveQueueItem(int,int)> (1)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFile(java.lang.String)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<com.android.music.IMediaPlaybackService: void play()> (4)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<com.android.server.wm.WindowManagerService$WMThread: void run()> (2)
<com.android.settings.ProxySelector$1: void onClick(android.view.View)> (1)
<com.android.server.ConnectivityService: void access$900(com.android.server.ConnectivityService,int,int)> (2)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (6)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (3)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (8)
<com.android.internal.telephony.cdma.CDMAPhone: void notifySignalStrength()> (3)
<com.android.internal.telephony.gsm.GSMPhone: void notifySignalStrength()> (1)
<com.android.music.MusicUtils: void deleteTracks(android.content.Context,long[])> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void makeNowPlayingCursor()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MusicUtils: void clearQueue()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean removeItem(int)> (2)
<com.android.music.MusicUtils: void addToCurrentPlaylist(android.content.Context,long[])> (3)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void moveItem(int,int)> (2)
<com.android.music.MediaPlaybackActivity$8: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void scanForward(int,long)> (3)
<com.android.music.IMediaPlaybackService: void openFile(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void access$1500(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.MediaPlaybackActivity: void scanBackward(int,long)> (3)
<com.android.music.TrackBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<com.android.music.MusicBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void togglePartyShuffle()> (5)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.ConnectivityService: void reportInetCondition(int,int)> (2)
<com.android.internal.util.StateMachine: void start()> (13)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyNoData(com.android.internal.telephony.DataConnection$FailCause,com.android.internal.telephony.ApnContext)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (9)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (16)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection()> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void onSignalStrengthResult(android.os.AsyncResult)> (2)
<com.android.music.DeleteItems$2: void onClick(android.view.View)> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean requery()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void <init>(com.android.music.TrackBrowserActivity,com.android.music.IMediaPlaybackService,java.lang.String[])> (2)
<com.android.music.TrackBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: void removeItem()> (1)
<com.android.music.TrackBrowserActivity: void removePlaylistItem(int)> (2)
<com.android.music.AlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity$4: void drop(int,int)> (1)
<com.android.music.TrackBrowserActivity: void moveItem(boolean)> (1)
<com.android.music.MediaPlaybackActivity: void access$1000(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int,boolean)> (3)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int)> (7)
<com.android.music.MusicUtils: void playPlaylist(android.content.Context,long)> (2)
<com.android.music.MediaPlaybackActivity: void access$800(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$1100(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$900(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void access$700(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$600(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.AlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> ()
<android.net.IConnectivityManager$Stub: void reportInetCondition(int,int)> (2)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,com.android.internal.telephony.ApnContext,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,com.android.internal.telephony.ApnContext,int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.DataConnectionTracker: void notifyApnIdDisconnected(java.lang.String,int)> (4)
<com.android.internal.telephony.DataConnectionTracker: void notifyApnIdUpToCurrent(java.lang.String,int)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyApnIdUpToCurrent(java.lang.String,com.android.internal.telephony.ApnContext,java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DataConnectionTracker: void notifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void cleanUpConnection(boolean,com.android.internal.telephony.ApnContext)> (10)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataConnection(java.lang.String)> (7)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDefaultData(com.android.internal.telephony.ApnContext)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection()> (3)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection()> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.music.TrackBrowserActivity$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor getTrackCursor(com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (3)
<com.android.music.TrackBrowserActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.music.TrackBrowserActivity: void access$700(com.android.music.TrackBrowserActivity,int)> (1)
<com.android.music.TouchInterceptor$DropListener: void drop(int,int)> (1)
<com.android.music.MediaPlaybackActivity$10: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int)> (2)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor)> (1)
<com.android.music.MusicUtils: void shuffleAll(android.content.Context,android.database.Cursor)> (3)
<com.android.music.PlaylistBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: void playPodcasts()> (2)
<com.android.music.PlaylistBrowserActivity: void playRecentlyAdded()> (2)
<com.android.music.QueryBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.QueryBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.MediaPlaybackActivity$6: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$11: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MediaPlaybackActivity$9: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.MediaPlaybackActivity$5: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$4: void onClick(android.view.View)> (1)
<android.net.IConnectivityManager: void reportInetCondition(int,int)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyApnIdDisconnected(java.lang.String,int)> (1)
<com.android.internal.telephony.DataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String,boolean)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyApnIdDisconnected(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyApnIdUpToCurrent(java.lang.String,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyApnIdUpToCurrent(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyDataConnection(java.lang.String)> (10)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void cleanUpAllConnections(boolean,java.lang.String)> (11)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onCleanUpConnection(boolean,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionDetached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.internal.telephony.sip.SipPhone: void simulateDataConnection(com.android.internal.telephony.Phone$DataState)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor access$300(com.android.music.TrackBrowserActivity,com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (2)
<com.android.music.TrackBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.TrackBrowserActivity$5: void remove(int)> (1)
<com.android.music.TouchInterceptor: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.music.RepeatingImageButton$RepeatListener: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.PlaylistBrowserActivity: void access$100(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.PlaylistBrowserActivity: void access$000(com.android.music.PlaylistBrowserActivity)> (1)
<android.net.ConnectivityManager: void reportInetCondition(int,int)> ()
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyOffApnsOfAvailability(java.lang.String,boolean)> (2)
<com.android.internal.telephony.DataConnectionTracker: void notifyDataAvailability(java.lang.String)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean setupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean trySetupData(java.lang.String)> (5)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyDefaultData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCdmaDataDetached()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onCleanUpAllConnections(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.DataConnectionTracker: void onCleanUpConnection(boolean,int,java.lang.String)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.DataConnectionTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallStarted()> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.music.TouchInterceptor$RemoveListener: void remove(int)> (2)
<com.android.music.RepeatingImageButton: void doRepeat(boolean)> (3)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyDataAvailability(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void notifyDataAvailability(java.lang.String)> (8)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void cleanUpConnection(boolean,java.lang.String)> (6)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.DataConnectionTracker: void dispose()> (5)
<com.android.internal.telephony.DataConnectionTracker: void onCleanUpAllConnections(java.lang.String)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.DataConnectionTracker: void restartRadio()> ()
<com.android.internal.telephony.DataConnectionTracker: void onResetDone(android.os.AsyncResult)> (3)
<com.android.music.TouchInterceptor$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.music.RepeatingImageButton: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.music.RepeatingImageButton: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.music.RepeatingImageButton: void access$000(com.android.music.RepeatingImageButton,boolean)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void notifyNoData(com.android.internal.telephony.DataConnection$FailCause)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpAllConnections(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCleanUpConnection(boolean,int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDataStateChanged(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (3)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.music.RepeatingImageButton$1: void run()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onEnableNewApn()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (4)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableNewApn()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone: void dispose()> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (458)
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.accounts.ChooseAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ActivityGroup: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.AliasActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.Application: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.FullBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.IntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.LauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.NativeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.TabActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.speech.RecognitionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.IsolatedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.mock.MockApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.TestBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.TestListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.tts.TtsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.widget.RemoteViewsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.TestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BookmarkSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.Browser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.ShortcutActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calculator2.Calculator: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AbstractCalendarActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.AlertService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.event.EditEventActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.ActivityBase: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.Camera: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.VideoCamera: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.certinstaller.CertFileList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.certinstaller.CertFile: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.certinstaller.CertInstallerMain: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.certinstaller.CertInstaller: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ContactBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ContactDetailActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ContactEditorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ContactsFrontDoor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.JoinContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.NonPhoneActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.CallContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.CallDetailActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactOptionsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactSaveService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.DialtactsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.RecentCallsListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.test.FragmentTestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.TwelveKeyDialer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.util.EmptyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.contacts.vcard.CancelActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.vcard.ExportVCardActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.vcard.ImportVCardActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.vcard.SelectAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.contacts.vcard.VCardService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.defcontainer.DefaultContainerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmAlert: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.AlarmClock: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.AlarmKlaxon: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.DeskClock: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.HandleSetAlarm: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SetAlarm: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AccountsTester: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppHwConfigList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppHwPref: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.AppPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.ConfigurationViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Connectivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.DataList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Details: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.DevelopmentSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.Development: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.EnterURL: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.InstrumentationList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.LogViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.MediaScannerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PackageBrowser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PackageSummary: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PermissionDetails: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.PointerLocation: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.ProcessInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.RunningProcesses: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.ShowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.SyncAdapterDriver: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.development.UnderdevelopedSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.AccountFolderList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.AccountShortcutPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MailboxList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageCompose: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageFileView: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageListXL: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageViewBase: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.MessageView: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSecurity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSettingsXL: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupExchange: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.activity.Welcome: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.Controller$ControllerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.Email: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.ExchangeUtils$NullEmailService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.AccountService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.MailService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.PolicyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.PopImapAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.CalendarSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.ContactsSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.EmailSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.ExchangeService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.Exchange: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.globaltime.GlobalTime: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.DebugSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.LatinIME: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.Settings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ChooserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.DisableCarModeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.NetInitiatedActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.PlatLogoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.RingtonePickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.util.AsyncService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.launcher2.LauncherApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.launcher2.Launcher: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.launcher2.WallpaperChooser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.magicsmoke.MagicSmoke: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.MmsApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.transaction.SmsReceiverService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mms.transaction.TransactionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mms.ui.ClassZeroActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ComposeMessageActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ConversationList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.DeliveryReportActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.ManageSimMessages: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideEditorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideshowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.SlideshowEditActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.AudioPreview: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.CreatePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.DeleteItems: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPlaybackActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MediaPlaybackService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.MusicPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.PlaylistBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.QueryBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.RenamePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.ScanningProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.TrackBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.VideoBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis3.Visualization3: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis4.Visualization4: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis5.Visualization5: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.WeekSelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.InstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.UninstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.ADNList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.BluetoothHeadsetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.CallFeaturesSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.CdmaCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.CellBroadcastSms: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.ChangeIccPinScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.DataUsage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.DeleteFdnContactScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EditFdnContactScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyCallbackModeService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.EmergencyCallHandler: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EmergencyDialer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EnableFdnScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.EnableIccPinScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FakePhoneActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FdnList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.FdnSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GetPin2Screen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.GsmUmtsCallOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.InCallScreenShowActivation: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.InCallScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.NetworkQueryService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phone.NetworkSetting: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.OutgoingCallBroadcaster: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.PhoneApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.Settings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.SimContacts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.SipCallOptionHandler: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.sip.SipEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.sip.SipSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.applications.ApplicationLauncher: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.calendar.CalendarDebug: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.calendar.EmptyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.downloads.DownloadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.downloads.SizeLimitActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.downloads.ui.DownloadList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.providers.media.MediaScannerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.media.MtpService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.providers.settings.SettingsBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.provision.DefaultActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.DialogActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.LoadAverageService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.server.PackageManagerBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.ShutdownActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.SystemBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.settings.accounts.AddAccountSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.accounts.ChooseAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ActivityPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ApnEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ApnSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.settings.BandMode: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.BatteryInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.DockService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPassword: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPatternTutorial: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ChooseLockPattern: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ConfirmLockPassword: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.ConfirmLockPattern: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.CreateShortcut: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.settings.CredentialStorage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.CryptKeeper$Blank: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.CryptKeeper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DebugIntentSender: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.DeviceAdminAdd: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Status: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Display: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.IccLockSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.MediaFormat: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.RadioInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$DockSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SettingsLicenseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$LocalePickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$RunningServicesActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$StorageUseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.TestingSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.UsageStats: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiAPITest: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiConfigInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiPickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.settings.wifi.WifiStatusTest: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.soundrecorder.SoundRecorder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.spare_parts.SpareParts: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.StkAppService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.stk.StkApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.StkDialogActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.StkInputActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.StkLauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.StkMenuActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.stk.ToneDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.SystemUIService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.usb.UsbConfirmActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.usb.UsbPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.usb.UsbResolverActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.systemui.usb.UsbStorageActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.EffectsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.OverlaysActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.OverlayTitleActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.ProjectsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.service.ApiService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.VideoEditorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.voicedialer.VoiceDialerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.fall.Fall: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.cache.CacheService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.ActiveWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.CropImage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Gallery: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.MonitoredActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.MovieView: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Photographs: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.media.Wallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.cooliris.picasa.PicasaService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.example.android.jetboy.JetBoy: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.lunarlander.LunarLander: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.notepad.NoteEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.notepad.NotesList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.notepad.NotesLiveFolder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.notepad.TitleEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.rssreader.RssReader: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.example.android.snake.Snake: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.DownloadVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.EngineSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.GetSampleText: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.Pico: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (1)
<android.app.ActivityManagerNative: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void removeStickyBroadcast(android.content.Intent)> (3)
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> (458)
<com.android.server.DeviceStorageMonitorService: void cancelFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void cancelNotification()> (1)
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.accounts.ChooseAccountActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.accounts.GrantCredentialsPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.Activity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.Application: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.FullBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.IntentService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.NativeActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<android.content.SyncActivityTooManyDeletes: void removeStickyBroadcast(android.content.Intent)> (3)
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)> (3)
<android.preference.PreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.service.wallpaper.WallpaperService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.speech.RecognitionService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.ActivityUnitTestCase$MockParent: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.TestBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.TestListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.tts.TtsService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<android.widget.RemoteViewsService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.basicsmsreceiver.BasicSmsReceiverApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.basicsmsreceiver.DialogSmsDisplay: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.TestActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BookmarkSearch: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.Browser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.ShortcutActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calculator2.Calculator: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AbstractCalendarActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.AlertService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.alerts.DismissAllAlarmsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AllInOneActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AsyncQueryServiceHelper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.CalendarSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.event.EditEventActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.GoogleCalendarUriIntentFilter: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.widget.CalendarAppWidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.ActivityBase: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.Camera: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.VideoCamera: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertFileList: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertFile: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.certinstaller.CertInstallerMain: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.certinstaller.CertInstaller: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.AttachPhotoActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactDetailActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactEditorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactSelectionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ContactsFrontDoor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.JoinContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.NonPhoneActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.activities.ShowOrCreateActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.CallDetailActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactOptionsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactSaveService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$AllContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$PhoneContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.ContactsLiveFolders$StarredContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.DialtactsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.list.CustomContactListFilterActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.preference.ContactsPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.quickcontact.QuickContactActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.RecentCallsListActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.socialwidget.SocialWidgetConfigureActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.test.FragmentTestActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.TwelveKeyDialer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.util.EmptyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.vcard.CancelActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.ExportVCardActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.ImportVCardActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.SelectAccountActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.contacts.vcard.VCardService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.defcontainer.DefaultContainerService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlertFullScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmAlert: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.AlarmClock: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.AlarmKlaxon: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.HandleSetAlarm: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SetAlarm: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AccountsTester: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwConfigList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppHwPref: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.AppPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.BadBehaviorActivity$BadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ConfigurationViewer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Connectivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DataList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Details: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.DevelopmentSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.Development: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.EnterURL: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.InstrumentationList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.LogViewer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.MediaScannerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageBrowser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PackageSummary: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PermissionDetails: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.PointerLocation: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ProcessInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.RunningProcesses: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.ShowActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.SyncAdapterDriver: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.development.UnderdevelopedSettings: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.AccountFolderList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.AccountShortcutPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MailboxList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageCompose: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageFileView: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageListXL: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageViewBase: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.MessageView: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSecurity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSettingsXL: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupAccountType: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.setup.AccountSetupBasics: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupExchange: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupIncoming: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupNames: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupOptions: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupOutgoing: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.activity.Welcome: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.Controller$ControllerService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.Email: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.ExchangeUtils$NullEmailService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.provider.WidgetProvider$WidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.AccountService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AttachmentDownloadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.MailService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PolicyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PopImapAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.PopImapSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.CalendarSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ContactsSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.EmailSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.ExchangeService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.Exchange: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.ExchangeBroadcastProcessorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.globaltime.GlobalTime: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.htmlviewer.HTMLViewerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.BackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.DebugSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.InputLanguageSelection: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.LatinIME: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.Settings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ChooserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.DisableCarModeActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ExternalMediaFormatActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.HeavyWeightSwitcherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.NetInitiatedActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.PlatLogoActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.ResolverActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.RingtonePickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.os.storage.ExternalStorageFormatter: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.service.wallpaper.ImageWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.util.AsyncService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.launcher2.LauncherApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.Launcher: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.launcher2.WallpaperChooser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.magicsmoke.MagicSmokeSelector: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.magicsmoke.MagicSmoke: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.MmsApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.transaction.SmsReceiverService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mms.ui.ClassZeroActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ComposeMessageActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConfirmRateLimitActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ConversationList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.DeliveryReportActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.EditSlideDurationActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.ManageSimMessages: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.MessagingPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideEditorActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.SlideshowEditActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mms.ui.WarnOfStorageLimitsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ArtistAlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AudioPreview: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.CreatePlaylist: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.DeleteItems: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MediaPlaybackService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.music.MusicBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.PlaylistBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.QueryBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.RenamePlaylist: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.ScanningProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.TrackBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.VideoBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis1.Visualization1: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis2.Visualization2: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis3.Visualization3: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis4.Visualization4: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis5.Visualization5: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.WeekSelector: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.InstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.UninstallerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ADNList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.BluetoothHeadsetService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.CallFeaturesSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CdmaCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.CellBroadcastSms: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.ChangeIccPinScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DataUsage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.DeleteFdnContactScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EditFdnContactScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeExitDialog: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyCallbackModeService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.EmergencyCallHandler: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EmergencyDialer: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableFdnScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.EnableIccPinScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FakePhoneActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.FdnSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GetPin2Screen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsAdditionalCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallForwardOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.GsmUmtsCallOptions: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreenShowActivation: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.InCallScreen: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.NetworkQueryService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phone.NetworkSetting: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.OutgoingCallBroadcaster: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.PhoneApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.Settings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SimContacts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.SipCallOptionHandler: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.sip.SipEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.sip.SipSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.phone.TimeConsumingPreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.applications.ApplicationLauncher: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarDebug: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.CalendarProviderIntentService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.calendar.EmptyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.downloads.DownloadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.downloads.SizeLimitActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.downloads.ui.DownloadList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.providers.media.MediaScannerService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.media.MtpService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.providers.settings.SettingsBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.DialogActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.google.GoogleSearch: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivityBase: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.LegacySearchSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchableItemsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivityChooser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.preferences.SearchSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.QsbApplicationWrapper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchWidgetConfigActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.LoadAverageService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.server.PackageManagerBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.SystemBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.accounts.AddAccountSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.accounts.ChooseAccountActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ActivityPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ApnSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.applications.InstalledAppDetailsTop: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.AppWidgetPickActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.BandMode: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.BatteryInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DevicePickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.DockService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.settings.bluetooth.RequestPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockGeneric: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPassword: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPatternTutorial: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ChooseLockPattern: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPassword: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.ConfirmLockPattern: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CreateShortcut: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.settings.CredentialStorage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeper$Blank: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeperConfirm$Blank: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.CryptKeeper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DebugIntentSender: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.DeviceAdminAdd: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.MiscFilesHandler: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.deviceinfo.Status: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Display: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.IccLockSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnablerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.MediaFormat: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.BookmarkPicker: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.quicklaunch.QuickLaunchSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.RadioInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccessibilitySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccountSyncSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$AccountSyncSettingsInAddAccountActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ApplicationSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$BluetoothSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$CryptKeeperSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DateTimeSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DevelopmentSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DeviceAdminSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DeviceInfoSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DisplaySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$DockSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodAndLanguageSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodAndSubtypeEnablerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$InputMethodConfigActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsLicenseActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$LocalePickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ManageAccountsSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$ManageApplicationsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$PowerUsageSummaryActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$PrivacySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$RunningServicesActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.SettingsSafetyLegalActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$SecuritySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$SoundSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$StorageSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$StorageUseActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$TetherSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$UserDictionarySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$VpnSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$WifiSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.Settings$WirelessSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.TestingSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.UsageStats: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiAPITest: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiConfigInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiInfo: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiPickerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiSettingsForSetupWizardXL: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.settings.wifi.WifiStatusTest: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.soundrecorder.SoundRecorder: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.spare_parts.SpareParts: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.speechrecorder.SpeechRecorderActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkAppService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.stk.StkApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkDialogActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkInputActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkLauncherActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.StkMenuActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.stk.ToneDialog: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.recent.RecentApplicationsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.SystemUIService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbConfirmActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbResolverActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.systemui.usb.UsbStorageActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.EffectsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.KenBurnsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.OverlaysActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.OverlayTitleActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.ProjectsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.service.ApiService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.videoeditor.TransitionsActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.VideoEditorActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.VideoEditorBaseActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.voicedialer.VoiceDialerActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.fall.Fall: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.fall.FallWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.Galaxy: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.Grass: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.grass.GrassWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.nexus.NexusWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.cache.CacheService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.ActiveWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.CropImage: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Gallery: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MonitoredActivity: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.MovieView: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetBind: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.PhotoAppWidgetConfigure: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Photographs: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.media.Wallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.cooliris.picasa.PicasaService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.example.android.jetboy.JetBoy: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.lunarlander.LunarLander: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NoteEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NotesList: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.NotesLiveFolder: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.notepad.TitleEditor: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.rssreader.RssReader: void removeStickyBroadcast(android.content.Intent)> (3)
<com.example.android.snake.Snake: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.DownloadVoiceData: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.EngineSettings: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.GetSampleText: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.Pico: void removeStickyBroadcast(android.content.Intent)> (3)
Permission:android.permission.RECEIVE_BOOT_COMPLETED
187 Callers:
<com.android.server.AppWidgetService: void systemReady(boolean)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.server.WiredAccessoryObserver: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<android.server.search.SearchManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (4)
<com.android.server.am.ActivityStack: void activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (7)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityStack: void checkReadyForSleepLocked()> (7)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityRecord: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService: void serviceTimeout(com.android.server.am.ProcessRecord)> (3)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut()> (2)
<com.android.server.am.ActivityManagerService$8$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityStack: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void stopIfSleepingLocked()> (2)
<com.android.server.am.ActivityStack: void activityPaused(android.os.IBinder,boolean)> (3)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,java.lang.String)> (5)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut()> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut()> (2)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (3)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<com.android.server.am.ActivityManagerService: boolean requestServiceBindingLocked(com.android.server.am.ServiceRecord,com.android.server.am.IntentBindRecord,boolean)> (3)
<com.android.server.am.ActivityManagerService: void bringDownServiceLocked(com.android.server.am.ServiceRecord,boolean)> (7)
<com.android.server.am.ActivityManagerService: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void removeConnectionLocked(com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActivityManagerService: void sendServiceArgsLocked(com.android.server.am.ServiceRecord,boolean)> (2)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut()> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<com.android.server.am.ActivityRecord: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService: void requestServiceBindingsLocked(com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean)> (6)
<com.android.server.am.ActivityManagerService: void killServicesLocked(com.android.server.am.ProcessRecord,boolean)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.wm.InputApplicationHandle,com.android.server.wm.InputWindowHandle)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> ()
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.am.ActivityManagerService: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int)> (2)
<com.android.server.am.ActivityManagerService: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<com.android.server.am.ActivityManagerService: boolean access$400(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int)> (8)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void access$300(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.server.wm.InputManager$Callbacks: long notifyANR(com.android.server.wm.InputApplicationHandle,com.android.server.wm.InputWindowHandle)> ()
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.server.PowerManagerService$4: void run()> (1)
<com.android.server.am.ActivityManagerService$ServiceRestarter: void run()> (1)
<com.android.server.am.ActivityManagerService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithUid(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord)> (5)
<com.android.server.am.ActivityManagerService: int access$000(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int,int)> (2)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean)> (4)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (2)
<com.android.server.am.ActivityManagerService: void trimApplications()> (4)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.app.ActivityManagerNative: void killApplicationWithUid(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean)> (3)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo)> (4)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<android.app.IActivityManager: void killApplicationWithUid(java.lang.String,int)> (1)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void processNextBroadcast(boolean)> (3)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.PackageManagerService: void killApplication(java.lang.String,int)> (3)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.ActivityManagerService: void access$100(com.android.server.am.ActivityManagerService,boolean)> (2)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long)> (4)
<com.android.server.PackageManagerService: boolean deletePackageLI(java.lang.String,boolean,int,com.android.server.PackageManagerService$PackageRemovedInfo,boolean)> (4)
<com.android.server.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void scheduleBroadcastsLocked()> (7)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long)> (5)
<com.android.server.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: int deletePackageX(java.lang.String,boolean,boolean,int)> (1)
<com.android.server.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,java.lang.String,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void broadcastTimeoutLocked(boolean)> (2)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.PackageManagerService: android.content.pm.PackageParser$Package access$2000(com.android.server.PackageManagerService,java.io.File,int,int,long)> (1)
<com.android.server.PackageManagerService: boolean deleteSystemPackageLI(android.content.pm.PackageParser$Package,int,com.android.server.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.PackageManagerService: void installPackageLI(com.android.server.PackageManagerService$InstallArgs,boolean,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService: int access$3100(com.android.server.PackageManagerService,java.lang.String,boolean,boolean,int)> (1)
<com.android.server.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: int doQueuedBackups(com.android.internal.backup.IBackupTransport)> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void run()> (5)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void access$200(com.android.server.am.ActivityManagerService,boolean)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.PackageManagerService: void <init>(android.content.Context,boolean)> (1)
<com.android.server.PackageManagerService: void access$2200(com.android.server.PackageManagerService,com.android.server.PackageManagerService$InstallArgs,boolean,com.android.server.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.PackageManagerService$7: void run()> (1)
<com.android.server.PackageManagerService: void access$3900(com.android.server.PackageManagerService,boolean,boolean)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void run()> (2)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,boolean)> (1)
<com.android.server.PackageManagerService$5: void run()> (1)
<com.android.server.PackageManagerService$11: void run()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> (1)
<com.android.commands.bmgr.Bmgr: void doRestorePackage(java.lang.String)> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> ()
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<com.android.server.MountService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void systemReady()> (1)
<com.android.server.AccessibilityManagerService: void registerPackageChangeAndBootCompletedBroadcastReceiver()> (1)
<com.android.server.AccessibilityManagerService: void <init>(android.content.Context)> (1)
Permission:android.permission.MOUNT_FORMAT_FILESYSTEMS
10 Callers:
<com.android.server.MountService: int formatVolume(java.lang.String)> (2)
<android.os.storage.IMountService$Stub$Proxy: int formatVolume(java.lang.String)> ()
<android.os.storage.IMountService$Stub: int formatVolume(java.lang.String)> (2)
<android.os.storage.IMountService: int formatVolume(java.lang.String)> (1)
<android.os.storage.IMountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter$2: void run()> (2)
<com.android.server.MountService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void updateProgressState()> (2)
<com.android.internal.os.storage.ExternalStorageFormatter$1: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: int onStartCommand(android.content.Intent,int,int)> (1)
Permission:android.permission.KILL_BACKGROUND_PROCESSES
9 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.settings.applications.RunningServiceDetails$ActiveDetail: void onClick(android.view.View)> (1)
Permission:android.permission.READ_PHONE_STATE
501 Callers:
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.PhoneSubInfo: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.contacts.SpecialCharSequenceMgr: void showIMEIPanel(android.content.Context,boolean)> (1)
<com.android.contacts.SpecialCharSequenceMgr: void showMEIDPanel(android.content.Context,boolean)> (1)
<com.android.emailcommon.Device: java.lang.String getConsistentDeviceId(android.content.Context)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleIMEIDisplay(android.content.Context,java.lang.String,boolean)> (1)
<com.android.emailcommon.Device: java.lang.String getDeviceIdInternal(android.content.Context)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,boolean,android.widget.EditText)> (2)
<com.android.emailcommon.Device: java.lang.String getDeviceId(android.content.Context)> (5)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String,android.widget.EditText)> (1)
<com.android.contacts.SpecialCharSequenceMgr: boolean handleChars(android.content.Context,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupExchangeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,android.content.Intent,com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,java.lang.String,com.android.emailcommon.service.IEmailServiceCallback)> (2)
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> (2)
<com.android.email.service.AccountService: android.os.IBinder onBind(android.content.Intent)> (1)
<com.android.contacts.TwelveKeyDialer: void afterTextChanged(android.text.Editable)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void startDownload(android.content.Intent,com.android.email.service.AttachmentDownloadService$DownloadRequest)> (1)
<com.android.email.ExchangeUtils: boolean isExchangeAvailable(android.content.Context)> (2)
<com.android.email.ExchangeUtils: com.android.emailcommon.service.IEmailService getExchangeService(android.content.Context,com.android.emailcommon.service.IEmailServiceCallback)> (5)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.emailcommon.service.IAccountService$Stub: java.lang.String getDeviceId()> (2)
<com.android.contacts.TwelveKeyDialer: void setFormattedDigits(java.lang.String,java.lang.String)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: boolean tryStartDownload(com.android.email.service.AttachmentDownloadService$DownloadRequest)> (1)
<com.android.email.activity.setup.AccountSetupAccountType: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.DebugFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.email.activity.setup.AccountSetupExchangeFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getExchangeEmailService()> (1)
<com.android.email.Controller: void serviceLogging(int)> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.ExchangeStore$ExchangeTransport: android.os.Bundle checkSettings(java.net.URI)> (1)
<com.android.emailcommon.service.IAccountService: java.lang.String getDeviceId()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.contacts.TwelveKeyDialer: boolean resolveIntent()> (3)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)> (7)
<com.android.email.activity.setup.AccountServerBaseFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getServiceForAccount(long)> (6)
<com.android.email.Email: void updateLoggingFlags(android.content.Context)> (3)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.AccountServiceProxy$8: void run()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.contacts.TwelveKeyDialer: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void onNewIntent(android.content.Intent)> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.email.activity.setup.AccountSetupBasics: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupExchange: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupIncoming: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupNames: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupOptions: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService access$100(com.android.email.Controller,long)> (1)
<com.android.email.Controller: com.android.emailcommon.service.IEmailService getServiceForMessage(long)> (2)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void serviceCheckMail(long,long,long)> (1)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.Email: void onCreate()> (1)
<com.android.email.service.AccountService$1$1: void run()> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$700(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.email.Controller: void loadMessageForView(long)> (1)
<com.android.email.Controller: void sendMeetingResponse(long,int)> (1)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.email.Controller: void sendMessage(long,long)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$5: void run()> (1)
<com.android.email.service.MailService: boolean syncOneAccount(com.android.email.Controller,long,int)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (3)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.service.MailService: boolean access$200(com.android.email.service.MailService,com.android.email.Controller,long,int)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.service.MailService$3: void run()> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (2)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (3)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Object)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (3)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$1500(com.android.email.activity.MessageListFragment)> (1)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> (1)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()> (1)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (4)
<com.android.phone.CdmaOptions: boolean preferenceTreeClick(android.preference.Preference)> (1)
<com.android.server.location.GpsLocationProvider: void requestSetID(int)> ()
<com.android.server.ThrottleService$DataRecorder: java.io.File getDataFile()> (2)
<com.android.server.ThrottleService$DataRecorder: void checkForSubscriberId()> (2)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.server.ThrottleService$DataRecorder: void record()> (2)
<com.android.server.ThrottleService$DataRecorder: void retrieve()> (2)
<com.android.server.ThrottleService$DataRecorder: boolean setNextPeriod(java.util.Calendar,java.util.Calendar)> (1)
<com.android.server.ThrottleService$DataRecorder: void addData(long,long)> (1)
<com.android.server.ThrottleService$DataRecorder: void <init>(android.content.Context,com.android.server.ThrottleService)> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onRebootRecovery()> (1)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)> (2)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageUtils: java.lang.String getLocalNumber()> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageUtils: boolean isLocalNumber(java.lang.String)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean canAddToContacts(com.android.mms.data.Contact)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.data.Contact$ContactsCache: void access$500(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean access$2000(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Contact)> (1)
<com.android.mms.ui.ComposeMessageActivity: void buildAddAddressToContactMenuItem(android.view.Menu)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$5: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onPrepareOptionsMenu(android.view.Menu)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (3)
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> (2)
<com.android.contacts.RecentCallsListActivity: void onCreate(android.os.Bundle)> (1)
<com.android.contacts.TwelveKeyDialer: void initVoicemailButton()> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.PhoneUtils$4: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (7)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> (2)
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (16)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.contacts.TwelveKeyDialer: void onPause()> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.phone.OtaStartupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void <init>(android.content.Context)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.systemui.statusbar.StatusBar: void start()> (3)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.statusbar.StatusBar: android.view.View makeStatusBarView()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$300(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector$3: void run()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void onCountryDetected(android.location.Country)> (1)
<com.android.phone.PhoneInterfaceManager: void enforceReadPermission()> (1)
<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean isSimPinEnabled()> (2)
<com.android.internal.telephony.ITelephony: boolean isSimPinEnabled()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.WRITE_CONTACTS
1074 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (2)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (8)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.providers.contacts.SocialProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: com.android.contacts.ContactLoader$Result doInBackground(java.lang.Void[])> (1)
<com.android.contacts.ContactLoader$LoadContactTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.RecentCallsListActivity: void resetNewCallsFlag()> (1)
<com.android.contacts.RecentCallsListActivity: void onResume()> (2)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (11)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> (1)
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void updateCallLog(com.android.contacts.RecentCallsListActivity$CallerInfoQuery,com.android.contacts.RecentCallsListActivity$ContactInfo)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: boolean queryContactInfo(com.android.contacts.RecentCallsListActivity$CallerInfoQuery)> (1)
<com.android.contacts.RecentCallsListActivity$RecentCallsAdapter: void run()> (1)
<com.android.contacts.list.ProviderStatusLoader: void retryUpgrade()> (1)
<com.android.contacts.list.ContactsUnavailableFragment: void onClick(android.view.View)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.contacts.RecentCallsListActivity$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)> (1)
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.EntityDeltaList: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void doSaveAction()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onBackPressed()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.contacts.ContactsActivity: void onBackPressed()> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onBackPressed()> (3)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (3)
<com.android.contacts.list.ContactEntryListFragment: void finish()> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.StrequentContactListFragment: void finish()> (2)
<com.android.contacts.list.ContactEntryListFragment: void onClose()> (7)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.ContactPickerFragment: void onClose()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.JoinContactListFragment: void onClose()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onClose()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onClose()> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClose()> (1)
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void endEntry()> (1)
<com.android.vcard.VCardInterpreter: void endEntry()> (2)
<com.android.vcard.VCardInterpreterCollection: void endEntry()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard(boolean)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseVCardFile()> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V30: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (2)
<com.android.contacts.vcard.ImportProcessor: boolean readOneVCard(android.net.Uri,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.vcard.ImportRequest constructImportRequest(android.net.Uri,android.net.Uri)> (1)
<com.android.contacts.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.vcard.ProcessorBase: void run()> ()
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.RecentCallsListActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<com.android.providers.contacts.LegacyContactImporter: void insertCall(android.database.Cursor)> (1)
<com.android.providers.contacts.LegacyContactImporter: void importCalls()> (1)
<com.android.providers.contacts.LegacyContactImporter: void importContactsFromLegacyDb()> (1)
<com.android.providers.contacts.LegacyContactImporter: boolean importContacts()> (1)
<com.android.providers.contacts.ContactsProvider2: boolean importLegacyContacts(com.android.providers.contacts.LegacyContactImporter)> (1)
<com.android.providers.contacts.ContactsProvider2: void importLegacyContactsInBackground()> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (12)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (6)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean performClick()> (3)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactUriQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (5)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactIdLoaded(android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.EventInfoFragment$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result load(android.content.Context,java.lang.String)> (2)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.vcard.ImportProcessor: void doFinishNotification(android.net.Uri)> (1)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> (9)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (4)
<com.android.contacts.list.ContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$400(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (4)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClick(android.view.View)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor buildCursorForSearchSuggestionsBasedOnFilter(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,int)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (16)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (16)
<com.android.contacts.widget.ContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> (2)
<com.android.email.NotificationController$2: void run()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactsFrontDoor: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.CallContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.test.FragmentTestActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactsFrontDoor: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.NonPhoneActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.test.FragmentTestActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void checkSelection()> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (6)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.list.StrequentContactListFragment: void refreshSelectedContactUri()> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (16)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (5)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragmentForRequest()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.StrequentContactListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.StrequentContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void configureFragments(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFiltersLoaded()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureContentView(boolean,android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onAction()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (3)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFiltersLoaded()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.ContactListFilterController: void notifyContactListFilterChanged()> (3)
<com.android.contacts.list.ContactListFilterController: void notifyContacListFiltersLoaded()> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (4)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(int)> (1)
<com.android.contacts.list.ContactListFilterController: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.ui.ConversationListItemData)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.model.EntityDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<android.pim.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment$1: void onRequest(int)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (3)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.ContactEditorFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(android.accounts.Account,com.android.contacts.model.AccountType)> (1)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void createContact(android.accounts.Account)> (3)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (1)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
<com.android.providers.contacts.LegacyApiSupport: long findFirstDataId(long,java.lang.String)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<android.widget.QuickContactBadge: void onClick(android.view.View)> (2)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.providers.contacts.SocialProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.contacts.list.ContactListFilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.list.ContactListFilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.contacts.activities.AttachPhotoActivity: java.util.ArrayList queryForAllRawContactIds(android.content.ContentResolver,long)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (2)
<com.android.providers.contacts.ContactsProvider2: void outputRawContactsAsVCard(java.io.OutputStream,java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> (1)
<com.android.providers.contacts.ContactsProvider2: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> (1)
<com.android.contacts.vcard.ExportProcessor: void runInternal()> (1)
<com.android.contacts.vcard.ExportProcessor: void run()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.contacts.CallDetailActivity: void updateData(android.net.Uri)> (1)
<com.android.contacts.CallDetailActivity: void onResume()> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: com.android.contacts.list.CustomContactListFilterActivity$GroupDelta fromSettings(android.content.ContentResolver,java.lang.String,java.lang.String,boolean)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.vcard.VCardComposer: java.lang.String createOneEntryInternal(java.lang.String,java.lang.reflect.Method)> (2)
<com.android.vcard.VCardComposer: boolean createOneEntry(java.lang.reflect.Method)> (1)
<com.android.vcard.VCardComposer: java.lang.String access$300(com.android.vcard.VCardComposer,java.lang.String,java.lang.reflect.Method)> (1)
<com.android.vcard.VCardComposer: boolean createOneEntry()> (3)
<com.android.vcard.VCardComposer$HandlerForOutputStream: boolean onInit(android.content.Context)> (1)
<com.android.vcard.VCardComposer$OneEntryHandler: boolean onInit(android.content.Context)> (2)
<com.android.bluetooth.pbap.BluetoothPbapCallLogComposer: boolean init(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.vcard.VCardComposer: boolean init(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.contacts.editor.AggregationSuggestionEngine: void loadAggregationSuggestions(android.net.Uri)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean startInitialQuery()> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$900(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache: com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData get(java.lang.String)> (1)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean haveEmailContact(java.lang.String)> (1)
<com.android.mms.ui.ComposeMessageActivity: void addCallAndContactMenuItems(android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$2900(com.android.mms.ui.ComposeMessageActivity,android.view.ContextMenu,com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$6: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: void loadPhoto()> (3)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (3)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: void loadPhoto()> (1)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ShortcutIntentBuilder$LoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (3)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.contacts.list.ShortcutIntentBuilder$ContactLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.contacts.list.ShortcutIntentBuilder$PhoneNumberLoadingAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (3)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.phone.PhoneUtils: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,com.android.internal.telephony.Connection)> (2)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.PhoneUtils$4: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: void loadGroupMetaData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.list.ProviderStatusLoader: void loadProviderStatus()> (2)
<com.android.contacts.list.ProviderStatusLoader: int getProviderStatus()> (2)
<com.android.contacts.list.ProviderStatusLoader: java.lang.String getProviderStatusData()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void updateFragmentVisibility()> (2)
<com.android.contacts.list.ContactsUnavailableFragment: void update()> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onProviderStatusChange()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onResume()> (2)
<com.android.contacts.list.ContactsUnavailableFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.list.ProviderStatusLoader$ProviderStatusListener: void onProviderStatusChange()> (1)
<com.android.contacts.ContactsActivity: void onResume()> (2)
<com.android.contacts.list.ProviderStatusLoader$1: void run()> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (3)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.data.Contact$ContactsCache: byte[] loadAvatarData(com.android.mms.data.Contact)> (2)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: void fillPhoneTypeContact(com.android.mms.data.Contact,android.database.Cursor)> (2)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfo(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForPhoneNumber(java.lang.String)> (1)
<com.android.mms.data.Contact$ContactsCache: java.util.List getContactInfoForPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact$ContactsCache: void updateContact(com.android.mms.data.Contact)> (1)
<com.android.mms.data.Contact: java.util.List getByPhoneUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact$ContactsCache: void access$500(com.android.mms.data.Contact$ContactsCache,com.android.mms.data.Contact)> (1)
<com.android.mms.data.ContactList: com.android.mms.data.ContactList blockingGetByUris(android.os.Parcelable[])> (1)
<com.android.mms.data.Contact$ContactsCache$1: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity$22: void run()> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.contacts.editor.StructuredNameEditorView: void switchFromFullNameToStructuredName()> (1)
<com.android.phone.NotificationMgr$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.LegacyContactImporter: void updateDisplayNamesAndLookupKeys()> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.mms.ui.RecipientsAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<com.android.contacts.ContactLoader$LoadContactTask: void loadDirectoryMetaData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void queryPhotosForPreload()> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void preloadPhotosInBackground()> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryWithContactIdAndLookupKey(android.database.sqlite.SQLiteQueryBuilder,android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.contacts.list.DirectoryListLoader: android.database.Cursor loadInBackground()> (1)
<com.android.contacts.list.DirectoryListLoader: java.lang.Object loadInBackground()> (1)
<com.android.voicedialer.VoiceContact: java.util.List getVoiceContacts(android.app.Activity)> (1)
<com.android.voicedialer.CommandRecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void setupGrammar()> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.contacts.model.EntityDeltaList: com.android.contacts.model.EntityDeltaList fromQuery(android.content.ContentResolver,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosFromDatabase(boolean)> (2)
<com.android.contacts.ContactPhotoManagerImpl$LoaderThread: void loadPhotosInBackground()> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> ()
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactInfoLoaded(android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$600(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor)> (1)
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.inputmethod.latin.ExpandableDictionary$LoadDictionaryTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.model.EntityModifier: void parseStructuredNameExtra(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)> (1)
<com.android.contacts.model.EntityModifier: void parseExtras(android.content.Context,com.android.contacts.model.AccountType,com.android.contacts.model.EntityDelta,android.os.Bundle)> (2)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.contacts.RecentCallsListActivity: java.lang.String getBetterNumberFromContacts(java.lang.String)> (1)
<com.android.contacts.RecentCallsListActivity: void callEntry(int)> (1)
<com.android.contacts.RecentCallsListActivity: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> (1)
<com.android.calendar.event.EditEventView$AddAttendeeClickListener: void onClick(android.view.View)> (2)
<com.android.calendar.event.EditEventView: void updateAttendees(java.util.HashMap)> (1)
<com.android.calendar.event.EditEventView: boolean prepareForSave()> (5)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventFragment: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean)> (1)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable)> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void access$400(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (6)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithResponse(java.lang.Object,long,long,long,long,int,int,long,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (4)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (11)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (9)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.DayView: void access$3000(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.EventInfoFragment: void doEdit()> (1)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$3: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2000(com.android.calendar.EventInfoFragment)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.DayView: void access$3400(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.EventInfoFragment$5: void onClick(android.view.View)> (1)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Connection,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (7)
<com.android.phone.CallCard: void displayOnHoldCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallNotifier: void showMissedCallNotification(com.android.internal.telephony.Connection,long)> (2)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferenceRow(int,com.android.internal.telephony.Connection,boolean)> (1)
<com.android.phone.PhoneUtils: com.android.phone.PhoneUtils$CallerInfoToken startGetCallerInfo(android.content.Context,com.android.internal.telephony.Call,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> (2)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.ManageConferenceUtils: void updateManageConferencePanel(java.util.List)> (2)
<com.android.phone.NotificationMgr: void updateInCallNotification()> (7)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.NotificationMgr: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.NotificationMgr: void updateNotificationsAtStartup()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (7)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.NotificationMgr: void init(android.content.Context)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.phone.BluetoothAtPhonebook: boolean queryPhonebook(java.lang.String,com.android.phone.BluetoothAtPhonebook$PhonebookResult)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (1)
<com.android.phone.BluetoothAtPhonebook: com.android.phone.BluetoothAtPhonebook$PhonebookResult access$500(com.android.phone.BluetoothAtPhonebook,java.lang.String,boolean)> (4)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleReadCommand()> (21)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleReadCommand()> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.contacts.model.EntityDelta: void buildAssert(java.util.ArrayList)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void switchFromStructuredNameToFullName()> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (2)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.contacts.interactions.ImportExportInteraction: void doShareVisibleContacts()> (1)
<com.android.contacts.interactions.ImportExportInteraction: void access$200(com.android.contacts.interactions.ImportExportInteraction)> (1)
<com.android.contacts.interactions.ImportExportInteraction$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.SEND_SMS
137 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
Permission:android.permission.SYSTEM_ALERT_WINDOW
14 Callers:
<com.android.internal.policy.impl.PhoneWindowManager: int checkAddPermission(android.view.WindowManager$LayoutParams)> (1)
<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams)> (1)
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int addWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: int addWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (1)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.SurfaceView: void updateWindow(boolean,boolean)> (26)
Permission:android.permission.RESTART_PACKAGES
9 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.settings.applications.RunningServiceDetails$ActiveDetail: void onClick(android.view.View)> (1)
Permission:android.permission.CHANGE_NETWORK_STATE
665 Callers:
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setIpForwardingEnabled(boolean)> ()
<android.os.INetworkManagementService$Stub: void setIpForwardingEnabled(boolean)> (2)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.INetworkManagementService: void setIpForwardingEnabled(boolean)> (5)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffMasterTetherSettings()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnMasterTetherSettings()> (2)
<com.android.internal.util.State: void enter()> (13)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffMasterTetherSettings()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffMasterTetherSettings()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnMasterTetherSettings()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnMasterTetherSettings()> (2)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<com.android.server.ServerThread: void run()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.server.NetworkManagementService: void startTethering(java.lang.String[])> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startTethering(java.lang.String[])> ()
<android.os.INetworkManagementService$Stub: void startTethering(java.lang.String[])> (2)
<android.os.INetworkManagementService: void startTethering(java.lang.String[])> (1)
<com.android.server.NetworkManagementService: void stopTethering()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopTethering()> ()
<android.os.INetworkManagementService$Stub: void stopTethering()> (2)
<android.os.INetworkManagementService: void stopTethering()> (3)
<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void tetherInterface(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void tetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService: void tetherInterface(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void untetherInterface(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void untetherInterface(java.lang.String)> (2)
<android.os.INetworkManagementService: void untetherInterface(java.lang.String)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setDnsForwarders(java.lang.String[])> ()
<android.os.INetworkManagementService$Stub: void setDnsForwarders(java.lang.String[])> (2)
<android.os.INetworkManagementService: void setDnsForwarders(java.lang.String[])> (1)
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void enableNat(java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void enableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void enableNat(java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void disableNat(java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void disableNat(java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void disableNat(java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void detachPppd(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void detachPppd(java.lang.String)> (2)
<android.os.INetworkManagementService: void detachPppd(java.lang.String)> ()
<com.android.server.NetworkManagementService: void startUsbRNDIS()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startUsbRNDIS()> ()
<android.os.INetworkManagementService$Stub: void startUsbRNDIS()> (2)
<android.os.INetworkManagementService: void startUsbRNDIS()> (1)
<com.android.server.connectivity.Tethering: boolean enableUsbRndis(boolean)> (1)
<com.android.server.connectivity.Tethering: boolean access$2200(com.android.server.connectivity.Tethering,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.internal.util.State: void exit()> (62)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NetworkManagementService: void stopUsbRNDIS()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopUsbRNDIS()> ()
<android.os.INetworkManagementService$Stub: void stopUsbRNDIS()> (2)
<android.os.INetworkManagementService: void stopUsbRNDIS()> (1)
<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: boolean startSoftApWithConfig(android.net.wifi.WifiConfiguration,int)> (1)
<android.net.wifi.WifiStateMachine: boolean access$2300(android.net.wifi.WifiStateMachine,android.net.wifi.WifiConfiguration,int)> (2)
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.NetworkManagementService: void stopAccessPoint()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void stopAccessPoint()> ()
<android.os.INetworkManagementService$Stub: void stopAccessPoint()> (2)
<android.os.INetworkManagementService: void stopAccessPoint()> (2)
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (2)
<android.os.INetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setInterfaceThrottle(java.lang.String,int,int)> ()
<android.os.INetworkManagementService$Stub: void setInterfaceThrottle(java.lang.String,int,int)> (2)
<android.os.INetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> (3)
<com.android.server.ThrottleService$MyHandler: void checkThrottleAndPostNotification(long)> (1)
<com.android.server.ThrottleService$MyHandler: void clearThrottleAndNotification()> (1)
<com.android.server.ThrottleService$MyHandler: void onIfaceUp()> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setDefaultInterfaceForDns(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void setDefaultInterfaceForDns(java.lang.String)> (2)
<android.os.INetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> (1)
<com.android.server.ConnectivityService: void handleDnsConfigurationChange(int)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)> (3)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,int,boolean)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$300(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> (2)
<android.os.INetworkManagementService$Stub$Proxy: void setDnsServersForInterface(java.lang.String,java.lang.String[])> ()
<android.os.INetworkManagementService$Stub: void setDnsServersForInterface(java.lang.String,java.lang.String[])> (2)
<android.os.INetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> (1)
<com.android.server.NetworkManagementService: void flushDefaultDnsCache()> (2)
<android.os.INetworkManagementService$Stub$Proxy: void flushDefaultDnsCache()> ()
<android.os.INetworkManagementService$Stub: void flushDefaultDnsCache()> (2)
<android.os.INetworkManagementService: void flushDefaultDnsCache()> ()
<com.android.server.NetworkManagementService: void flushInterfaceDnsCache(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: void flushInterfaceDnsCache(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: void flushInterfaceDnsCache(java.lang.String)> (2)
<android.os.INetworkManagementService: void flushInterfaceDnsCache(java.lang.String)> ()
<com.android.server.ConnectivityService: void enforceChangePermission()> (8)
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[])> (3)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> (3)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHostAddress(int,byte[])> (2)
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> ()
<android.net.IConnectivityManager$Stub: void setGlobalProxy(android.net.ProxyProperties)> (2)
<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy()> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHost(int,int)> (2)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void access$1400(com.android.server.ConnectivityService)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHost(int,int)> ()
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (3)
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> (4)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> (1)
<com.android.development.Connectivity: void onRoutedRequest(int)> (2)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.settings.ProxySelector: boolean saveToDb()> (1)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()> (2)
<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()> (2)
<com.android.phone.Settings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.RadioInfo$12: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.mms.transaction.Transaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (6)
<com.android.development.Connectivity: void onRoutedHttpRequest()> (1)
<com.android.development.Connectivity: void onRoutedSocketRequest()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<com.android.settings.ProxySelector$1: void onClick(android.view.View)> (1)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean disableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean disableDataConnectivity()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean enableDataConnectivity()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean enableDataConnectivity()> (2)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.ReadRecTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.RetrieveTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.SendTransaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)> (1)
<com.android.mms.transaction.Transaction: byte[] getPdu(java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)> (7)
<com.android.development.Connectivity: void access$2100(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$2000(com.android.development.Connectivity)> (1)
<com.android.internal.telephony.ITelephony: boolean disableDataConnectivity()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: boolean enableDataConnectivity()> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] getPdu(java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[],java.lang.String)> (1)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[],java.lang.String)> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(byte[])> (4)
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[])> (4)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[],java.lang.String)> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])> (2)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(byte[])> (1)
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(long,byte[])> (1)
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])> (2)
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)> (1)
<com.android.mms.transaction.RetrieveTransaction: void sendAcknowledgeInd(com.google.android.mms.pdu.RetrieveConf)> (1)
<com.android.server.ConnectivityService: void enforceTetherChangePermission()> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<android.net.ConnectivityManager: int tether(java.lang.String)> (3)
<android.net.ConnectivityManager: int untether(java.lang.String)> (2)
<android.net.wifi.WifiStateMachine: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<android.server.BluetoothPanProfileHandler: java.lang.String enableTethering(java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void access$000(android.net.wifi.WifiStateMachine,java.util.ArrayList,java.util.ArrayList)> (1)
<android.server.BluetoothPanProfileHandler: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int)> (3)
<android.net.wifi.WifiStateMachine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothPanProfileHandler: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,int,int)> (3)
<android.server.BluetoothService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,int,int)> (3)
<android.server.BluetoothService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int)> (2)
<android.server.BluetoothPanProfileHandler: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanServerDevices()> (1)
<android.server.BluetoothEventLoop: void onNetworkDeviceDisconnected(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onPanDeviceConnectionResult(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onPanDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onNetworkDeviceConnected(java.lang.String,java.lang.String,int)> ()
<android.server.BluetoothService: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothPanProfileHandler: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: void disconnectDevices()> (1)
<android.server.BluetoothService: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.IBluetooth: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disable(boolean)> (6)
<android.bluetooth.IBluetooth$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetooth$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean disable(boolean)> (2)
<android.server.BluetoothService: boolean disable()> ()
<android.server.BluetoothService: void restart()> (2)
<android.server.BluetoothService: void updateBluetoothState(java.lang.String)> (1)
<android.bluetooth.IBluetooth: void setBluetoothTethering(boolean)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disable(boolean)> (2)
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothAdapter: boolean disable()> (3)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: int access$100(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
Permission:android.permission.ACCESS_COARSE_LOCATION
203 Callers:
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (16)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.contacts.TwelveKeyDialer: void onPause()> (1)
<com.android.contacts.TwelveKeyDialer: void onResume()> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.phone.OtaStartupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void <init>(android.content.Context)> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.systemui.statusbar.StatusBar: void start()> (3)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.statusbar.StatusBar: android.view.View makeStatusBarView()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$300(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector$3: void run()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void onCountryDetected(android.location.Country)> (1)
<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)> (5)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (4)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.cooliris.media.ReverseGeocoder: java.lang.String computeMostGranularCommonLocation(com.cooliris.media.MediaSet)> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateSetViewDetailModeStrings(android.content.Context,com.cooliris.media.MediaSet,int)> (1)
<com.cooliris.media.ReverseGeocoder: boolean process(com.cooliris.media.MediaSet)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.Camera: void startReceivingLocationUpdates()> (3)
<com.android.server.location.LocationBasedCountryDetector: void registerEnabledProviders(java.util.List)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.cooliris.media.DetailMode: java.lang.CharSequence[] populateDetailModeStrings(android.content.Context,java.util.ArrayList)> (1)
<com.cooliris.media.ReverseGeocoder: void run()> (2)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (2)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (2)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.cooliris.media.HudLayer$14: void run()> (1)
<com.cooliris.media.ReverseGeocoder: void <init>(android.content.Context)> (1)
<com.android.camera.Camera: void access$800(com.android.camera.Camera)> (3)
<com.android.camera.Camera: void onResume()> (1)
<com.android.camera.Camera: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$5800(com.android.camera.Camera)> (4)
<com.android.camera.Camera: void restorePreferences()> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.cooliris.app.App: void <init>(android.content.Context)> (6)
<com.android.camera.Camera$8: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.camera.Camera$MyCameraPickerListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera$MyHeadUpDisplayListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera$MyIndicatorWheelListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera: void access$5900(com.android.camera.Camera)> (1)
<com.cooliris.media.CropImage: void onCreate(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetBind: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.PhotoAppWidgetConfigure: void onCreate(android.os.Bundle)> (1)
<com.cooliris.media.Photographs: void onCreate(android.os.Bundle)> (1)
<com.android.camera.ui.CameraPicker$Listener: void onSharedPreferenceChanged()> (1)
<com.android.camera.ui.HeadUpDisplay$Listener: void onSharedPreferenceChanged()> (2)
<com.android.camera.ui.IndicatorWheel$Listener: void onSharedPreferenceChanged()> (2)
<com.android.camera.Camera$9: void run()> (1)
<com.cooliris.media.MonitoredActivity: void onCreate(android.os.Bundle)> (2)
<com.android.camera.ui.CameraPicker: void onClick(android.view.View)> (1)
<com.android.camera.ui.HeadUpDisplay$2: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.camera.ui.HeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.IndicatorWheel: void onOtherSettingChanged()> (1)
<com.android.camera.ui.IndicatorWheel: void onSettingChanged()> (1)
<com.android.camera.ui.CamcorderHeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.CameraHeadUpDisplay: void restorePreferences(android.hardware.Camera$Parameters)> (2)
<com.android.camera.ui.OtherSettingsPopup$Listener: void onOtherSettingChanged()> (1)
<com.android.camera.ui.BasicSettingPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.VideoCamera: void restorePreferences()> (1)
<com.android.camera.ui.OtherSettingsPopup: void onSettingChanged()> (1)
<com.android.camera.ui.BasicSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.VideoCamera: void access$3300(com.android.camera.VideoCamera)> (1)
<com.android.camera.ui.InLineSettingPicker$Listener: void onSettingChanged()> (1)
<com.android.camera.VideoCamera$6: void run()> (1)
<com.android.camera.ui.InLineSettingPicker: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingPicker: boolean access$200(com.android.camera.ui.InLineSettingPicker,int)> (3)
<com.android.camera.ui.InLineSettingPicker$1: void run()> (1)
<com.android.camera.ui.InLineSettingPicker$2: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingPicker$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(android.location.Criteria,boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (4)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<com.android.server.location.LocationBasedCountryDetector: int getTotalEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
Permission:android.permission.CALL_PHONE
21 Callers:
<com.android.phone.PhoneInterfaceManager: void enforceCallPermission()> (2)
<com.android.phone.PhoneInterfaceManager: boolean endCall()> (2)
<com.android.phone.PhoneInterfaceManager: void call(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean endCall()> ()
<com.android.internal.telephony.ITelephony$Stub: boolean endCall()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: void call(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: void call(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony: boolean endCall()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: void call(java.lang.String)> ()
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.mms.ui.ComposeMessageActivity: void dialRecipient()> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
Permission:android.permission.WRITE_SETTINGS
1029 Callers:
<com.android.server.PowerManagerService: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> ()
<android.os.IPowerManager$Stub: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void setStayOnSetting(int)> (1)
<com.android.server.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void updateShortcut(char,android.content.Intent)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (12)
<com.android.browser.SystemAllowGeolocationOrigins: void start()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void <init>(android.content.Context)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.server.AccessibilityManagerService: void registerSettingsContentObservers()> (1)
<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()> (1)
<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init>(com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.SamplingProfilerService: void registerSettingObserver(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.ThrottleService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.WifiService$NotificationEnabledSettingObserver: void register()> (1)
<com.android.server.WifiWatchdogService: void registerForSettingsChanges()> (1)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void <init>(android.content.Context,com.android.internal.policy.impl.PhoneWindowManager,android.os.LocalPowerManager)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.server.AccessibilityManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService)> (1)
<com.android.server.SamplingProfilerService: void <init>(android.content.Context)> (1)
<com.android.server.ThrottleService: void systemReady()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.server.WifiWatchdogService: void <init>(android.content.Context)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.os.LocalPowerManager)> (1)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.server.ServerThread$1: void run()> (1)
<com.android.server.wm.WindowManagerService$PolicyThread: void run()> (2)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean,com.android.server.wm.WindowManagerService$1)> (1)
<com.android.server.wm.WindowManagerService$WMThread: void run()> (2)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main(android.content.Context,com.android.server.PowerManagerService,boolean)> (1)
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> (12)
<android.media.MediaScanner$MyMediaScannerClient: void setSettingIfNotSet(java.lang.String,android.net.Uri,long)> (1)
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> (1)
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> (2)
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> (47)
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)> ()
<com.android.deskclock.AlarmPreference: void onSaveRingtone(android.net.Uri)> (1)
<com.android.deskclock.Alarms: void saveNextAlarm(android.content.Context,java.lang.String)> (2)
<com.android.music.MusicUtils: void setRingtone(android.content.Context,long)> (3)
<com.android.phone.sip.SipSharedPreferences: void setSipCallOption(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.settings.DateTimeSettings: void set24Hour(boolean)> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri endFile(android.media.MediaScanner$FileCacheEntry,boolean,boolean,boolean,boolean,boolean)> (1)
<com.android.settings.DefaultRingtonePreference: void onSaveRingtone(android.net.Uri)> (1)
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)> (2)
<android.media.AudioService$AudioHandler: void persistRingerMode()> (1)
<android.media.AudioService$AudioHandler: void persistVibrateSetting()> (1)
<android.media.AudioService$AudioHandler: void persistVolume(android.media.AudioService$VolumeStreamState,boolean,boolean)> (1)
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> (1)
<com.android.contacts.preference.ContactsPreferences: void setDisplayOrder(int)> (1)
<com.android.contacts.preference.ContactsPreferences: void setSortOrder(int)> (1)
<com.android.deskclock.SettingsActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.development.DevelopmentSettings$5: void onClick(android.view.View)> (1)
<com.android.development.DevelopmentSettings: void writeCompatibilityOptions()> (1)
<com.android.development.DevelopmentSettings: void writePointerLocationOptions()> (1)
<com.android.development.DevelopmentSettings: void writeWindowOrientationListenerLogOptions()> (1)
<com.android.internal.policy.impl.GlobalActions: void changeAirplaneModeSystemSetting(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setUserRotationMode(int,int)> (1)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (2)
<com.android.phone.CallFeaturesSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.EmergencyCallHandler: void onCreate(android.os.Bundle)> (1)
<com.android.phone.sip.SipSharedPreferences: void setReceivingCallsEnabled(boolean)> (1)
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> (1)
<com.android.server.PackageManagerService: boolean setInstallLocation(int)> (2)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeOn(boolean)> (2)
<com.android.settings.ApplicationSettings: void handleUpdateAppInstallLocation(java.lang.String)> (1)
<com.android.settings.BrightnessPreference: void onDialogClosed(boolean)> (1)
<com.android.settings.BrightnessPreference: void setMode(int)> (3)
<com.android.settings.DateTimeSettingsSetupWizard: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onClick(android.view.View)> (1)
<com.android.settings.DevelopmentSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.DisplaySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.DockSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.inputmethod.InputMethodConfig: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.PointerSpeedPreference: void onDialogClosed(boolean)> (1)
<com.android.settings.RingerVolumePreference: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.SoundSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.SoundSettings: void setPhoneVibrateSettingValue(java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void toggleBrightness(android.content.Context)> (1)
<com.android.settings.wifi.WifiSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.spare_parts.SpareParts: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.spare_parts.SpareParts: void writeEndButtonPreference(java.lang.Object)> (1)
<com.android.systemui.statusbar.policy.AirplaneModeController$1: void run()> (1)
<com.android.systemui.statusbar.policy.BrightnessController$1: void run()> (1)
<com.android.systemui.statusbar.policy.BrightnessController: void setMode(int)> (1)
<com.android.deskclock.Alarms: void disableAlert(android.content.Context)> (1)
<com.android.deskclock.Alarms: void enableAlert(android.content.Context,com.android.deskclock.Alarm,long)> (2)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.QueryBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.phone.CallFeaturesSetting: void handleSipCallOptionsChange(java.lang.Object)> (1)
<android.app.ActivityManagerNative: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.settings.DateTimeSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri doScanFile(java.lang.String,java.lang.String,long,long,boolean,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord)> (5)
<com.android.development.DevelopmentSettings: void writeXmppOptions()> (1)
<com.android.contacts.preference.DisplayOrderPreference: boolean persistString(java.lang.String)> (3)
<com.android.contacts.preference.SortOrderPreference: boolean persistString(java.lang.String)> (3)
<com.android.development.DevelopmentSettings: void access$700(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void access$1900(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void access$1700(com.android.development.DevelopmentSettings)> (1)
<com.android.internal.policy.impl.GlobalActions: void access$300(com.android.internal.policy.impl.GlobalActions,boolean)> (2)
<android.view.WindowManagerPolicy: void setUserRotationMode(int,int)> (2)
<com.android.phone.CallFeaturesSetting: void onCreate(android.os.Bundle)> (2)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption(boolean)> (1)
<android.app.ActivityManagerNative: void setAlwaysFinish(boolean)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: boolean setInstallLocation(int)> ()
<android.content.pm.IPackageManager$Stub: boolean setInstallLocation(int)> (2)
<com.android.settings.AirplaneModeEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.AirplaneModeEnabler: void setAirplaneModeInECM(boolean,boolean)> (1)
<com.android.settings.ApplicationSettings$1: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.BrightnessPreference: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.BrightnessPreference: void onRestoreInstanceState(android.os.Parcelable)> (2)
<com.android.settings.BrightnessPreference: void restoreOldState()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.systemui.statusbar.policy.BrightnessController: void onChanged(com.android.systemui.statusbar.policy.ToggleSlider,boolean,boolean,int)> (1)
<com.android.deskclock.Alarms: void setNextAlert(android.content.Context)> (7)
<com.android.deskclock.Alarms: boolean enableSnoozeAlert(android.content.Context)> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<android.media.MediaScanner: android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)> (1)
<android.media.MediaScanner$MyMediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> (1)
<android.media.MediaScanner: void scanMtpFile(java.lang.String,java.lang.String,int,int)> (1)
<com.android.development.DevelopmentSettings: void access$1400(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings$4: void onClick(android.view.View)> (1)
<com.android.development.DevelopmentSettings$9: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.development.DevelopmentSettings$8: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onToggle(boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.WindowManagerService: void freezeRotation()> (2)
<com.android.server.wm.WindowManagerService: void thawRotation()> (2)
<com.android.phone.sip.SipSettings: void access$800(com.android.phone.sip.SipSettings,boolean)> (1)
<android.app.IActivityManager: void setAlwaysFinish(boolean)> (1)
<android.content.pm.IPackageManager: boolean setInstallLocation(int)> (1)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.WirelessSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.BrightnessPreference: android.os.Parcelable onSaveInstanceState()> (2)
<com.android.systemui.statusbar.policy.ToggleSlider$Listener: void onChanged(com.android.systemui.statusbar.policy.ToggleSlider,boolean,boolean,int)> (4)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.deskclock.AlarmReceiver: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.Alarms: long addAlarm(android.content.Context,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.Alarms: long setAlarm(android.content.Context,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.Alarms: void deleteAlarm(android.content.Context,int)> (3)
<com.android.deskclock.Alarms: void enableAlarm(android.content.Context,int,boolean)> (4)
<com.android.deskclock.Alarms: void saveSnoozeAlert(android.content.Context,int,long)> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.AppPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.development.DevelopmentSettings: void writeDebugOptions()> (2)
<com.android.providers.media.MediaScannerService: android.net.Uri scanFile(java.lang.String,java.lang.String)> (1)
<android.media.MediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> ()
<android.mtp.MtpDatabase: void endSendObject(java.lang.String,int,int,boolean)> ()
<com.android.development.DevelopmentSettings$7: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onToggle(boolean)> (1)
<android.view.IWindowManager$Stub$Proxy: void freezeRotation()> ()
<android.view.IWindowManager$Stub: void freezeRotation()> (2)
<android.view.IWindowManager$Stub$Proxy: void thawRotation()> ()
<android.view.IWindowManager$Stub: void thawRotation()> (2)
<com.android.phone.sip.SipSettings$3$1: void run()> (1)
<com.android.development.DevelopmentSettings: void writeFinishOptions()> (1)
<com.android.commands.pm.Pm: void runSetInstallLocation()> (1)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (4)
<com.android.systemui.statusbar.policy.ToggleSlider: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onProgressChanged(android.widget.SeekBar,int,boolean)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onStartTrackingTouch(android.widget.SeekBar)> (1)
<com.android.systemui.statusbar.policy.ToggleSlider: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.deskclock.AlarmReceiver: void access$000(com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.SetAlarm: long saveAlarm()> (3)
<com.android.deskclock.AlarmClock$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm$4: void onClick(android.view.View)> (1)
<com.android.deskclock.SetAlarm$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.AlarmClock: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.deskclock.AlarmClock: void updateAlarm(boolean,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.HandleSetAlarm: boolean handleCursorResult(android.database.Cursor,long,boolean,boolean)> (1)
<com.android.deskclock.AlarmAlertFullScreen: void snooze()> (3)
<com.android.development.DevelopmentSettings: void access$100(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.providers.media.MediaScannerService: android.net.Uri access$100(com.android.providers.media.MediaScannerService,java.lang.String,java.lang.String)> (1)
<com.android.internal.policy.impl.GlobalActions$ToggleAction: void onPress()> (3)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void freezeRotation()> (1)
<android.view.IWindowManager: void thawRotation()> (1)
<com.android.development.DevelopmentSettings: void access$400(com.android.development.DevelopmentSettings)> (1)
<com.android.commands.pm.Pm: void run(java.lang.String[])> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.deskclock.AlarmReceiver$1: void run()> (1)
<com.android.deskclock.SetAlarm: long access$500(com.android.deskclock.SetAlarm)> (2)
<com.android.deskclock.SetAlarm: long saveAlarmAndEnableRevert()> (2)
<com.android.deskclock.SetAlarm: void onBackPressed()> (3)
<com.android.deskclock.AlarmClock: void access$100(com.android.deskclock.AlarmClock,boolean,com.android.deskclock.Alarm)> (1)
<com.android.deskclock.HandleSetAlarm: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.AlarmAlertFullScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (3)
<com.android.deskclock.AlarmAlert: void snooze()> (1)
<com.android.development.DevelopmentSettings$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.GlobalActions$1: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.systemui.statusbar.policy.AutoRotateController$1: void run()> (1)
<com.android.development.DevelopmentSettings$3: void onClick(android.view.View)> (1)
<com.android.commands.pm.Pm: void main(java.lang.String[])> ()
<com.android.deskclock.SetAlarm$3: void onClick(android.view.View)> (1)
<com.android.deskclock.SetAlarm: long access$1000(com.android.deskclock.SetAlarm)> (1)
<com.android.deskclock.SetAlarm: void onTimeSet(android.widget.TimePicker,int,int)> (1)
<com.android.deskclock.AlarmClock$AlarmTimeAdapter$1: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.deskclock.AlarmAlertFullScreen$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmAlertFullScreen$2: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmAlert: void access$000(com.android.deskclock.AlarmAlertFullScreen)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.deskclock.SetAlarm$6: void run()> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void clearShortcut(char)> (1)
<com.android.settings.quicklaunch.QuickLaunchSettings: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (16)
<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar,android.net.Uri)> (1)
<android.widget.DateTimeView: void registerReceivers()> (1)
<com.android.contacts.preference.ContactsPreferences: void registerChangeListener(com.android.contacts.preference.ContactsPreferences$ChangeListener)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.providers.media.MtpService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.NetworkTimeUpdateService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe()> (1)
<com.android.server.wm.InputManager: void registerPointerSpeedSettingObserver()> (1)
<com.android.settings.AirplaneModeEnabler: void resume()> (1)
<com.android.settings.BrightnessPreference: void showDialog(android.os.Bundle)> (2)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.PointerSpeedPreference: void showDialog(android.os.Bundle)> (2)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (2)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<com.android.contacts.list.ContactEntryListFragment: void onStart()> (8)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMALTEPhone)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void initSstIcc()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.providers.media.MtpService: void onCreate()> (1)
<com.android.server.NetworkTimeUpdateService: void systemReady()> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.wm.InputManager: void start()> (1)
<com.android.settings.WirelessSettings: void onResume()> (3)
<android.preference.SeekBarPreference: void showDialog(android.os.Bundle)> (3)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (2)
<com.android.settings.RingerVolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void onStart()> (2)
<com.android.contacts.list.ContactPickerFragment: void onStart()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onStart()> (2)
<com.android.contacts.list.JoinContactListFragment: void onStart()> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onStart()> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onStart()> (2)
<com.android.contacts.list.StrequentContactListFragment: void onStart()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void initSstIcc()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> (26)
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> (2)
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> ()
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)> (55)
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)> (1)
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> (3)
<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String)> (1)
<com.android.server.AccessibilityManagerService$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)> (2)
<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)> (3)
<com.android.server.DevicePolicyManagerService: void saveGlobalProxy(java.lang.String,java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putEnabledInputMethodsStr(java.lang.String)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedInputMethod(java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSubtypeHistoryStr(java.lang.String)> (1)
<com.android.server.RecognitionManagerService: void setCurRecognizer(android.content.ComponentName)> (2)
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize()> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int)> (2)
<com.android.settings.AccessibilitySettings: void persistEnabledAccessibilityServices()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void saveInputMethodSubtypeList(com.android.settings.SettingsPreferenceFragment,android.content.ContentResolver,java.util.List,boolean)> (3)
<com.android.settings.OwnerInfoSettings: void saveToDb()> (1)
<com.android.settings.TextToSpeechSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.TextToSpeechSettings: void initDefaultSettings()> (1)
<com.android.settings.TextToSpeechSettings: void loadEngines()> (3)
<com.android.settings.TextToSpeechSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.TextToSpeechSettings: void useCurrentLocAsDefault()> (1)
<com.android.settings.TextToSpeechSettings: void useSupportedLocAsDefault()> (1)
<com.android.settings.VoiceInputOutputSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<android.net.wifi.WifiStateMachine: void setCountryCode()> (1)
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> (2)
<android.server.BluetoothA2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (7)
<android.server.BluetoothInputProfileHandler: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (4)
<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)> (5)
<com.android.phone.BluetoothHeadsetService$6: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.phone.CallFeaturesSetting: void handleTTYChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.CdmaSubscriptionListPreference$CdmaSubscriptionButtonHandler: void handleSetCdmaSubscriptionMode(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleQueryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleSetCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void resetCdmaRoamingModeToDefault()> (1)
<com.android.phone.CdmaSystemSelectListPreference: void onDialogClosed(boolean)> (2)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleGetVPResponse(android.os.Message)> (1)
<com.android.phone.CellBroadcastSms: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.Settings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.Settings$MyHandler: void handleGetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void resetNetworkModeToDefault()> (1)
<com.android.provision.DefaultActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.BackupManagerService: void setAutoRestore(boolean)> (2)
<com.android.server.BackupManagerService: void setBackupEnabled(boolean)> (3)
<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)> (2)
<com.android.server.ConnectivityService: void handleSetBackgroundData(boolean)> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void putSelectedSubtype(int)> (1)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.WifiService: boolean testAndClearWifiSavedState()> (2)
<com.android.server.WifiService: int getPersistedWifiState()> (1)
<com.android.server.WifiService: void persistWifiEnabled(boolean)> (2)
<com.android.settings.AccessibilitySettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.AccessibilitySettings$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.AccessibilitySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.AccessibilitySettings: void handleEnableAccessibilityStateChange(android.preference.CheckBoxPreference)> (1)
<com.android.settings.AccessibilitySettings: void handleToggleAccessibilityScriptInjection(android.preference.CheckBoxPreference)> (1)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void setNonMarketAppsAllowed(boolean)> (2)
<com.android.settings.DevelopmentSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void saveInputMethodSelectorVisibility(java.lang.String)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeUtil: void putSelectedInputMethodSubtype(android.content.ContentResolver,int)> (1)
<com.android.settings.OwnerInfoSettings$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.settings.SecuritySettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiApEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.wifi.WifiSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)> (6)
<com.android.providers.settings.SettingsHelper: void setGpsLocation(java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> (3)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (7)
<android.app.backup.IBackupManager$Stub$Proxy: java.lang.String selectBackupTransport(java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: java.lang.String selectBackupTransport(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> ()
<android.net.IConnectivityManager$Stub: void setGlobalProxy(android.net.ProxyProperties)> (2)
<com.android.server.ConnectivityService: void handleDeprecatedGlobalHttpProxy()> (1)
<com.android.server.DevicePolicyManagerService: void resetGlobalProxy()> (2)
<com.android.server.InputMethodManagerService$InputMethodSettings: boolean buildAndPutEnabledInputMethodsStrRemovingIdLocked(java.lang.StringBuilder,java.util.List,java.lang.String)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void appendAndPutEnabledInputMethodLocked(java.lang.String,boolean)> (1)
<com.android.server.InputMethodManagerService$InputMethodSettings: void enableAllIMEsIfThereIsNoEnabledIME()> (1)
<com.android.server.InputMethodManagerService: void setSelectedInputMethodAndSubtypeLocked(android.view.inputmethod.InputMethodInfo,int,boolean)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void saveSubtypeHistory(java.util.List,java.lang.String,java.lang.String)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService: void systemReady()> (1)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize()> ()
<android.view.IWindowManager$Stub: void clearForcedDisplaySize()> (2)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplaySize(int,int)> (2)
<com.android.settings.AccessibilitySettings: void access$400(com.android.settings.AccessibilitySettings)> (1)
<com.android.settings.AccessibilitySettings: void handleEnableAccessibilityServiceStateChange(android.preference.CheckBoxPreference)> (1)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void setSubtypeAutoSelectionEnabled(java.lang.String,boolean)> (2)
<com.android.settings.inputmethod.InputMethodConfig: void onPause()> (3)
<com.android.settings.OwnerInfoSettings: void onPause()> (1)
<com.android.settings.TextToSpeechSettings: void onInit(int)> (1)
<com.android.settings.TextToSpeechSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TextToSpeechSettings: void access$000(com.android.settings.TextToSpeechSettings)> (1)
<com.android.settings.TextToSpeechSettings: void initDefaultLang()> (1)
<android.net.wifi.WifiStateMachine: void access$5900(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.WifiStateMachine: void setFrequencyBand()> (1)
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothDeviceProfileState: boolean processCommand(int)> (9)
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void adjustOtherSinkPriorities(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<android.server.BluetoothInputProfileHandler: void handleInputDeviceStateChange(android.bluetooth.BluetoothDevice,int)> (3)
<android.server.BluetoothInputProfileHandler: void setInitialInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.server.BluetoothService: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setDataRoamingEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setDataOnRoamingEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setDataRoamingEnabled(boolean)> ()
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)> (4)
<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)> (4)
<com.android.internal.widget.LockPatternUtils: void setPermanentlyLocked(boolean)> (2)
<com.android.internal.widget.LockPatternUtils: void setTactileFeedbackEnabled(boolean)> (2)
<com.android.internal.widget.LockPatternUtils: void setVisiblePatternEnabled(boolean)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (3)
<android.app.backup.IBackupManager$Stub$Proxy: void setAutoRestore(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setAutoRestore(boolean)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupEnabled(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setBackupEnabled(boolean)> (2)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void setBackupProvisioned(boolean)> ()
<android.app.backup.IBackupManager$Stub: void setBackupProvisioned(boolean)> (2)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,boolean)> (1)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.WifiService: boolean access$1000(com.android.server.WifiService)> (1)
<com.android.server.WifiService: void checkAndStartWifi()> (1)
<com.android.server.WifiService: void access$1200(com.android.server.WifiService,boolean)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (30)
<com.android.settings.ApplicationSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ApplicationSettings: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt()> (1)
<com.android.internal.widget.LockPatternUtils: long setLockoutAttemptDeadline()> (3)
<com.android.internal.widget.LockPatternUtils: void clearLock()> (2)
<com.android.internal.widget.LockPatternUtils: void setLockScreenDisabled(boolean)> (1)
<com.android.providers.settings.SettingsHelper: boolean restoreValue(java.lang.String,java.lang.String)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void handleNext()> (2)
<android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (10)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.LocationManagerService$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.usb.UsbDeviceSettingsManager$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.app.backup.IBackupManager: java.lang.String selectBackupTransport(java.lang.String)> (1)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void access$1400(com.android.server.ConnectivityService)> (2)
<com.android.server.DevicePolicyManagerService: void access$200(com.android.server.DevicePolicyManagerService)> (1)
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> (3)
<com.android.server.InputMethodManagerService: void resetSelectedInputMethodAndSubtypeLocked(java.lang.String)> (3)
<com.android.server.InputMethodManagerService$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)> (1)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (3)
<android.view.IWindowManager: void clearForcedDisplaySize()> (1)
<android.view.IWindowManager: void setForcedDisplaySize(int,int)> (1)
<com.android.settings.AccessibilitySettings$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (18)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void updateAutoSelectionCB()> (2)
<com.android.settings.TextToSpeechSettings$3: void onClick(android.content.DialogInterface,int)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void setCountryCode(java.lang.String,boolean)> (1)
<android.net.wifi.WifiStateMachine: void access$6000(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setFrequencyBand(int,boolean)> (2)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void enter()> (1)
<android.bluetooth.IBluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$300(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothInputProfileHandler: boolean connectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothInputProfileHandler: boolean disconnectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothInputProfileHandler: void handleInputDevicePropertyChange(java.lang.String,boolean)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setDataRoamingEnabled(boolean)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.providers.settings.DatabaseHelper: void upgradeLockPatternLocation(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.settings.ChooseLockPattern$ChooseLockPatternFragment: void saveChosenPatternAndFinish()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void reportFailedUnlockAttempt()> (1)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService: void setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<android.app.backup.IBackupManager: void setAutoRestore(boolean)> (2)
<android.app.backup.IBackupManager: void setBackupEnabled(boolean)> (2)
<android.app.backup.IBackupManager: void setBackupProvisioned(boolean)> ()
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<com.android.server.WifiService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (5)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.settings.ConfirmLockPattern$ConfirmLockPatternFragment$2: void onPatternDetected(java.util.List)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void updateUnlockMethodAndFinish(int,boolean)> (2)
<com.android.providers.settings.SettingsBackupAgent: void restoreSettings(android.app.backup.BackupDataInput,android.net.Uri)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void onClick(android.view.View)> (1)
<android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.providers.applications.ApplicationsProvider$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.AccessibilityManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbDeviceSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.commands.bmgr.Bmgr: void doTransport()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.DevicePolicyManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap)> (2)
<com.android.server.InputMethodManagerService: boolean chooseNewDefaultIMELocked()> (4)
<com.android.server.InputMethodManagerService: void access$000(com.android.server.InputMethodManagerService,java.lang.String)> (2)
<com.android.server.InputMethodManagerService: void saveCurrentInputMethodAndSubtypeToHistory()> (1)
<com.android.server.LocationManagerService$2: void onSomePackagesChanged()> (1)
<com.android.server.usb.UsbDeviceSettingsManager$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.commands.am.Am: void runDisplaySize()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (5)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DockSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.TextToSpeechSettings: void onPause()> (3)
<com.android.settings.vpn.VpnSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<com.android.internal.util.State: void enter()> (13)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> (2)
<android.net.wifi.IWifiManager: void setFrequencyBand(int,boolean)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean isConnectSinkFeasible(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothService: boolean connectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disconnectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: void handleInputDevicePropertyChange(java.lang.String,boolean)> (2)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.bluetooth.IBluetooth: boolean setInputDevicePriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.providers.settings.DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.settings.ChooseLockPattern$ChooseLockPatternFragment: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void reportFailedUnlockAttempt()> (3)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (4)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHeadsetService: void access$1400(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.phone.BluetoothHeadsetService: void adjustOtherHeadsetPriorities(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void adjustPriorities()> (1)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void setState(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.providers.settings.SettingsHelper: void setAutoRestore(boolean)> (1)
<com.android.settings.PrivacySettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.commands.bmgr.Bmgr: void doEnable()> (1)
<com.android.settings.PrivacySettings: void setBackupEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.internal.widget.LockPatternUtils: boolean checkPasswordHistory(java.lang.String)> (2)
<com.android.internal.widget.LockPatternUtils: boolean checkPassword(java.lang.String)> (2)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void updatePreferencesOrFinish()> (2)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.settings.ProxySelector: boolean saveToDb()> (1)
<com.android.server.InputMethodManagerService: boolean access$100(com.android.server.InputMethodManagerService)> (2)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked()> (4)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.commands.am.Am: void run(java.lang.String[])> (1)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.settings.bluetooth.BluetoothFindNearby: void onPause()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.internal.telephony.MccTable: void setWifiCountryCodeFromMcc(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.server.BluetoothA2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothEventLoop: void onInputDeviceConnectionResult(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onInputDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService: void access$1000(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.phone.BluetoothHeadsetService: void access$1600(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (6)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.settings.PrivacySettings: void onClick(android.content.DialogInterface,int)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: java.lang.String validatePassword(java.lang.String)> (2)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: void handleNext()> (2)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.settings.ProxySelector$1: void onClick(android.view.View)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange(boolean)> (1)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<com.android.settings.wifi.AdvancedSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<com.android.settings.bluetooth.HidProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<android.app.admin.IDevicePolicyManager$Stub$Proxy: boolean resetPassword(java.lang.String,int)> ()
<android.app.admin.IDevicePolicyManager$Stub: boolean resetPassword(java.lang.String,int)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void updateUi()> (2)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.settings.ConfirmLockPassword$ConfirmLockPasswordFragment: void onClick(android.view.View)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (25)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<android.app.admin.IDevicePolicyManager: boolean resetPassword(java.lang.String,int)> (1)
<android.app.admin.IDevicePolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void afterTextChanged(android.text.Editable)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void updateStage(com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment$Stage)> (4)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.util.StateMachine: void start()> (13)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.app.admin.DevicePolicyManager: boolean resetPassword(java.lang.String,int)> ()
<com.android.server.DevicePolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment$1: void run()> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.ChooseLockPassword$ChooseLockPasswordFragment: void onResume()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.phone.SipCallOptionHandler: void access$200(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.READ_CALENDAR
372 Callers:
<com.android.providers.calendar.CalendarProvider2: void updateEventAttendeeStatus(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)> (2)
<com.android.providers.calendar.CalendarProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (5)
<android.content.CursorEntityIterator: java.lang.Object next()> (6)
<android.provider.Calendar$CalendarsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.Calendar$CalendarsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.Calendar$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$500(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$2: void run()> (1)
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> ()
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.calendar.CalendarController: void refreshCalendars()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String,java.lang.String)> (1)
<com.android.calendar.Event: void loadEvents(android.content.Context,java.util.ArrayList,long,int,int,java.util.concurrent.atomic.AtomicInteger)> (1)
<com.android.calendar.EventLoader$LoadEventsRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoadRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoaderThread: void run()> (2)
<com.android.calendar.EventLoader: void startBackgroundThread()> (1)
<com.android.calendar.DayFragment: void onResume()> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.ExchangeService: void deleteAccountPIMData(long)> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (3)
<com.android.exchange.ExchangeService$2: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(long)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$12: void run()> (1)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void onResume()> (1)
<android.provider.Calendar$Calendars: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Calendar$Events: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.util.List doInBackground(java.lang.Void[])> (1)
<com.android.providers.calendar.CalendarDebug$FetchInfoTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations: void updatedExtendedProperty(java.lang.String,java.lang.String,long)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncAdapter$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$100(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<com.android.providers.calendar.CalendarProvider2: java.lang.String getOwner(long)> (1)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.calendar.DayView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.event.EditEventFragment: void startQuery()> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<android.util.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (3)
<android.util.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (1)
<android.util.CalendarUtils$TimeZoneUtils: void forceDBRequery(android.content.Context,java.lang.Runnable)> ()
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (31)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (11)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaFragment$1: void run()> (1)
<com.android.calendar.agenda.AgendaFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.agenda.AgendaListView$1: void run()> (1)
<com.android.calendar.agenda.AgendaListView: void <init>(android.content.Context,long,boolean)> (2)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void <init>(android.content.Context,com.android.calendar.agenda.AgendaListView,boolean)> (2)
<com.android.calendar.alerts.AlertAdapter: void updateView(android.content.Context,android.view.View,java.lang.String,java.lang.String,long,long,boolean)> (1)
<com.android.calendar.alerts.AlertReceiver: android.app.Notification makeNewAlertNotification(android.content.Context,java.lang.String,java.lang.String,int,boolean,long,boolean)> (1)
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void updateHomeClock()> (3)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context)> (2)
<com.android.calendar.DayFragment$1: void run()> (1)
<com.android.calendar.DayView$1: void run()> (1)
<com.android.calendar.DayView: void init(android.content.Context)> (1)
<com.android.calendar.DayView: void reloadEvents()> (4)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable)> (1)
<com.android.calendar.event.EditEventView: void updateHomeTime()> (4)
<com.android.calendar.EventInfoFragment: void updateEvent(android.view.View)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekAdapter: void init()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void refresh()> (2)
<com.android.calendar.month.MonthByWeekFragment$1: void run()> (1)
<com.android.calendar.month.MonthWeekEventsView: int drawEvent(android.graphics.Canvas,com.android.calendar.Event,int,int,int,boolean)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: void buildFromCursor(android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.AllInOneActivity: void setTitleInActionBar(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: void appendEventAccessibilityString(java.lang.StringBuilder,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void updateEventDetails()> (1)
<com.android.calendar.Utils: java.lang.String formatMonthYear(android.content.Context,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$EventInfo populateEventInfo(long,boolean,long,long,int,int,java.lang.String,java.lang.String,int)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaListView: void <init>(android.content.Context,long)> ()
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: void <init>(android.content.Context,com.android.calendar.agenda.AgendaListView)> ()
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertService: void postNotification(android.content.Context,android.content.SharedPreferences,java.lang.String,java.lang.String,int,boolean,boolean,long,boolean)> (1)
<com.android.calendar.AllInOneActivity: void access$400(com.android.calendar.AllInOneActivity)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context,android.content.Intent)> ()
<com.android.calendar.event.EditEventFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.DayView: void <init>(android.content.Context,com.android.calendar.CalendarController,android.widget.ViewSwitcher,com.android.calendar.EventLoader,int)> (1)
<com.android.calendar.DayFragment: void eventsChanged()> (3)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.DayView: boolean initNextView(int)> (1)
<com.android.calendar.event.EditEventView: void access$400(com.android.calendar.event.EditEventView)> (2)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setAllDayViewsVisibility(boolean)> (1)
<com.android.calendar.event.EditEventView: void setModification(int)> (4)
<com.android.calendar.EventInfoFragment: void access$100(com.android.calendar.EventInfoFragment,android.view.View)> (2)
<com.android.calendar.month.SimpleWeeksAdapter: void init()> (2)
<com.android.calendar.month.MonthByWeekAdapter: void setEvents(int,int,java.util.ArrayList)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void refresh()> (2)
<com.android.calendar.month.MonthWeekEventsView: void drawEvents(android.graphics.Canvas)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: com.android.calendar.widget.CalendarAppWidgetModel buildAppWidgetModel(android.content.Context,android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.DayView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time)> (4)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: int processNewCursor(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec,android.database.Cursor)> (1)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.calendar.AllInOneActivity$2: void run()> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayFragment: android.view.View makeView()> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView: void doScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventView$DateListener: void onDateSet(android.widget.DatePicker,int,int,int)> (1)
<com.android.calendar.event.EditEventView$TimeListener: void onTimeSet(android.widget.TimePicker,int,int)> (1)
<com.android.calendar.event.EditEventView$3: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.event.EditEventFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.EventInfoFragment$1: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void <init>(android.content.Context,java.util.HashMap)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void updateParams(java.util.HashMap)> (4)
<com.android.calendar.month.MonthWeekEventsView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.DayView: void access$3400(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView: void access$3300(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment: void access$400(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void <init>(android.content.Context,java.util.HashMap)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setUpAdapter()> (2)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void updateParams(java.util.HashMap)> (1)
<com.android.calendar.month.MonthByWeekFragment: void setUpAdapter()> (1)
<com.android.calendar.month.SimpleWeekView: void onDraw(android.graphics.Canvas)> (1)
<com.android.calendar.month.MonthByWeekFragment: void goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (6)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithResponse(java.lang.Object,long,long,long,long,int,int,long,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (4)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (11)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (9)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onAttach(android.app.Activity)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.DayView: void access$3000(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.EventInfoFragment: void doEdit()> (1)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$3: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2000(com.android.calendar.EventInfoFragment)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.EventInfoFragment$5: void onClick(android.view.View)> (1)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.alerts.AlertActivity: void onResume()> (1)
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int)> (5)
<com.android.calendar.agenda.AgendaListView: void deleteSelectedEvent()> ()
<com.android.calendar.CalendarController: void launchDeleteEventAndFinish(android.app.Activity,long,long,long,int)> (1)
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int,java.lang.Runnable)> (1)
<com.android.calendar.SearchActivity: void deleteEvent(long,long,long)> (1)
<com.android.calendar.CalendarController: void launchDeleteEvent(long,long,long)> (1)
<com.android.calendar.EventInfoFragment$2: void onClick(android.view.View)> (1)
<com.android.calendar.SearchActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.EmailContent$Account,java.lang.String)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.EmailContent$Account)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1900(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1100(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,java.lang.String,boolean)> (2)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,java.lang.String,boolean)> (4)
<com.android.calendar.agenda.AgendaFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.exchange.ExchangeService$CalendarObserver: void <init>(com.android.exchange.ExchangeService,android.os.Handler,com.android.emailcommon.provider.EmailContent$Account)> (1)
<com.android.exchange.ExchangeService: void registerCalendarObserver(com.android.emailcommon.provider.EmailContent$Account)> (1)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<android.provider.Calendar$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteQueryBuilder,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.providers.calendar.CalendarProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (7)
<com.android.providers.calendar.CalendarProvider2: boolean fixAllDayTime(android.net.Uri,android.content.ContentValues)> (2)
<com.android.providers.calendar.CalendarProvider2: int deleteFromTable(java.lang.String,android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: int updateInTable(java.lang.String,android.content.ContentValues,android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.calendar.CalendarProvider2: void modifyCalendarSubscription(long,boolean)> (2)
<com.android.providers.calendar.CalendarProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: int deleteMatchingCalendars(java.lang.String,java.lang.String[])> (1)
<com.android.calendar.EventInfoFragment: void updateCalendar(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$500(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<android.provider.Calendar$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int)> (1)
<com.android.calendar.EventLoader$LoadEventDaysRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<android.provider.Calendar$CalendarAlerts: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (4)
<android.provider.Calendar$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> (1)
<android.provider.Calendar$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> (1)
<android.provider.Calendar$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> (2)
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.providers.calendar.CalendarAlarmManager: void rescheduleMissedAlarms(android.content.ContentResolver)> (1)
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)> (1)
<com.android.providers.calendar.CalendarProvider2: void rescheduleMissedAlarms()> (2)
<com.android.providers.calendar.CalendarProvider2: void doUpdateTimezoneDependentFields()> (2)
<com.android.providers.calendar.CalendarProvider2: void regenerateInstancesTable()> (2)
<com.android.providers.calendar.CalendarProvider2: void doProcessEventRawTimes(java.lang.String,java.lang.String)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void eventsChanged()> (2)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> (1)
<com.android.calendar.DeleteEventHelper: void access$800(com.android.calendar.DeleteEventHelper)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EventInfoFragment: void addAttendee(android.content.ContentValues,java.util.ArrayList,int,com.android.calendar.EventInfoFragment$Attendee,int)> (1)
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,long,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveResponse()> (1)
<com.android.calendar.EventInfoFragment: void onDestroyView()> (2)
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long)> (1)
<com.android.calendar.alerts.AlertActivity: void access$500(com.android.calendar.alerts.AlertActivity,long)> (1)
<com.android.calendar.alerts.AlertActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$1000(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void toggleVisibility(int)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (1)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean)> (1)
<com.android.calendar.alerts.AlertActivity: void onClick(android.view.View)> (1)
<android.util.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.event.EditEventFragment: void saveReminders()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void wipe()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void wipe()> (1)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])> (1)
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)> ()
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.alerts.DismissAllAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.PROCESS_OUTGOING_CALLS
1 Callers:
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.CHANGE_CONFIGURATION
79 Callers:
<com.android.server.am.ActivityStack: int startActivityMayWait(android.app.IApplicationThread,int,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.app.IActivityManager$WaitResult,android.content.res.Configuration)> (4)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (9)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)> (1)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (7)
<com.android.providers.settings.SettingsHelper: void setLocaleData(byte[])> (1)
<com.android.server.UiModeManagerService: void updateConfigurationLocked(boolean)> (2)
<com.android.server.wm.WindowManagerService: void sendNewConfiguration()> (11)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.settings.Display: void onClick(android.view.View)> (1)
<com.android.spare_parts.SpareParts: void writeFontSizePreference(java.lang.Object)> (1)
<com.android.settings.LocalePicker: void updateLocale(java.util.Locale)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setLocaleFromCsim()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.MccTable: void setLocaleFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.LocalePicker: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.app.LocalePicker$LocaleSelectionListener: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onRecordLoaded()> (3)
<com.android.internal.telephony.gsm.SIMRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.app.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.IccRecords: void onRecordLoaded()> ()
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.settings.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.phone.SipCallOptionHandler: void access$200(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
Permission:android.permission.GET_PACKAGE_SIZE
7 Callers:
<com.android.server.PackageManagerService: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> ()
<android.content.pm.IPackageManager$Stub: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (1)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)> (1)
Permission:android.permission.RECEIVE_SMS
181 Callers:
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf()> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getAllMessagesFromIcc()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.AUTHENTICATE_ACCOUNTS
47 Callers:
<android.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)> (7)
<android.accounts.AccountManagerService: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (3)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.email.service.EasAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.PopImapAuthenticatorService$PopImapAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
Permission:android.permission.SET_ALWAYS_FINISH
8 Callers:
<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)> (1)
<android.app.ActivityManagerNative: void setAlwaysFinish(boolean)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setAlwaysFinish(boolean)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.DevelopmentSettings: void writeFinishOptions()> (1)
<com.android.development.DevelopmentSettings: void access$400(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings$3: void onClick(android.view.View)> (1)
Permission:android.permission.DISABLE_KEYGUARD
17 Callers:
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> ()
<android.view.IWindowManager$Stub: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void disableKeyguard(android.os.IBinder,java.lang.String)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> ()
<android.view.IWindowManager$Stub: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager: void reenableKeyguard(android.os.IBinder)> (1)
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
Permission:android.permission.CLEAR_APP_CACHE
17 Callers:
<com.android.server.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<android.content.pm.IPackageManager$Stub: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<com.android.server.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (1)
<com.android.server.DeviceStorageMonitorService: void clearCache()> (1)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.PackageManagerService: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> ()
<android.content.pm.IPackageManager$Stub: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
<android.app.ApplicationPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
Permission:android.permission.ACCESS_NETWORK_STATE
1694 Callers:
<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listInterfaces()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listInterfaces()> (2)
<android.os.INetworkManagementService: java.lang.String[] listInterfaces()> (3)
<android.os.INetworkManagementService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothPanProfileHandler: java.lang.String enableTethering(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: boolean configureUsbIface(boolean)> (1)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<com.android.server.NetworkManagementService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.server.BluetoothPanProfileHandler: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int)> (3)
<com.android.server.connectivity.Tethering: boolean access$600(com.android.server.connectivity.Tethering,boolean)> (4)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.server.BluetoothPanProfileHandler: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,int,int)> (3)
<android.server.BluetoothService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,int,int)> (3)
<android.server.BluetoothService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastError(int)> (3)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<android.server.BluetoothPanProfileHandler: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanServerDevices()> (1)
<android.server.BluetoothEventLoop: void onNetworkDeviceDisconnected(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onPanDeviceConnectionResult(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onPanDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onNetworkDeviceConnected(java.lang.String,java.lang.String,int)> ()
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.internal.util.State: void enter()> (13)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1000(com.android.server.connectivity.Tethering$TetherInterfaceSM,int)> (5)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastErrorAndTransitionToInitialState(int)> (2)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothPanProfileHandler: void setBluetoothTethering(boolean)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: void disconnectDevices()> (1)
<android.server.BluetoothService: void setBluetoothTethering(boolean)> (2)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<android.bluetooth.IBluetooth: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disable(boolean)> (6)
<android.bluetooth.IBluetooth$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetooth$Stub: void setBluetoothTethering(boolean)> (2)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean disable(boolean)> (2)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean disable()> ()
<android.server.BluetoothService: void restart()> (2)
<android.server.BluetoothService: void updateBluetoothState(java.lang.String)> (1)
<android.bluetooth.IBluetooth: void setBluetoothTethering(boolean)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disable(boolean)> (2)
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothAdapter: boolean disable()> (3)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<com.android.server.ServerThread: void run()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$100(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.internal.util.State: void exit()> (62)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean getIpForwardingEnabled()> ()
<android.os.INetworkManagementService$Stub: boolean getIpForwardingEnabled()> (2)
<android.os.INetworkManagementService: boolean getIpForwardingEnabled()> ()
<com.android.server.NetworkManagementService: boolean isTetheringStarted()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean isTetheringStarted()> ()
<android.os.INetworkManagementService$Stub: boolean isTetheringStarted()> (2)
<android.os.INetworkManagementService: boolean isTetheringStarted()> ()
<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTetheredInterfaces()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listTetheredInterfaces()> (2)
<android.os.INetworkManagementService: java.lang.String[] listTetheredInterfaces()> ()
<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] getDnsForwarders()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] getDnsForwarders()> (2)
<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()> ()
<com.android.server.NetworkManagementService: java.lang.String[] listTtys()> (2)
<android.os.INetworkManagementService$Stub$Proxy: java.lang.String[] listTtys()> ()
<android.os.INetworkManagementService$Stub: java.lang.String[] listTtys()> (2)
<android.os.INetworkManagementService: java.lang.String[] listTtys()> ()
<com.android.server.NetworkManagementService: boolean isUsbRNDISStarted()> (2)
<android.os.INetworkManagementService$Stub$Proxy: boolean isUsbRNDISStarted()> ()
<android.os.INetworkManagementService$Stub: boolean isUsbRNDISStarted()> (2)
<android.os.INetworkManagementService: boolean isUsbRNDISStarted()> (1)
<com.android.server.connectivity.Tethering: boolean enableUsbRndis(boolean)> (1)
<com.android.server.connectivity.Tethering: boolean access$2200(com.android.server.connectivity.Tethering,boolean)> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.NetworkManagementService: long getInterfaceCounter(java.lang.String,boolean)> (2)
<com.android.server.NetworkManagementService: long getInterfaceRxCounter(java.lang.String)> (2)
<com.android.server.NetworkManagementService: long getInterfaceTxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: long getInterfaceRxCounter(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: long getInterfaceRxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: long getInterfaceTxCounter(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: long getInterfaceTxCounter(java.lang.String)> (2)
<android.os.INetworkManagementService: long getInterfaceRxCounter(java.lang.String)> (1)
<android.os.INetworkManagementService: long getInterfaceTxCounter(java.lang.String)> (1)
<com.android.server.ThrottleService$MyHandler: void onPollAlarm()> (3)
<com.android.server.ThrottleService$MyHandler: void onPolicyChanged()> (1)
<com.android.server.ThrottleService$MyHandler: void onResetAlarm()> (2)
<com.android.server.NetworkManagementService: int getInterfaceThrottle(java.lang.String,boolean)> (2)
<com.android.server.NetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> (2)
<com.android.server.NetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceRxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: int getInterfaceRxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService$Stub$Proxy: int getInterfaceTxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService$Stub: int getInterfaceTxThrottle(java.lang.String)> (2)
<android.os.INetworkManagementService: int getInterfaceRxThrottle(java.lang.String)> ()
<android.os.INetworkManagementService: int getInterfaceTxThrottle(java.lang.String)> ()
<com.android.server.ThrottleService: void enforceAccessPermission()> (7)
<com.android.server.ThrottleService: int getCliffLevel(java.lang.String,int)> (2)
<com.android.server.ThrottleService: int getThrottle(java.lang.String)> (2)
<com.android.server.ThrottleService: java.lang.String getHelpUri()> (2)
<com.android.server.ThrottleService: long getByteCount(java.lang.String,int,int,int)> (2)
<com.android.server.ThrottleService: long getCliffThreshold(java.lang.String,int)> (2)
<com.android.server.ThrottleService: long getPeriodStartTime(java.lang.String)> (3)
<com.android.server.ThrottleService: long getResetTime(java.lang.String)> (4)
<android.net.IThrottleManager$Stub$Proxy: int getCliffLevel(java.lang.String,int)> ()
<android.net.IThrottleManager$Stub: int getCliffLevel(java.lang.String,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: int getThrottle(java.lang.String)> ()
<android.net.IThrottleManager$Stub: int getThrottle(java.lang.String)> (2)
<android.net.IThrottleManager$Stub$Proxy: java.lang.String getHelpUri()> ()
<android.net.IThrottleManager$Stub: java.lang.String getHelpUri()> (2)
<android.net.IThrottleManager$Stub$Proxy: long getByteCount(java.lang.String,int,int,int)> ()
<android.net.IThrottleManager$Stub: long getByteCount(java.lang.String,int,int,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getCliffThreshold(java.lang.String,int)> ()
<android.net.IThrottleManager$Stub: long getCliffThreshold(java.lang.String,int)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getPeriodStartTime(java.lang.String)> ()
<android.net.IThrottleManager$Stub: long getPeriodStartTime(java.lang.String)> (2)
<android.net.IThrottleManager$Stub$Proxy: long getResetTime(java.lang.String)> ()
<android.net.IThrottleManager$Stub: long getResetTime(java.lang.String)> (2)
<com.android.server.ThrottleService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.net.IThrottleManager: int getCliffLevel(java.lang.String,int)> (1)
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IThrottleManager: int getThrottle(java.lang.String)> ()
<android.net.IThrottleManager: java.lang.String getHelpUri()> (1)
<android.net.IThrottleManager: long getByteCount(java.lang.String,int,int,int)> (1)
<android.net.IThrottleManager: long getCliffThreshold(java.lang.String,int)> (1)
<android.net.IThrottleManager: long getPeriodStartTime(java.lang.String)> (1)
<android.net.IThrottleManager: long getResetTime(java.lang.String)> (1)
<android.net.ThrottleManager: int getCliffLevel(java.lang.String,int)> (1)
<com.android.server.ThrottleService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ThrottleManager: java.lang.String getHelpUri()> (1)
<android.net.ThrottleManager: long getByteCount(java.lang.String,int,int,int)> ()
<android.net.ThrottleManager: long getCliffThreshold(java.lang.String,int)> (1)
<android.net.ThrottleManager: long getPeriodStartTime(java.lang.String)> ()
<android.net.ThrottleManager: long getResetTime(java.lang.String)> ()
<com.android.phone.DataUsageListener: void updatePolicy()> (2)
<com.android.phone.DataUsage: void onCreate(android.os.Bundle)> (2)
<com.android.phone.DataUsageListener: void access$100(com.android.phone.DataUsageListener)> (1)
<com.android.phone.DataUsageListener: void resume()> (2)
<com.android.phone.DataUsageListener$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.DataUsage: void onResume()> (3)
<com.android.phone.Settings: void onResume()> (3)
<com.android.server.ConnectivityService: void enforceAccessPermission()> (5)
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> (3)
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> (2)
<com.android.server.ConnectivityService: int getNetworkPreference()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getLinkProperties(int)> (2)
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getNetworkInfo(int)> (2)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> (3)
<android.net.IConnectivityManager$Stub$Proxy: boolean getMobileDataEnabled()> ()
<android.net.IConnectivityManager$Stub: boolean getMobileDataEnabled()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> ()
<android.net.IConnectivityManager$Stub: int getNetworkPreference()> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getActiveLinkProperties()> (2)
<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: boolean getMobileDataEnabled()> (1)
<android.net.IConnectivityManager: int getNetworkPreference()> (1)
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (3)
<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.server.ConnectivityService: void access$200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> (1)
<android.net.ConnectivityManager: int getNetworkPreference()> ()
<com.android.server.WifiWatchdogService: java.net.InetAddress getDns()> (2)
<com.android.settings.Utils: java.lang.String getWifiIpAddresses(android.content.Context)> (2)
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> ()
<com.android.mms.transaction.RetryScheduler: boolean isConnected()> (1)
<com.android.mms.transaction.TransactionService: boolean isNetworkAvailable()> (1)
<com.android.settings.wifi.WifiSettings: void onActivityCreated(android.os.Bundle)> (3)
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (15)
<com.android.server.WifiWatchdogService: boolean backgroundCheckDnsConnectivity()> (1)
<com.android.server.WifiWatchdogService: boolean checkDnsConnectivity()> (1)
<com.android.settings.deviceinfo.Status: void setWifiStatus()> (1)
<com.android.settings.wifi.AdvancedSettings: void refreshWifiInfo()> (1)
<com.android.mms.transaction.RetryScheduler: void update(com.android.mms.transaction.Observable)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityCreated(android.os.Bundle)> (30)
<android.content.SyncManager: boolean readDataConnectionState()> (1)
<android.net.http.RequestQueue: void setProxyConfig()> (2)
<com.android.browser.NetworkStateHandler: void <init>(android.app.Activity,com.android.browser.Controller)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.net.NetworkInfo getActiveNetworkInfo(android.content.Context)> (1)
<com.android.email.EmailConnectivityManager: boolean hasConnectivity()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)> (2)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.exchange.AbstractSyncService: boolean hasConnectivity()> (2)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void initialize(com.android.inputmethod.latin.LatinIME,android.content.SharedPreferences)> (1)
<com.android.phone.SipCallOptionHandler: boolean isNetworkConnected()> (2)
<com.android.providers.downloads.RealSystemFacade: boolean isNetworkRoaming()> (1)
<com.android.providers.downloads.RealSystemFacade: java.lang.Integer getActiveNetworkType()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.server.sip.SipService$ConnectivityReceiver: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.server.WifiWatchdogService: void handleBackgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.server.WifiWatchdogService: void handleCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.AccessibilitySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onActivityCreated(android.os.Bundle)> (5)
<com.android.settings.ApplicationSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.WirelessSettings: void onActivityCreated(android.os.Bundle)> (3)
<android.content.SyncManager: boolean access$500(android.content.SyncManager)> (8)
<android.net.http.RequestQueue: void access$300(android.net.http.RequestQueue)> (1)
<android.net.http.RequestQueue: void enablePlatformNotifications()> (1)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.browser.search.OpenSearchSearchEngine: boolean isNetworkConnected(android.content.Context)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.exchange.EasOutboxService: boolean hasConnectivity()> (1)
<com.android.exchange.EasSyncService: boolean hasConnectivity()> (2)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void init(com.android.inputmethod.latin.LatinIME,android.content.SharedPreferences)> (1)
<com.android.phone.SipCallOptionHandler: boolean access$100(com.android.phone.SipCallOptionHandler)> (1)
<com.android.phone.SipCallOptionHandler: void onCreate(android.os.Bundle)> (1)
<com.android.providers.downloads.SystemFacade: boolean isNetworkRoaming()> (1)
<com.android.providers.downloads.SystemFacade: java.lang.Integer getActiveNetworkType()> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: boolean isNetworkConnected()> (1)
<com.android.server.sip.SipService$ConnectivityReceiver: void onReceiveInternal(android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService: void access$900(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.server.WifiWatchdogService: void access$800(com.android.server.WifiWatchdogService,com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.accounts.AccountSyncSettings: void onActivityCreated(android.os.Bundle)> (3)
<com.android.settings.accounts.ManageAccountsSettings: void onActivityCreated(android.os.Bundle)> (3)
<android.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<android.content.SyncManager: void sendSyncAlarmMessage()> (1)
<android.content.SyncManager: void sendCheckAlarmsMessage()> (3)
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,java.lang.String)> (1)
<android.net.http.RequestQueue$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.webkit.Network: void enablePlatformNotifications()> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$700(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long)> (4)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.providers.downloads.DownloadInfo: int checkCanUseNetwork()> (3)
<com.android.providers.downloads.Helpers: boolean isNetworkAvailable(com.android.providers.downloads.SystemFacade)> ()
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult query(java.lang.String)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver: void access$1300(com.android.server.sip.SipService$ConnectivityReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void backgroundCheckAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.server.WifiWatchdogService$WifiWatchdogHandler: void checkAp(com.android.server.WifiWatchdogService$AccessPoint)> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<android.content.SyncManager: void access$900(android.content.SyncManager)> (1)
<android.content.SyncManager: void access$100(android.content.SyncManager)> (3)
<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])> (2)
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> (6)
<android.content.SyncManager: void access$1100(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> (2)
<android.webkit.Network: android.webkit.Network getInstance(android.content.Context)> (5)
<android.webkit.WebView: void enablePlatformNotifications()> (2)
<com.android.browser.search.SearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (3)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (2)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.providers.downloads.DownloadInfo: boolean isReadyToStart(long)> (1)
<com.android.providers.downloads.DownloadThread: int getFinalStatusForHttpError(com.android.providers.downloads.DownloadThread$State)> (4)
<com.android.providers.downloads.DownloadThread: void checkConnectivity()> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<com.android.server.WifiWatchdogService: void handleApAlive(com.android.server.WifiWatchdogService$AccessPoint)> (1)
<com.android.server.WifiWatchdogService: void onConnected(java.lang.String,java.lang.String)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$7: void onStatusChanged(int)> (2)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,android.content.SyncManager$ActiveSyncContext)> (4)
<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)> (1)
<android.content.SyncManager: void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)> (5)
<android.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.webkit.FrameLoader: boolean executeLoad()> ()
<android.webkit.WebViewCore$EventHub: void sendMessage(android.os.Message)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageDelayed(android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void sendMessageAtFrontOfQueue(android.os.Message)> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.browser.ScrollWebView: void enablePlatformNotifications()> (1)
<com.android.browser.BrowserProvider: android.database.Cursor doSuggestQuery(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.InstantSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.browser.SuggestionsAdapter$SuggestCursor: void runQuery(java.lang.CharSequence)> (2)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.providers.downloads.DownloadInfo: void startIfReady(long,com.android.providers.downloads.StorageManager)> (2)
<com.android.providers.downloads.DownloadThread: int readFromResponse(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: java.io.InputStream openResponseEntity(com.android.providers.downloads.DownloadThread$State,org.apache.http.HttpResponse)> (1)
<com.android.providers.downloads.DownloadThread: org.apache.http.HttpResponse sendRequest(com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadThread: void handleEndOfStream(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState)> (1)
<com.android.providers.downloads.DownloadThread: void executeDownload(com.android.providers.downloads.DownloadThread$State,android.net.http.AndroidHttpClient,org.apache.http.client.methods.HttpGet)> (1)
<com.android.providers.downloads.DownloadThread: void processResponseHeaders(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,org.apache.http.HttpResponse)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (2)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (2)
<com.android.server.WifiWatchdogService: void access$1500(com.android.server.WifiWatchdogService,java.lang.String,java.lang.String)> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,java.lang.String)> (2)
<android.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$6: void onServiceChanged(android.content.SyncAdapterType,boolean)> (1)
<android.content.SyncManager: void scheduleLocalSync(android.accounts.Account,java.lang.String)> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.webkit.WebViewCore$EventHub: void access$7100(android.webkit.WebViewCore$EventHub,android.os.Message)> (13)
<android.webkit.WebViewCore$EventHub: void access$7300(android.webkit.WebViewCore$EventHub,android.os.Message,long)> (1)
<android.webkit.WebViewCore$EventHub: void access$7200(android.webkit.WebViewCore$EventHub,android.os.Message)> (3)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.browser.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.util.List doInBackground(java.lang.CharSequence[])> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<com.android.email.activity.MessageViewFragmentBase$MessageViewAttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment,android.widget.ProgressBar,com.android.email.activity.MessageViewFragmentBase$1)> (1)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo insertDownload(com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void updateDownload(com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.providers.downloads.DownloadThread: void transferData(com.android.providers.downloads.DownloadThread$State,com.android.providers.downloads.DownloadThread$InnerState,byte[],java.io.InputStream)> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (3)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> ()
<com.android.server.WifiWatchdogService$2: void handleNetworkStateChanged(android.net.NetworkInfo)> (1)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$6: void onServiceChanged(java.lang.Object,boolean)> (1)
<android.webkit.WebViewCore: void contentDraw()> (3)
<android.webkit.WebViewCore: void contentScrollTo(int,int,boolean,boolean)> ()
<android.webkit.WebViewCore: void didFirstLayout(boolean)> ()
<android.webkit.WebViewCore: void layersDraw()> ()
<android.webkit.WebViewCore: void sendMessage(android.os.Message)> (1)
<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)> (7)
<android.webkit.WebViewCore: void sendMessage(int,int,int)> (19)
<android.webkit.WebViewCore: void sendMessage(int,int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void sendMessage(int,int)> (2)
<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)> (29)
<android.webkit.WebViewCore: void sendMessage(int)> (16)
<android.webkit.WebViewCore: void viewSizeChanged(android.webkit.WebView$ViewSizeData)> (2)
<android.webkit.WebViewCore: void webkitDraw()> (2)
<android.webkit.WebViewCore: void sendMessageDelayed(int,java.lang.Object,long)> (2)
<android.webkit.WebViewCore: void destroy()> (1)
<android.webkit.WebViewCore: void sendMessageAtFrontOfQueue(int,java.lang.Object)> (1)
<android.webkit.WebViewCore: void setupViewport(boolean)> (2)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageViewFragmentBase: void updateAttachmentTab()> (3)
<com.android.email.activity.MessageViewFragmentBase: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.providers.downloads.DownloadService: com.android.providers.downloads.DownloadInfo access$600(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,long)> (1)
<com.android.providers.downloads.DownloadService: void access$500(com.android.providers.downloads.DownloadService,com.android.providers.downloads.DownloadInfo$Reader,com.android.providers.downloads.DownloadInfo,long)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestionProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.Source: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.server.WifiWatchdogService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.webkit.WebViewCore: void resumeUpdatePicture(android.webkit.WebViewCore)> (8)
<android.webkit.WebViewCore: void sendNotifyProgressFinished()> ()
<android.webkit.WebView: void setFocusControllerActive(boolean)> (3)
<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()> (6)
<android.webkit.WebView$InvokeListBox$1: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView: void deleteSelection(int,int)> (2)
<android.webkit.WebView: void passToJavaScript(java.lang.String,android.view.KeyEvent)> (2)
<android.webkit.WebView: void replaceTextfieldText(int,int,java.lang.String,int,int)> (3)
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)> (3)
<android.webkit.WebView: void sendMoveMouseIfLatest(boolean,boolean)> (1)
<android.webkit.AccessibilityInjector: boolean traverseGivenAxis(int,int,boolean,java.lang.String)> (2)
<android.webkit.PluginFullScreenHolder: void onStop()> (1)
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)> (6)
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)> (6)
<android.webkit.WebViewCore: void splitContent(int)> ()
<android.webkit.WebView$InvokeListBox$2: void onClick(android.content.DialogInterface,int)> (1)
<android.webkit.WebView$InvokeListBox$4: void onCancel(android.content.DialogInterface)> (1)
<android.webkit.WebView: void autoFillForm(int)> (3)
<android.webkit.WebView: void centerKeyPressOnTextField()> (4)
<android.webkit.WebView: void clearCache(boolean)> (3)
<android.webkit.WebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (2)
<android.webkit.WebView: void dumpDomTree(boolean)> (3)
<android.webkit.WebView: void dumpRenderTree(boolean)> (3)
<android.webkit.WebView: void goBackOrForward(int,boolean)> (2)
<android.webkit.WebView: void requestLabel(int,int)> (2)
<android.webkit.WebView: void scrollFocusedTextInputY(int)> (2)
<android.webkit.WebView: void setNetworkAvailable(boolean)> (3)
<android.webkit.WebView: void setSelection(int,int)> (4)
<android.webkit.WebView: void scrollFocusedTextInputX(float)> (2)
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> (4)
<android.webkit.WebView: void setBackgroundColor(int)> (4)
<android.webkit.SearchBoxImpl: void dispatchJs(java.lang.String)> (5)
<android.webkit.WebView$1: void onPostExecute(java.util.Set)> (1)
<android.webkit.WebView: boolean handleTouchEventCommon(android.view.MotionEvent,int,int,int)> (3)
<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> (4)
<android.webkit.WebView: boolean sendViewSizeZoom(boolean)> (5)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.String[])> (1)
<android.webkit.WebViewCore$4: void invoke(java.lang.String,boolean,boolean)> (1)
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> (2)
<android.webkit.WebView: void cancelWebCoreTouchEvent(int,int,boolean)> (3)
<android.webkit.WebView: void documentAsText(android.os.Message)> (1)
<android.webkit.WebView: void documentHasImages(android.os.Message)> (1)
<android.webkit.WebView: void doShortPress()> (3)
<android.webkit.WebView: void externalRepresentation(android.os.Message)> (1)
<android.webkit.WebView: void letPageHandleNavKey(int,long,boolean,int)> (4)
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> (4)
<android.webkit.WebView: void passMultiTouchToWebKit(android.view.MotionEvent,long)> (2)
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> (1)
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)> (2)
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> (3)
<android.webkit.WebView: void sendMotionUp(int,int,int,int,int)> (1)
<android.webkit.WebView: void sendMoveFocus(int,int)> (1)
<android.webkit.WebView: void sendMoveMouse(int,int,int,int)> (1)
<android.webkit.WebView: void setJsFlags(java.lang.String)> (2)
<android.webkit.WebView: void setNetworkType(java.lang.String,java.lang.String)> (2)
<android.webkit.WebView: void clearHistory()> (1)
<android.webkit.WebView: void clearSslPreferences()> (1)
<android.webkit.WebView: void clearView()> (2)
<android.webkit.WebView: void debugDump()> (3)
<android.webkit.WebView: void dumpV8Counters()> (2)
<android.webkit.WebView: void freeMemory()> (2)
<android.webkit.WebView: void onPause()> (3)
<android.webkit.WebView: void onResume()> (3)
<android.webkit.WebView: void pauseTimers()> (2)
<android.webkit.WebView: void reload()> (4)
<android.webkit.WebView: void removeTouchHighlight(boolean)> (5)
<android.webkit.WebView: void resumeTimers()> (3)
<android.webkit.WebView: void revealSelection()> (3)
<android.webkit.WebView: void stopLoading()> (5)
<android.webkit.WebView: void useMockDeviceOrientation()> (1)
<android.webkit.WebViewCore: void access$2000(android.webkit.WebViewCore,android.webkit.WebView$ViewSizeData)> (4)
<android.webkit.WebViewCore: void access$600(android.webkit.WebViewCore)> (4)
<android.webkit.WebViewCore: void webkitDrawLayers()> (1)
<android.webkit.WebView: void destroy()> (10)
<android.webkit.WebViewCore: void updateViewport()> ()
<com.android.email.activity.MessageFileViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onResume()> (3)
<com.android.email.activity.MessageViewFragment: void updateAttachmentTab()> (1)
<com.android.email.activity.MessageFileViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$1700(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.email.activity.MessageViewFragment: void addAttachment(com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.providers.downloads.DownloadService$UpdateThread: void run()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SuggestionCursorProvider: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SingleSourceCorpus: com.android.quicksearchbox.CorpusResult getSuggestions(java.lang.String,int,boolean)> (2)
<android.webkit.WebView$TouchEventQueue: void handleQueuedTouchEventData(android.webkit.WebViewCore$TouchEventData)> (2)
<android.webkit.WebView: void cancelTouch()> (4)
<android.webkit.WebView: void computeScroll()> (4)
<android.webkit.WebView: void doFling()> (2)
<android.webkit.WebView: void onFixedLengthZoomAnimationEnd()> (2)
<android.webkit.WebView: void selectionDone()> (7)
<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)> (4)
<android.webkit.WebView: void setActive(boolean)> (5)
<com.android.browser.ScrollWebView: void setFocusControllerActive(boolean)> (1)
<android.webkit.WebView: void onScrollChanged(int,int,int,int)> (6)
<android.webkit.WebView: void switchOutDrawHistory()> (13)
<android.webkit.ZoomManager: void setZoomScale(float,boolean,boolean)> (3)
<com.android.browser.ScrollWebView: android.graphics.Rect sendOurVisibleRect()> (1)
<android.webkit.WebTextView: void onTextChanged(java.lang.CharSequence,int,int,int)> (3)
<com.android.browser.ScrollWebView: void deleteSelection(int,int)> (1)
<android.webkit.WebTextView: void sendDomEvent(android.view.KeyEvent)> (3)
<com.android.browser.ScrollWebView: void passToJavaScript(java.lang.String,android.view.KeyEvent)> (1)
<android.webkit.WebTextView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.browser.ScrollWebView: void replaceTextfieldText(int,int,java.lang.String,int,int)> (1)
<com.android.browser.Controller$5: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ScrollWebView: void requestFocusNodeHref(android.os.Message)> (1)
<com.android.browser.ScrollWebView: void sendMoveMouseIfLatest(boolean,boolean)> (1)
<android.webkit.AccessibilityInjector: boolean onKeyEvent(android.view.KeyEvent)> (2)
<android.webkit.AccessibilityInjector: boolean traverseCurrentAxis(int,boolean,java.lang.String)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.ScrollWebView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<android.webkit.PluginFullScreenHolder: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.ScrollWebView: boolean onKeyUp(int,android.view.KeyEvent)> (4)
<android.webkit.WebTextView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.ScrollWebView: void autoFillForm(int)> (1)
<android.webkit.WebView: boolean performLongClick()> (8)
<com.android.browser.ScrollWebView: void centerKeyPressOnTextField()> (1)
<com.android.browser.BrowserSettings: void clearCache(android.content.Context)> (1)
<com.android.browser.ScrollWebView: void clearCache(boolean)> (1)
<com.android.email.activity.setup.DebugFragment: void clearWebViewCache()> (1)
<android.webkit.WebView: void drawContent(android.graphics.Canvas)> (2)
<com.android.browser.ScrollWebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.ScrollWebView: void dumpDomTree(boolean)> (1)
<com.android.browser.ScrollWebView: void dumpRenderTree(boolean)> (1)
<android.webkit.WebView: void goBackOrForward(int)> (3)
<com.android.browser.ScrollWebView: void goBackOrForward(int,boolean)> (1)
<android.webkit.WebTextView: void setType(int)> (1)
<com.android.browser.ScrollWebView: void requestLabel(int,int)> (1)
<android.webkit.WebTextView: void lineUpScroll()> (3)
<com.android.browser.ScrollWebView: void scrollFocusedTextInputY(int)> (1)
<com.android.browser.Controller: void onPageStarted(com.android.browser.Tab,android.webkit.WebView,android.graphics.Bitmap)> (1)
<com.android.browser.NetworkStateHandler: void onNetworkToggle(boolean)> (1)
<com.android.browser.ScrollWebView: void setNetworkAvailable(boolean)> (1)
<android.webkit.WebTextView: void onSelectionChanged(int,int)> (3)
<android.webkit.WebTextView: void setDefaultSelection()> (3)
<com.android.browser.ScrollWebView: void setSelection(int,int)> (1)
<com.android.browser.ScrollWebView: void scrollFocusedTextInputX(float)> (1)
<com.android.browser.ScrollWebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> (1)
<com.android.browser.Tab: boolean restoreState(android.os.Bundle)> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.browser.ScrollWebView: void setBackgroundColor(int)> (4)
<android.webkit.SearchBoxImpl: void dispatchEvent(java.lang.String)> (4)
<android.webkit.SearchBoxImpl: void setDimensions(int,int,int,int)> (1)
<android.webkit.SearchBoxImpl: void setQuery(java.lang.String)> (1)
<android.webkit.SearchBoxImpl: void setSelection(int,int)> (1)
<android.webkit.SearchBoxImpl: void setVerbatim(boolean)> (1)
<android.webkit.WebView$1: void onPostExecute(java.lang.Object)> (1)
<android.webkit.WebView: boolean access$2500(android.webkit.WebView,android.view.MotionEvent,int,int,int)> (2)
<android.webkit.WebView: void handleMultiTouchInWebView(android.view.MotionEvent)> (3)
<com.android.browser.ScrollWebView: boolean handleTouchEventCommon(android.view.MotionEvent,int,int,int)> (1)
<com.android.browser.ScrollWebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> (4)
<android.webkit.WebView: boolean setFrame(int,int,int,int)> (4)
<android.webkit.WebView: void contentSizeChanged(boolean)> (2)
<com.android.browser.ScrollWebView: boolean sendViewSizeZoom(boolean)> (1)
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.Object)> (1)
<android.webkit.WebView: void addAccessibilityApisToJavaScript()> (2)
<com.android.browser.ScrollWebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> (1)
<android.webkit.WebView: void access$4200(android.webkit.WebView,int,int,boolean)> (3)
<com.android.browser.ScrollWebView: void cancelWebCoreTouchEvent(int,int,boolean)> (1)
<com.android.browser.ScrollWebView: void documentAsText(android.os.Message)> (1)
<com.android.browser.ScrollWebView: void documentHasImages(android.os.Message)> (1)
<android.webkit.WebView: void access$6000(android.webkit.WebView)> (3)
<com.android.browser.ScrollWebView: void doShortPress()> (1)
<com.android.browser.ScrollWebView: void externalRepresentation(android.os.Message)> (1)
<android.webkit.WebView: void doTrackball(long,int)> (2)
<com.android.browser.ScrollWebView: void letPageHandleNavKey(int,long,boolean,int)> (1)
<com.android.browser.ScrollWebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab: void activateVoiceSearchMode(android.content.Intent)> (2)
<com.android.email.activity.MessageCompose: void displayQuotedText(java.lang.String,java.lang.String)> (2)
<com.android.email.activity.MessageViewFragmentBase: void setMessageHtml(java.lang.String)> (5)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.WebView: void loadUrl(java.lang.String)> (15)
<com.android.browser.IntentHandler$UrlData: void loadIn(com.android.browser.Tab)> (1)
<com.android.browser.ScrollWebView: void loadUrl(java.lang.String,java.util.Map)> (1)
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> (6)
<com.android.browser.ScrollWebView: void passMultiTouchToWebKit(android.view.MotionEvent,long)> (1)
<com.android.browser.ScrollWebView: void postUrl(java.lang.String,byte[])> (1)
<android.webkit.WebView: void removeAccessibilityApisFromJavaScript()> (2)
<com.android.browser.ScrollWebView: void removeJavascriptInterface(java.lang.String)> (1)
<android.webkit.WebView: void saveWebArchive(java.lang.String)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.ScrollWebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> (1)
<com.android.browser.ScrollWebView: void sendMotionUp(int,int,int,int,int)> (1)
<com.android.browser.ScrollWebView: void sendMoveFocus(int,int)> (1)
<com.android.browser.ScrollWebView: void sendMoveMouse(int,int,int,int)> (1)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent,int,boolean)> (1)
<com.android.browser.ScrollWebView: void setJsFlags(java.lang.String)> (1)
<com.android.browser.NetworkStateHandler: void sendNetworkType(java.lang.String,java.lang.String)> (1)
<com.android.browser.ScrollWebView: void setNetworkType(java.lang.String,java.lang.String)> (1)
<com.android.browser.ScrollWebView: void clearHistory()> (1)
<com.android.browser.ScrollWebView: void clearSslPreferences()> (1)
<com.android.browser.ScrollWebView: void clearView()> (1)
<com.android.email.activity.MessageViewFragmentBase: void resetView()> (7)
<com.android.browser.ScrollWebView: void debugDump()> (1)
<com.android.browser.ScrollWebView: void dumpV8Counters()> (1)
<com.android.browser.ScrollWebView: void freeMemory()> (1)
<com.android.browser.TabControl: void freeMemory()> (1)
<android.webkit.WebViewFragment: void onPause()> (1)
<com.android.browser.ScrollWebView: void onPause()> (1)
<com.android.browser.Tab: void pause()> (2)
<android.webkit.WebViewFragment: void onResume()> (1)
<com.android.browser.ScrollWebView: void onResume()> (1)
<com.android.browser.Tab: void resume()> (2)
<com.android.browser.Controller: boolean pauseWebViewTimers(com.android.browser.Tab)> (2)
<com.android.browser.ScrollWebView: void pauseTimers()> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.ScrollWebView: void reload()> (1)
<com.android.browser.TitleBarXLarge: void stopOrRefresh()> (1)
<android.webkit.WebView: void access$5300(android.webkit.WebView,boolean)> (3)
<com.android.browser.ScrollWebView: void removeTouchHighlight(boolean)> (1)
<com.android.browser.Controller: void resumeWebViewTimers(com.android.browser.Tab)> (2)
<com.android.browser.GoogleAccountLogin: void <init>(android.app.Activity,android.accounts.Account,java.lang.Runnable)> (1)
<com.android.browser.ScrollWebView: void resumeTimers()> (1)
<android.webkit.WebTextView$MyResultReceiver: void onReceiveResult(int,android.os.Bundle)> (1)
<android.webkit.WebView: void rebuildWebTextView()> (9)
<com.android.browser.ScrollWebView: void revealSelection()> (1)
<com.android.browser.Controller: void stopLoading()> (3)
<com.android.browser.ScrollWebView: void stopLoading()> (1)
<com.android.browser.TabControl: void stopAllLoading()> (2)
<com.android.htmlviewer.HTMLViewerActivity: void onStop()> (1)
<com.android.browser.ScrollWebView: void useMockDeviceOrientation()> (1)
<android.webkit.WebViewCore: void access$700(android.webkit.WebViewCore)> (4)
<android.webkit.WebViewFragment: void onDestroyView()> (1)
<android.webkit.WebView: void finalize()> (1)
<com.android.browser.GoogleAccountLogin: void done()> (4)
<com.android.browser.ScrollWebView: void destroy()> (1)
<com.android.browser.Tab: void destroy()> (4)
<com.android.browser.Tab: void dismissSubWindow()> (2)
<com.android.email.activity.MessageCompose: void onDestroy()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onDestroy()> (3)
<com.android.htmlviewer.HTMLViewerActivity: void onDestroy()> (1)
<com.android.email.activity.MessageFileViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void onResume()> (2)
<com.android.email.activity.MessageFileViewFragment: void access$1700(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onPostExecute(com.android.emailcommon.provider.EmailContent$Attachment[])> (1)
<com.android.email.activity.MessageViewFragment: void access$1700(com.android.email.activity.MessageViewFragmentBase,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.quicksearchbox.QueryTask: void run()> (2)
<com.android.quicksearchbox.AppsCorpus: com.android.quicksearchbox.CorpusResult getSuggestions(java.lang.String,int,boolean)> (1)
<com.android.quicksearchbox.SingleSourceCorpus: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<android.webkit.WebView$TouchEventQueue: boolean enqueueTouchEvent(android.webkit.WebViewCore$TouchEventData)> (3)
<android.webkit.WebView$TouchEventQueue: void handleQueuedTouch(android.webkit.WebView$QueuedTouch)> (2)
<android.webkit.WebView: void onPinchToZoomAnimationStart()> (2)
<com.android.browser.ScrollWebView: void cancelTouch()> (1)
<com.android.browser.ScrollWebView: void computeScroll()> (4)
<com.android.browser.ScrollWebView: void doFling()> (1)
<android.webkit.ZoomManager: void animateZoom(android.graphics.Canvas)> (1)
<com.android.browser.ScrollWebView: void onFixedLengthZoomAnimationEnd()> (1)
<android.webkit.SelectActionModeCallback: void onDestroyActionMode(android.view.ActionMode)> (1)
<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)> (5)
<android.webkit.WebView: boolean setUpSelect(boolean,int,int)> (3)
<android.webkit.WebView: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.browser.ScrollWebView: void selectionDone()> (1)
<com.android.browser.ScrollWebView: void onFocusChanged(boolean,int,android.graphics.Rect)> (4)
<android.webkit.WebTextView: void onFocusChanged(boolean,int,android.graphics.Rect)> (4)
<android.webkit.WebView: void onAttachedToWindow()> (4)
<android.webkit.WebView: void onDetachedFromWindow()> (4)
<android.webkit.WebView: void onWindowFocusChanged(boolean)> (4)
<com.android.browser.ScrollWebView: void setActive(boolean)> (1)
<android.webkit.WebView: boolean updateScrollCoordinates(int,int)> (5)
<com.android.browser.ScrollWebView: void onScrollChanged(int,int,int,int)> (4)
<android.webkit.ZoomControlEmbedded$ZoomListener: void onVisibilityChanged(boolean)> (1)
<android.webkit.ZoomManager: boolean zoom(float)> (2)
<com.android.browser.ScrollWebView: void switchOutDrawHistory()> (1)
<android.webkit.CallbackProxy: void switchOutDrawHistory()> ()
<android.webkit.ZoomManager: void access$1700(android.webkit.ZoomManager,float,boolean,boolean)> (1)
<android.webkit.ZoomManager: void refreshZoomScale(boolean)> (2)
<android.webkit.ZoomManager: void setZoomScale(float,boolean)> (7)
<android.webkit.WebTextView: void onEditorAction(int)> (4)
<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ScrollWebView: boolean performLongClick()> (4)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.email.activity.setup.DebugFragment: void onClick(android.view.View)> (1)
<android.webkit.WebView: void onDraw(android.graphics.Canvas)> (4)
<com.android.browser.ScrollWebView: void drawContent(android.graphics.Canvas)> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<android.webkit.WebView: void goBack()> (9)
<android.webkit.WebView: void goForward()> (5)
<com.android.browser.ScrollWebView: void goBackOrForward(int)> (1)
<android.webkit.WebTextView: void makeNewLayout(int,int,android.text.BoringLayout$Metrics,android.text.BoringLayout$Metrics,int,boolean)> (3)
<android.webkit.WebTextView: void onScrollChanged(int,int,int,int)> (3)
<com.android.browser.WebViewController: void onPageStarted(com.android.browser.Tab,android.webkit.WebView,android.graphics.Bitmap)> (1)
<com.android.browser.NetworkStateHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,int,boolean,boolean)> (1)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (19)
<android.webkit.SearchBoxImpl: void oncancel()> (1)
<android.webkit.SearchBoxImpl: void onchange()> (1)
<android.webkit.SearchBoxImpl: void onresize()> (1)
<android.webkit.SearchBoxImpl: void onsubmit()> (1)
<android.webkit.SearchBox: void setDimensions(int,int,int,int)> (2)
<android.webkit.SearchBox: void setQuery(java.lang.String)> (2)
<android.webkit.SearchBox: void setSelection(int,int)> ()
<android.webkit.SearchBox: void setVerbatim(boolean)> (2)
<android.webkit.WebView$TouchEventQueue: void handleQueuedMotionEvent(android.view.MotionEvent)> (2)
<com.android.browser.ScrollWebView: boolean access$2500(android.webkit.WebView,android.view.MotionEvent,int,int,int)> (1)
<com.android.browser.ScrollWebView: void handleMultiTouchInWebView(android.view.MotionEvent)> (1)
<com.android.browser.ScrollWebView: boolean setFrame(int,int,int,int)> (4)
<android.webkit.WebView: void recordNewContentSize(int,int,boolean)> (2)
<com.android.browser.ScrollWebView: void contentSizeChanged(boolean)> (1)
<com.android.browser.ScrollWebView: void addAccessibilityApisToJavaScript()> (1)
<com.android.browser.ScrollWebView: void access$4200(android.webkit.WebView,int,int,boolean)> (1)
<com.android.browser.ScrollWebView: void access$6000(android.webkit.WebView)> (1)
<com.android.browser.ScrollWebView: void doTrackball(long,int)> (1)
<com.android.browser.Tab$5: void onIndexChanged(android.webkit.WebHistoryItem,int)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessage(com.android.emailcommon.provider.EmailContent$Message,com.android.emailcommon.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageCompose: void processSourceMessageGuarded(com.android.emailcommon.provider.EmailContent$Message,com.android.emailcommon.provider.EmailContent$Account)> (1)
<com.android.email.activity.MessageFileViewFragment: void setMessageHtml(java.lang.String)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$2000(com.android.email.activity.MessageViewFragmentBase,java.lang.String)> (3)
<com.android.email.activity.MessageViewFragmentBase: void onShowPicturesInHtml()> (3)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromBody(java.lang.String,java.lang.String)> (3)
<com.android.email.activity.MessageViewFragment: void setMessageHtml(java.lang.String)> (1)
<android.webkit.WebView: void injectAccessibilityForUrl(java.lang.String)> (2)
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.browser.Controller: void loadUrl(android.webkit.WebView,java.lang.String)> (5)
<com.android.browser.Controller: void onUserCanceledSsl(com.android.browser.Tab)> (1)
<com.android.browser.DeviceAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.ErrorConsoleView$1: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin$2: void run()> (1)
<com.android.browser.InstantSearchEngine$1: void run()> (1)
<com.android.browser.ScrollWebView: void loadUrl(java.lang.String)> (1)
<com.android.settings.TetherSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.browser.Controller: void loadUrlDataIn(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (5)
<android.webkit.WebTextView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView: boolean textFieldDrag(android.view.MotionEvent)> (2)
<com.android.browser.ScrollWebView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.browser.ScrollWebView: void removeAccessibilityApisFromJavaScript()> (1)
<com.android.browser.ScrollWebView: void saveWebArchive(java.lang.String)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,int,boolean)> (1)
<com.android.browser.NetworkStateHandler: void access$000(com.android.browser.NetworkStateHandler,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void resetView()> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.String[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragmentBase: void clearContent()> (3)
<com.android.email.activity.MessageViewFragmentBase: void loadMessageIfResumed()> (3)
<com.android.email.activity.MessageViewFragment: void resetView()> (1)
<com.android.browser.Controller: void onLowMemory()> (1)
<com.android.browser.Controller: void onPause()> (1)
<com.android.browser.Tab: void putInBackground()> (4)
<com.android.browser.Tab: void putInForeground()> (2)
<com.android.browser.Controller: void onPageFinished(com.android.browser.Tab)> (1)
<com.android.browser.TitleBarXLarge: void onClick(android.view.View)> (1)
<com.android.browser.ScrollWebView: void access$5300(android.webkit.WebView,boolean)> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<android.webkit.WebView: void displaySoftKeyboard(boolean)> (2)
<com.android.browser.ScrollWebView: void rebuildWebTextView()> (1)
<com.android.browser.UiController: void stopLoading()> (2)
<com.android.browser.ScrollWebView: void finalize()> (1)
<com.android.browser.GoogleAccountLogin: void access$100(com.android.browser.GoogleAccountLogin)> (1)
<com.android.browser.GoogleAccountLogin: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (1)
<com.android.browser.TabControl: void destroy()> (1)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.Controller: void dismissSubWindow(com.android.browser.Tab)> (8)
<com.android.email.activity.MessageFileViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageViewFragmentBase$LoadAttachmentsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.quicksearchbox.util.NamedTask: void run()> (1)
<com.android.quicksearchbox.AppsCorpus: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int,boolean)> (1)
<android.webkit.WebView$TouchEventQueue: void runNextQueuedEvents()> (2)
<android.webkit.WebView$TouchEventQueue: void runQueuedAndPreQueuedEvents()> (2)
<android.webkit.ZoomManager$ScaleDetectorListener: boolean onScaleBegin(android.view.ScaleGestureDetector)> (1)
<com.android.browser.ScrollWebView: void onPinchToZoomAnimationStart()> (1)
<android.webkit.PluginFullScreenHolder: boolean onTrackballEvent(android.view.MotionEvent)> (1)
<com.android.browser.ScrollWebView: boolean onTrackballEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView: boolean selectText(int,int)> (3)
<android.webkit.WebView: void emulateShiftHeld()> (1)
<com.android.browser.ScrollWebView: boolean setUpSelect(boolean,int,int)> (1)
<com.android.browser.ScrollWebView: void onConfigurationChanged(android.content.res.Configuration)> (4)
<com.android.browser.ScrollWebView: void onAttachedToWindow()> (4)
<com.android.browser.ScrollWebView: void onDetachedFromWindow()> (4)
<com.android.browser.ScrollWebView: void onWindowFocusChanged(boolean)> (4)
<android.webkit.ZoomManager: void zoomToOverview()> (1)
<com.android.browser.ScrollWebView: boolean updateScrollCoordinates(int,int)> (1)
<android.webkit.ZoomManager: boolean zoomIn()> (1)
<android.webkit.ZoomManager: boolean zoomOut()> (1)
<android.webkit.ZoomManager$PostScale: void run()> (1)
<android.webkit.ZoomManager$ScaleDetectorListener: void onScaleEnd(android.view.ScaleGestureDetector)> (1)
<android.webkit.ZoomManager: void handleDoubleTap(float,float)> (2)
<android.webkit.ZoomManager: boolean startZoomAnimation(float,boolean)> (4)
<android.webkit.ZoomManager$ScaleDetectorListener: boolean handleScale(android.view.ScaleGestureDetector)> (1)
<android.webkit.ZoomManager: void onFirstLayout(android.webkit.WebViewCore$DrawData)> (2)
<android.webkit.ZoomManager: void onNewPicture(android.webkit.WebViewCore$DrawData)> (2)
<android.webkit.ZoomManager: void updateDefaultZoomDensity(float)> (1)
<com.android.browser.ScrollWebView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.ScrollWebView: void onDraw(android.graphics.Canvas)> (4)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.ScrollWebView: void goBack()> (1)
<com.android.settings.SettingsSafetyLegalActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.ScrollWebView: void goForward()> (1)
<com.android.browser.Tab$2: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<android.webkit.SearchBox: void oncancel()> ()
<android.webkit.SearchBox: void onchange()> (1)
<android.webkit.SearchBox: void onresize()> (2)
<android.webkit.SearchBox: void onsubmit()> (1)
<com.android.browser.InstantSearchEngine: void onNewDropdownDimensions(int)> (1)
<com.android.browser.InstantSearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)> (1)
<android.webkit.WebView$TouchEventQueue: void enqueueTouchEvent(android.view.MotionEvent)> (1)
<android.webkit.WebView: void access$6800(android.webkit.WebView,int,int,boolean)> (3)
<com.android.browser.ScrollWebView: void recordNewContentSize(int,int,boolean)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object[])> (1)
<com.android.email.activity.MessageFileViewFragment: void access$2000(com.android.email.activity.MessageViewFragmentBase,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragment: void access$2000(com.android.email.activity.MessageViewFragmentBase,java.lang.String)> (1)
<com.android.email.activity.MessageFileViewFragment: void onShowPicturesInHtml()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onClick(android.view.View)> (3)
<com.android.email.activity.MessageViewFragment: void onShowPicturesInHtml()> (1)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragmentBase: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (3)
<com.android.email.activity.MessageViewFragment: void reloadUiFromBody(java.lang.String,java.lang.String)> (1)
<android.webkit.WebView: void onPageFinished(java.lang.String)> (3)
<com.android.browser.ScrollWebView: void injectAccessibilityForUrl(java.lang.String)> (1)
<com.android.browser.ScrollWebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.Tab,java.lang.String,boolean)> (4)
<com.android.browser.Controller: void loadUrlFromContext(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: void onUrlSelected(java.lang.String,boolean)> (2)
<com.android.browser.WebViewController: void onUserCanceledSsl(com.android.browser.Tab)> (1)
<com.android.settings.SettingsPreferenceFragment: android.app.Dialog onCreateDialog(int)> (23)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabAndShow(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData,boolean,java.lang.String)> (4)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,java.lang.String,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ScrollWebView: boolean textFieldDrag(android.view.MotionEvent)> (1)
<com.android.browser.PieControl$MenuAdapter: void onClick(android.view.View)> (1)
<com.android.browser.Controller$2: void run()> (1)
<com.android.email.Controller$Result: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (12)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void clearContent()> (1)
<com.android.email.activity.MessageViewFragment: void clearContent()> (2)
<com.android.email.activity.MessageFileViewFragment: void loadMessageIfResumed()> (2)
<com.android.email.activity.MessageViewFragment: void loadMessageIfResumed()> (2)
<com.android.browser.BrowserActivity: void onLowMemory()> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.browser.BaseUi: void showComboView(boolean,android.os.Bundle)> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean,java.lang.String,java.lang.String,boolean)> (5)
<com.android.browser.BaseUi: void hideComboView()> (3)
<com.android.browser.WebViewController: void onPageFinished(com.android.browser.Tab)> (1)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent)> (1)
<android.webkit.WebView: void access$7400(android.webkit.WebView,boolean)> (4)
<com.android.browser.ScrollWebView: void displaySoftKeyboard(boolean)> (1)
<com.android.browser.TitleBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin$1: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (2)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.WebViewController: void dismissSubWindow(com.android.browser.Tab)> (2)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void loop()> (1)
<android.webkit.WebView$TouchEventQueue: boolean dropStaleGestures(android.view.MotionEvent,long)> (2)
<android.webkit.WebView$TouchEventQueue: void ignoreCurrentlyMissingEvents()> (1)
<android.webkit.WebView: boolean selectText()> (3)
<android.webkit.WebView: void selectAll()> (3)
<com.android.browser.ScrollWebView: boolean selectText(int,int)> (1)
<com.android.browser.ScrollWebView: void emulateShiftHeld()> (1)
<android.webkit.WebView: boolean zoomIn()> (4)
<android.webkit.WebView: boolean zoomOut()> (4)
<android.webkit.WebView: void centerFitRect(android.graphics.Rect)> (6)
<android.webkit.ZoomManager: void zoomToReadingLevel()> (1)
<android.webkit.ZoomManager$ScaleDetectorListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<android.webkit.WebView: void updateDefaultZoomDensity(int)> (2)
<com.android.browser.TitleBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.app.AlertActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.browser.UI$DropdownChangeListener: void onNewDropdownDimensions(int)> (1)
<com.android.browser.search.SearchEngine: void startSearch(android.content.Context,java.lang.String,android.os.Bundle,java.lang.String)> (2)
<com.android.browser.ScrollWebView: void access$6800(android.webkit.WebView,int,int,boolean)> (1)
<com.android.email.activity.MessageCompose$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageFileViewFragment: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragment: void access$1500(com.android.email.activity.MessageViewFragmentBase,java.lang.String,java.lang.String)> (1)
<com.android.browser.ScrollWebView: void onPageFinished(java.lang.String)> (1)
<android.webkit.CallbackProxy: void onPageFinished(java.lang.String)> ()
<com.android.browser.Controller$6: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.BookmarksHistoryCallbacks: void onUrlSelected(java.lang.String,boolean)> (2)
<com.android.browser.UiController: void onUrlSelected(java.lang.String,boolean)> (4)
<com.android.browser.Tab$2$4: void onCancel(android.content.DialogInterface)> (1)
<com.android.settings.accounts.AccountPreferenceBase: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ApplicationSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DeviceInfoSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DialogCreatable: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.DisplaySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.inputmethod.InputMethodConfig: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.PrivacySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SecuritySettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.SoundSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.TextToSpeechSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn.VpnEditor: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.vpn.VpnTypeSelection: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.AdvancedSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.wifi.WifiSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.settings.WirelessSettings: android.app.Dialog onCreateDialog(int)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (3)
<com.android.browser.WebViewController: com.android.browser.Tab openTabAndShow(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData,boolean,java.lang.String)> (1)
<com.android.email.activity.AccountFolderList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.AccountFolderListFragment$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$2: void run()> (1)
<com.android.email.Controller: void loadMessageForView(long)> (1)
<com.android.email.RefreshManager$ControllerResult: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.service.MailService$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void onMessageViewClosed()> (1)
<com.android.email.activity.MessageFileViewFragment: void openMessage(android.net.Uri)> (1)
<com.android.email.activity.MessageViewFragment: void openMessage(long)> (2)
<com.android.browser.PhoneUi: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.UI: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.XLargeUi: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> (1)
<com.android.browser.PhoneUi: void hideComboView()> (1)
<com.android.browser.UI: void hideComboView()> (1)
<com.android.browser.XLargeUi: void hideComboView()> (1)
<com.android.browser.Tab$2: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.ScrollWebView: void access$7400(android.webkit.WebView,boolean)> (1)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$SubWindowChromeClient: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void run()> (1)
<com.android.browser.Controller$SelectText: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.ScrollWebView: boolean selectText()> (1)
<android.webkit.SelectActionModeCallback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.browser.ScrollWebView: void selectAll()> (1)
<android.webkit.ZoomControlEmbedded$ZoomListener: void onZoom(boolean)> (1)
<android.webkit.ZoomControlExternal$2: void onClick(android.view.View)> (1)
<com.android.browser.ScrollWebView: boolean zoomIn()> (1)
<android.webkit.ZoomControlExternal$3: void onClick(android.view.View)> (1)
<com.android.browser.ScrollWebView: boolean zoomOut()> (1)
<com.android.browser.ScrollWebView: void centerFitRect(android.graphics.Rect)> (1)
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> (1)
<com.android.browser.ScrollWebView: void updateDefaultZoomDensity(int)> (1)
<com.android.browser.TitleBar: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.TitleBarXLarge: void onAction(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Controller: boolean switchToTab(int)> (9)
<com.android.browser.Controller: void removeActiveTabsPage(boolean)> (1)
<com.android.browser.UrlInputView: void dispatchChange()> (1)
<com.android.browser.IntentHandler: boolean handleWebSearchRequest(android.app.Activity,com.android.browser.Controller,java.lang.String,android.os.Bundle,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserHistoryPage$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.CombinedBookmarkHistoryView$2: boolean onBookmarkSelected(android.database.Cursor,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryView$2: boolean onOpenInNewWindow(android.database.Cursor)> (1)
<com.android.browser.CombinedBookmarkHistoryView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.settings.SettingsPreferenceFragment$SettingsDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.email.MessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.MessagingListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (3)
<com.android.email.activity.MessageListXLFragmentManager: void access$600(com.android.email.activity.MessageListXLFragmentManager)> (1)
<com.android.email.activity.MessageFileView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMessage(long)> (4)
<com.android.email.activity.MessageView: void messageChanged()> (3)
<com.android.browser.Controller: void bookmarksOrHistoryPicker(boolean)> (6)
<com.android.browser.Controller: void removeComboView()> (7)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void closeEmptyChildTab()> (2)
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (1)
<com.android.browser.BrowserSettings$Observer: void update(java.util.Observable,java.lang.Object)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: boolean switchToTab(int)> (3)
<com.android.browser.WebViewController: boolean switchToTab(int)> (2)
<com.android.browser.UiController: void removeActiveTabsPage(boolean)> (4)
<com.android.browser.UrlInputView: void access$000(com.android.browser.UrlInputView)> (2)
<com.android.browser.IntentHandler: boolean handleWebSearchIntent(android.app.Activity,com.android.browser.Controller,android.content.Intent)> (2)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BookmarksPageCallbacks: boolean onBookmarkSelected(android.database.Cursor,boolean)> (2)
<com.android.browser.BookmarksPageCallbacks: boolean onOpenInNewWindow(android.database.Cursor)> (2)
<com.android.browser.OptionsMenuHandler: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1500(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.email.GroupMessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewFinished(long)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewStarted(long)> (2)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageListXLFragmentManager$ThreePaneLayoutCallback: void onVisiblePanesChanged(int)> (1)
<com.android.email.activity.MessageViewBase: void onCreate(android.os.Bundle)> (3)
<com.android.email.activity.MessageListXL: boolean moveToNewer()> (2)
<com.android.email.activity.MessageListXL: boolean moveToOlder()> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMailbox(long,long)> (3)
<com.android.email.activity.MessageListXL$MessageListFragmentCallback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: boolean moveToNewer()> (2)
<com.android.email.activity.MessageView: boolean moveToOlder()> (3)
<com.android.email.activity.MessageView: void onResume()> (2)
<com.android.browser.Controller: boolean onKeyLongPress(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: void bookmarksOrHistoryPicker(boolean)> (2)
<com.android.browser.UiController: void removeComboView()> (1)
<com.android.browser.UiController: void closeCurrentTab()> (2)
<com.android.browser.UrlHandler: boolean startActivityForUrl(java.lang.String)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BaseUi: void initWebViewSettings(android.webkit.WebView)> (2)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.PhoneUi: void onPause()> (1)
<com.android.browser.UrlInputView$1: void onChanged()> (1)
<com.android.browser.UrlInputView$1: void onInvalidated()> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserBookmarksPage: void loadUrl(int)> (1)
<com.android.browser.BrowserBookmarksPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.BrowserBookmarksPage: void openInNewWindow(int)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.MessagingController$7: void run()> (1)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (1)
<com.android.email.activity.ThreePaneLayout$Callback: void onVisiblePanesChanged(int)> (2)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXL: void onCurrentMessageGone()> (2)
<com.android.email.activity.MessageListXL: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXL: void onMoveToOlder()> (1)
<com.android.email.activity.MessageListXLFragmentManager$MailboxFinderCallback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void selectAccount(long,long,long)> (4)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$Callback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void onDeleteMessage()> (2)
<com.android.email.activity.MessageView: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageViewBase: void onResume()> (3)
<com.android.browser.BrowserActivity: boolean onKeyLongPress(int,android.view.KeyEvent)> (1)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.PhoneUi: void initWebViewSettings(android.webkit.WebView)> (2)
<com.android.browser.XLargeUi: void initWebViewSettings(android.webkit.WebView)> (2)
<com.android.browser.autocomplete.SuggestiveAutoCompleteTextView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BaseUi: void onPause()> (3)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.Controller$4: void run()> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationStart(android.animation.Animator)> (1)
<com.android.email.activity.MessageListXL: void access$1200(com.android.email.activity.MessageListXL)> (2)
<com.android.email.activity.MessageListXL: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$Callback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void loadState(android.os.Bundle)> (1)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void initFromIntent()> (1)
<com.android.email.activity.MessageListXL: void selectAccount(long)> (2)
<com.android.email.activity.MailboxListFragment$Callback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Integer)> (1)
<com.android.email.activity.MessageView: boolean handleMenuItem(int)> (1)
<com.android.email.activity.MessageViewFragment$Callback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageFileView: void onResume()> (2)
<com.android.browser.UI: boolean onBackKey()> (2)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.PhoneUi: android.webkit.WebView createWebView(boolean)> (1)
<com.android.browser.XLargeUi: android.webkit.WebView createWebView(boolean)> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.UI: void onPause()> (1)
<com.android.browser.XLargeUi: void onPause()> (1)
<com.android.browser.BrowserBookmarksPage$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MoveMessageToDialog$Callback: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Long)> (1)
<com.android.email.activity.MessageListXL: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MailboxListFragment$Callback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void access$2000(com.android.email.activity.MessageListXL,long)> (1)
<com.android.email.activity.MessageListXL: void updateAccountList(android.database.Cursor)> (1)
<com.android.email.activity.MailboxListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.browser.PhoneUi: android.webkit.WebView createSubWebView(boolean)> ()
<com.android.browser.XLargeUi: android.webkit.WebView createSubWebView(boolean)> ()
<com.android.email.activity.MessageViewFragment$Callback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MoveMessageToDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageListXL$ActionBarNavigationCallback: boolean onNavigationItemSelected(int,long)> (1)
<com.android.email.activity.MessageListXL: void access$1800(com.android.email.activity.MessageListXL,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void onDelete()> (1)
<com.android.email.activity.MessageCommandButtonView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.activity.MessageViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.server.ConnectivityService: void enforceTetherAccessPermission()> (8)
<com.android.server.ConnectivityService: boolean isTetheringSupported()> (9)
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isTetheringSupported()> ()
<android.net.IConnectivityManager$Stub: boolean isTetheringSupported()> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)> (3)
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int getLastTetherError(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableWifiRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager: boolean isTetheringSupported()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void access$500(com.android.server.ConnectivityService,int,boolean)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<android.net.ConnectivityManager: boolean isTetheringSupported()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<com.android.server.ConnectivityService: void access$300(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (3)
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (4)
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<android.net.ConnectivityManager: int tether(java.lang.String)> (3)
<android.net.ConnectivityManager: int untether(java.lang.String)> (2)
<com.android.settings.TetherSettings: void updateUsbState(java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void updateState()> (3)
<android.net.wifi.WifiStateMachine: void updateTetherState(java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.settings.wifi.WifiApEnabler: void <init>(android.content.Context,android.preference.CheckBoxPreference)> (1)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (25)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.settings.TetherSettings: void updateState(java.lang.String[],java.lang.String[],java.lang.String[])> (2)
<com.android.settings.TetherSettings: void access$200(com.android.settings.TetherSettings)> (1)
<com.android.settings.TetherSettings: void onStart()> (3)
<android.net.wifi.WifiStateMachine: void access$000(android.net.wifi.WifiStateMachine,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void access$100(com.android.settings.TetherSettings,java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (5)
<android.net.wifi.WifiStateMachine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.SecuritySettings: void onStart()> (3)
<com.android.settings.TextToSpeechSettings: void onStart()> (3)
Permission:android.permission.SET_DEBUG_APP
10 Callers:
<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<android.app.ActivityManagerNative: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void setDebugApp(java.lang.String,boolean,boolean)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.AppPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.development.DevelopmentSettings: void writeDebugOptions()> (2)
<com.android.development.DevelopmentSettings: void access$100(com.android.development.DevelopmentSettings)> (1)
<com.android.development.DevelopmentSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.development.DevelopmentSettings$2: void onClick(android.view.View)> (1)
Permission:android.permission.WRITE_CALENDAR
197 Callers:
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$100(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$500(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$2: void run()> (1)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (1)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (6)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithResponse(java.lang.Object,long,long,long,long,int,int,long,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (4)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (11)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (9)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.DayView: void access$3000(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.EventInfoFragment: void doEdit()> (1)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$3: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$2000(com.android.calendar.EventInfoFragment)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.DayView: void access$3400(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.EventInfoFragment$5: void onClick(android.view.View)> (1)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (2)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.alerts.AlertActivity: void onClick(android.view.View)> (1)
<android.util.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.calendar.event.EditEventFragment: void saveReminders()> (1)
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> (1)
<com.android.calendar.DeleteEventHelper: void access$800(com.android.calendar.DeleteEventHelper)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EventInfoFragment: void addAttendee(android.content.ContentValues,java.util.ArrayList,int,com.android.calendar.EventInfoFragment$Attendee,int)> (1)
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,long,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveResponse()> (1)
<com.android.calendar.EventInfoFragment: void onDestroyView()> (2)
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void wipe()> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void wipe()> (1)
<com.android.exchange.ExchangeService: void deleteAccountPIMData(long)> (2)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (3)
<com.android.exchange.ExchangeService$2: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(long)> (2)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(long)> (2)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$12: void run()> (1)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1900(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1100(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,java.lang.String,boolean)> (2)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,java.lang.String,boolean)> (4)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaFragment: void goTo(android.text.format.Time,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long)> (1)
<com.android.calendar.alerts.AlertActivity: void access$500(com.android.calendar.alerts.AlertActivity,long)> (1)
<com.android.calendar.alerts.AlertActivity$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.provider.Calendar$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> (1)
<com.android.providers.calendar.CalendarProvider2: void scheduleNextAlarmLocked(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.providers.calendar.CalendarProvider2: void runScheduleNextAlarm(boolean)> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$1000(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (2)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (3)
<com.android.calendar.alerts.AlertActivity: void onStop()> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.providers.calendar.CalendarReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Calendar$Calendars: int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])> (1)
<android.provider.Calendar$Calendars: int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)> ()
<com.android.exchange.adapter.CalendarSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.alerts.DismissAllAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.exchange.utility.CalendarUtilities: long createCalendar(com.android.exchange.EasSyncService,com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AbstractSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.adapter.AccountSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (3)
<com.android.exchange.adapter.EmailSyncAdapter: void <init>(com.android.exchange.EasSyncService)> (2)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void toggleVisibility(int)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.GET_ACCOUNTS
686 Callers:
<android.accounts.AccountManagerService: void checkReadAccountsPermission()> (3)
<android.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (1)
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (15)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (15)
<android.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$2: void doWork()> (1)
<android.accounts.AccountManager$1: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (1)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts(android.content.Context)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$GetAccountsTask: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.development.SyncAdapterDriver: void startSyncSelected(android.view.View)> ()
<com.android.email.provider.EmailProvider$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.service.MailService$8: void runInternal(android.content.Context)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.exchange.ExchangeService: void runAccountReconcilerSync(android.content.Context)> (1)
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: android.accounts.Account findIntendedAccount(java.lang.String)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager)> (1)
<com.android.providers.contacts.ContactsProvider2: android.accounts.Account getDefaultAccount()> (1)
<android.accounts.AccountManager$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (7)
<android.content.SyncManager$SyncHandler: void onBootCompleted()> (1)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.calendar.CalendarSettingsActivity$1: void run()> (1)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<com.android.contacts.ContactListEmptyView: boolean isSyncActive()> (1)
<com.android.contacts.list.ContactEntryListFragment: boolean isSyncActive()> (7)
<com.android.contacts.model.AccountTypeManagerImpl: void loadAccountsInBackground()> (5)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> (1)
<com.android.providers.calendar.CalendarProvider2: void verifyAccounts()> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.MasterClear: void loadAccountList()> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$GetAccountsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.service.MailService$8: void runInternal(java.lang.Object)> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.exchange.ExchangeService: void access$800(com.android.exchange.ExchangeService,android.content.Context)> (2)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView,android.accounts.AccountManager,com.android.internal.policy.impl.LockPatternKeyguardView$1)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void <init>(android.content.Context)> (1)
<com.android.development.AccountsTester: void onStart()> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onStart()> (4)
<android.content.SyncManager$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<com.android.contacts.ContactListEmptyView: void show(boolean,boolean,boolean,boolean,boolean,boolean,boolean)> ()
<com.android.contacts.list.ContactBrowseListFragment: boolean isSyncActive()> (2)
<com.android.contacts.list.ContactPickerFragment: boolean isSyncActive()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.JoinContactListFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.StrequentContactListFragment: boolean isSyncActive()> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onStatusChanged(int)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> (1)
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.EmailContent$Account,java.io.File)> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.MasterClear: void establishInitialState()> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (4)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent)> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.exchange.ExchangeService$3: void run()> (1)
<com.android.exchange.ExchangeService$7: void run()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView: void maybeEnableFallback(android.content.Context)> (1)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onStart()> (4)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (5)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void prepareEmptyView()> (2)
<com.android.contacts.list.ContactPickerFragment: void prepareEmptyView()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.MasterClear: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.settings.MasterClear: void onActivityResult(int,int,android.content.Intent)> (1)
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)> (3)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> (31)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> (1)
<com.android.settings.SecuritySettings: void onStart()> (3)
<com.android.settings.TetherSettings: void onStart()> (3)
<com.android.settings.TextToSpeechSettings: void onStart()> (3)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<com.android.contacts.list.ContactEntryListFragment: void prepareEmptyView()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void prepareEmptyView()> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (3)
<com.android.email.service.MailService$8: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void createNewContact()> (2)
<com.android.contacts.ContactsApplication: void onCreate()> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries()> (1)
<com.android.contacts.detail.ContactDetailFragment: void makePersonalCopy()> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean canEditSuggestedContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean doJoinContactAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean isContactWritable()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean revert()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> (8)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (3)
<com.android.contacts.editor.ContactEditorFragment: void createContact(android.accounts.Account)> (3)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ImportExportInteraction: void handleImportRequest(int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: void <init>(com.android.contacts.interactions.PhoneNumberInteraction,android.content.Context)> (1)
<com.android.contacts.list.ContactListFilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> (1)
<com.android.contacts.quickcontact.QuickContactWindow: void handleData(android.database.Cursor)> (1)
<com.android.contacts.SplitAggregateView: void <init>(android.content.Context,android.net.Uri)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.util.AccountsListAdapter: void <init>(android.content.Context,boolean)> (2)
<com.android.contacts.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.contacts.list.JoinContactListFragment: void prepareEmptyView()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void prepareEmptyView()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void prepareEmptyView()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$700(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewProperties: com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardWindowController)> (1)
<com.android.contacts.activities.ContactBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void access$900(com.android.contacts.activities.ContactBrowserActivity)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.detail.ContactDetailFragment: void bindData()> (2)
<com.android.contacts.detail.ContactDetailFragment: void access$000(com.android.contacts.detail.ContactDetailFragment)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean performClick()> (3)
<com.android.contacts.editor.ContactEditorFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.editor.ContactEditorFragment: void joinAggregate(long)> (1)
<com.android.contacts.activities.ContactEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.activities.ContactEditorActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onBackPressed()> (2)
<com.android.contacts.editor.ContactEditorFragment: void doJoinSuggestedContact(long[])> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onStop()> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(android.accounts.Account,com.android.contacts.model.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.interactions.ImportExportInteraction: void access$000(com.android.contacts.interactions.ImportExportInteraction,int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.list.ContactListFilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.quickcontact.QuickContactWindow: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> (1)
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (16)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void show()> (2)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.activities.ContactBrowserActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailFragment: void access$1100(com.android.contacts.detail.ContactDetailFragment)> (2)
<com.android.contacts.detail.ContactDetailFragment: void loadUri(android.net.Uri)> (2)
<com.android.contacts.detail.ContactDetailFragment$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onBackPressed()> (2)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (4)
<com.android.contacts.interactions.ImportExportInteraction$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.ContactBrowserActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.interactions.ImportExportInteraction: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.ContactsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (4)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactsFrontDoor: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.NonPhoneActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.test.FragmentTestActivity: void onCreate(android.os.Bundle)> (2)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<com.cooliris.picasa.PicasaApi: android.accounts.Account[] getAccounts(android.content.Context)> (3)
<com.cooliris.picasa.PicasaService: boolean getIsSyncable(android.content.Context,android.accounts.Account)> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.AccountReconciler: boolean reconcileAccounts(android.content.Context,java.util.List,android.accounts.Account[],android.content.ContentResolver)> (2)
<com.android.exchange.ExchangeService$AccountObserver: void onAccountChanged()> (1)
<com.android.settings.accounts.AccountSyncSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoaderReset(android.content.Loader)> (1)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void setupContactDetailFragment(android.net.Uri)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onBackPressed()> (3)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (16)
<com.android.contacts.quickcontact.QuickContactActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaApi: com.cooliris.picasa.PicasaApi$AuthAccount[] getAuthenticatedAccounts(android.content.Context)> (1)
<com.cooliris.picasa.PicasaService: void requestSync(android.content.Context,int,long)> (2)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.exchange.ExchangeService$AccountObserver: void access$400(com.android.exchange.ExchangeService$AccountObserver)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void access$500(com.android.contacts.activities.ContactBrowserActivity,android.net.Uri)> (2)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactsFrontDoor: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.CallContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.test.FragmentTestActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onServiceCompleted(android.content.Intent)> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: void reloadAccounts()> (4)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<com.android.exchange.ExchangeService$AccountObserver$1: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<android.accounts.AccountManager$4: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: com.cooliris.picasa.UserEntry[] syncUsers(com.cooliris.picasa.PicasaContentProvider$SyncContext,android.content.SyncResult)> (2)
<com.cooliris.picasa.PicasaContentProvider$SyncContext: boolean login(java.lang.String)> (2)
<com.cooliris.picasa.PicasaContentProvider: void reloadAccounts()> (1)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.contacts.list.OnContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (3)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (11)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsers(android.content.SyncResult)> (1)
<com.cooliris.picasa.PicasaContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (3)
<com.android.contacts.list.ContactEntryListFragment: void finish()> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.StrequentContactListFragment: void finish()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$3: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.email.service.MailService: void setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.EmailContent$Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<com.android.settings.accounts.AddAccountSettings: void addAccount(java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void next()> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (9)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void checkSelection()> (1)
<com.android.contacts.list.ContactBrowseListContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onClose()> (7)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.browser.TitleBarXLarge: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.email.AccountBackupRestore: boolean doRestoreAccounts(android.content.Context,com.android.email.Preferences,boolean)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.settings.accounts.AddAccountSettings: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$AccountAnalyzer: void start()> (1)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$12: void run()> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.wm.WindowManagerService$1: void acquired()> (1)
<com.android.server.wm.WindowManagerService$1: void released()> (1)
<com.android.server.wm.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (6)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (15)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (2)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactUriQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.widget.ContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.ContactPickerFragment: void onClose()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.JoinContactListFragment: void onClose()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onClose()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onClose()> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClose()> (1)
<com.android.email.AccountBackupRestore: void restoreAccountsIfNeeded(android.content.Context)> (3)
<com.android.server.PowerManagerService$4: void run()> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<com.android.internal.widget.WaveView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$2: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void checkPuk()> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeMotionWhenKeyguardShowingTq()> (1)
<com.android.server.wm.InputManager$Callbacks: void notifyLidSwitchChanged(long,boolean)> ()
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.list.StrequentContactListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.activities.ContactBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.email.activity.Welcome: void onCreate(android.os.Bundle)> (1)
<com.android.email.service.AccountService$1: void restoreAccountsIfNeeded()> (2)
<com.android.email.service.MailService: int onStartCommand(android.content.Intent,int,int)> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: void setGrabbedState(int)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (5)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.ContactsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (8)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void restoreAccountsIfNeeded()> ()
<com.android.emailcommon.service.IAccountService$Stub: void restoreAccountsIfNeeded()> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.wm.InputManager$Callbacks: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$2: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragmentForRequest()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void restoreAccountsIfNeeded()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.StrequentContactListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.StrequentContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void configureFragments(boolean)> (2)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$5: void run()> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (8)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputManager$Callbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFiltersLoaded()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureContentView(boolean,android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onAction()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (3)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFiltersLoaded()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction()> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.ContactListFilterController: void notifyContactListFilterChanged()> (3)
<com.android.contacts.list.ContactListFilterController: void notifyContacListFiltersLoaded()> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (4)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(int)> (1)
<com.android.contacts.list.ContactListFilterController: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
Permission:android.permission.READ_SYNC_STATS
87 Callers:
<android.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (3)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (3)
<com.android.contacts.ContactListEmptyView: boolean isSyncActive()> (1)
<com.android.contacts.list.ContactEntryListFragment: boolean isSyncActive()> (7)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)> ()
<com.android.contacts.ContactListEmptyView: void show(boolean,boolean,boolean,boolean,boolean,boolean,boolean)> ()
<com.android.contacts.list.ContactBrowseListFragment: boolean isSyncActive()> (2)
<com.android.contacts.list.ContactPickerFragment: boolean isSyncActive()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.JoinContactListFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.StrequentContactListFragment: boolean isSyncActive()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void prepareEmptyView()> (2)
<com.android.contacts.list.ContactPickerFragment: void prepareEmptyView()> (1)
<com.android.contacts.list.ContactEntryListFragment: void prepareEmptyView()> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void prepareEmptyView()> (2)
<com.android.contacts.list.JoinContactListFragment: void prepareEmptyView()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void prepareEmptyView()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void prepareEmptyView()> (1)
<android.content.ContentService: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> ()
<android.content.IContentService$Stub: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService: java.util.List getCurrentSyncs()> (2)
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> (4)
<android.content.ContentResolver: java.util.List getCurrentSyncs()> (3)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<com.android.settings.accounts.AccountSyncSettings: void onPrepareOptionsMenu(android.view.Menu)> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onSyncStateUpdated()> (4)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getCurrentSyncs()> (1)
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()> (1)
<com.android.settings.accounts.AccountSyncSettings: void setFeedsState()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onPrepareOptionsMenu(android.view.Menu)> (4)
<com.android.settings.SettingsPreferenceFragment: void onPrepareOptionsMenu(android.view.Menu)> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.ManageAccountsSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.accounts.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<android.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (4)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (3)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
Permission:android.permission.USE_SIP
86 Callers:
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> ()
<android.net.sip.ISipService$Stub: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.sip.SipSettings: void processActiveProfilesFromSipService()> (1)
<com.android.phone.sip.SipSettings: void retrieveSipLists()> (1)
<com.android.phone.sip.SipSettings: void access$900(com.android.phone.sip.SipSettings)> (1)
<com.android.phone.sip.SipSettings$4: void run()> (1)
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile)> ()
<android.net.sip.ISipService$Stub: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService: void open(android.net.sip.SipProfile)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> (2)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption(boolean)> (1)
<com.android.phone.SipCallOptionHandler: void access$200(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void access$800(com.android.phone.sip.SipSettings,boolean)> (1)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.phone.sip.SipSettings$3$1: void run()> (1)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> (3)
<com.android.phone.SipBroadcastReceiver$1: void run()> (1)
<com.android.phone.sip.SipEditor: void saveAndRegisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$700(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor$3: void run()> (1)
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<android.net.sip.SipManager: void close(java.lang.String)> (3)
<com.android.phone.sip.SipEditor: void unregisterProfile(java.lang.String)> (3)
<com.android.phone.sip.SipSettings$8: void run()> (1)
<com.android.phone.sip.SipEditor: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.sip.SipEditor: void deleteAndUnregisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void unregisterOldPrimaryAccount()> (1)
<com.android.phone.sip.SipEditor: void access$600(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$500(com.android.phone.sip.SipEditor)> (1)
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isOpened(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isRegistered(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> ()
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> (2)
<com.android.phone.sip.SipSettings: void addProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void access$500(com.android.phone.sip.SipSettings,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings$1: void run()> (2)
<com.android.phone.sip.SipSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (3)
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> (1)
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> ()
<com.android.internal.telephony.sip.SipPhone$SipConnection: void dial()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> (1)
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> ()
<com.android.phone.SipBroadcastReceiver: void takeCall(android.content.Intent)> (1)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
Permission:android.permission.SET_TIME_ZONE
55 Callers:
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> (3)
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> ()
<android.app.IAlarmManager$Stub: void setTimeZone(java.lang.String)> (2)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<android.app.IAlarmManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IAlarmManager: void setTimeZone(java.lang.String)> (1)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.AlarmManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.AlarmManager: void setTimeZone(java.lang.String)> (6)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void setTimezoneFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onClick(android.view.View)> (1)
<com.android.settings.DateTimeSettingsSetupWizard: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.ZonePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
Permission:android.permission.WAKE_LOCK
3606 Callers:
<com.android.server.PowerManagerService: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> (2)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> ()
<android.os.IPowerManager$Stub: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)> (2)
<com.android.server.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.PowerManager$WakeLock: void acquire()> (88)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<android.bluetooth.HeadsetBase: void acquireWakeLock()> (1)
<android.content.SyncManager$ActiveSyncContext: void <init>(android.content.SyncManager,android.content.SyncOperation,long,int)> (1)
<android.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AsyncPlayer: void acquireWakeLock()> (1)
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> (3)
<android.media.MediaPlayer: void stayAwake(boolean)> (7)
<android.net.wifi.WifiStateMachine$DriverLoadingState$1: void run()> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState$1: void run()> (1)
<android.os.PowerManager$WakeLock: void acquire(long)> (10)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void sendDisplayPinIntent(java.lang.String,int)> (1)
<com.android.bluetooth.opp.BluetoothOppObexClientSession$ClientThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void preStart()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.browser.Controller: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.vcard.ImportVCardActivity$VCardScanThread: void run()> (2)
<com.android.deskclock.AlarmAlertWakeLock: void acquireCpuWakeLock(android.content.Context)> (2)
<com.android.deskclock.AlarmInitReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AlarmReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.development.Connectivity: void onStartScreenCycle()> (1)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.exchange.ExchangeService: void acquireWakeLock(long)> (1)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void onCreate()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void acquireWakeLock()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (3)
<com.android.internal.telephony.gsm.GsmConnection: void acquireWakeLock()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.RIL: void acquireWakeLock()> (1)
<com.android.mms.transaction.SmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService: void acquireWakeLock()> (1)
<com.android.phone.PhoneApp: void requestWakeState(com.android.phone.PhoneApp$WakeState)> (5)
<com.android.phone.PhoneApp: void updateProximitySensorMode(com.android.internal.telephony.Phone$State)> (8)
<com.android.providers.calendar.CalendarProvider2: void acquireScheduleNextAlarmWakeLock()> (1)
<com.android.providers.downloads.DownloadThread: void run()> (1)
<com.android.providers.media.MediaScannerService: void scan(java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService$AlarmThread: void run()> (2)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (3)
<com.android.server.am.ActivityStack: void stopIfSleepingLocked()> (2)
<com.android.server.BackupManagerService$RunBackupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService$RunInitializeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.location.GpsLocationProvider: void addListener(int)> (1)
<com.android.server.location.GpsLocationProvider: void removeListener(int)> (1)
<com.android.server.location.GpsLocationProvider: void sendMessage(int,int,java.lang.Object)> (8)
<com.android.server.LocationManagerService: void incrementPendingBroadcasts()> (1)
<com.android.server.NotificationPlayer: void acquireWakeLock()> (1)
<com.android.server.sip.SipWakeLock: void acquire(java.lang.Object)> (5)
<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)> (1)
<com.android.server.WiredAccessoryObserver: void update(java.lang.String,int)> (1)
<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(boolean)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean)> (4)
<com.android.settings.bluetooth.DockEventReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.settings.CryptKeeper: void encryptionProgressInit()> (1)
<com.android.soundrecorder.SoundRecorder: void onStateChanged(int)> (1)
<com.android.voicedialer.VoiceDialerActivity: void acquireWakeLock(android.content.Context)> (1)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.GridLayer: void startSlideshow()> (2)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<android.content.SyncManager: void sendSyncAlarmMessage()> (1)
<android.content.SyncManager: void sendCheckAlarmsMessage()> (3)
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,java.lang.String)> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<android.content.SyncManager$SyncHandler: boolean dispatchSyncOperation(android.content.SyncOperation)> (1)
<android.media.AsyncPlayer: void enqueueLocked(android.media.AsyncPlayer$Command)> (2)
<com.android.music.AudioPreview$PreviewPlayer: void setWakeMode(android.content.Context,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void <init>(com.android.music.MediaPlaybackService)> (1)
<android.media.MediaPlayer: void access$300(android.media.MediaPlayer,boolean)> (2)
<android.media.MediaPlayer: void pause()> (6)
<android.media.MediaPlayer: void release()> (25)
<android.media.MediaPlayer: void reset()> (9)
<android.media.MediaPlayer: void start()> (16)
<android.media.MediaPlayer: void stop()> (16)
<com.android.music.AudioPreview$PreviewPlayer: void stayAwake(boolean)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<android.net.DhcpStateMachine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.SMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (6)
<com.android.internal.telephony.SMSDispatcher: void handleIccFull()> (3)
<com.android.internal.telephony.SMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (3)
<com.android.mms.transaction.PushReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.phone.BluetoothHandsfree: void expectCallStart()> (2)
<com.android.phone.BluetoothHandsfree: void expectVoiceRecognition()> (1)
<com.android.server.DevicePolicyManagerService: void wipeDataLocked(int)> (2)
<com.android.server.sip.SipWakeLock: void acquire(long)> (1)
<com.android.bluetooth.opp.BluetoothOppObexClientSession: void start(android.os.Handler)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void createServerSession(javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$500(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmReceiver: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity: void access$1300(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$1500(com.android.development.Connectivity)> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.exchange.ExchangeService: void runAwake(long)> (5)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()> (5)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeMotionWhenKeyguardShowingTq()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.cdma.CdmaCallTracker,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.gsm.GsmCallTracker,int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.gsm.GsmCallTracker,com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.RIL: void send(com.android.internal.telephony.RILRequest)> (100)
<com.android.mms.transaction.PrivilegedSmsReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void showIncomingCall()> (5)
<com.android.phone.PhoneApp: void updateWakeState()> (8)
<com.android.phone.PhoneApp: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.phone.PhoneApp: void orientationChanged(int)> (1)
<com.android.phone.PhoneApp: void setBeginningCall(boolean)> (2)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.PhoneApp: void updatePhoneState(com.android.internal.telephony.Phone$State)> (1)
<com.android.phone.PhoneUtils: void turnOnSpeaker(android.content.Context,boolean,boolean)> (8)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.providers.media.MediaScannerService: void access$300(com.android.providers.media.MediaScannerService,java.lang.String[],java.lang.String)> (1)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityStack: void checkReadyForSleepLocked()> (7)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.location.LocationProviderInterface: void addListener(int)> (1)
<com.android.server.location.LocationProviderInterface: void removeListener(int)> (1)
<com.android.server.location.GpsLocationProvider: void disable()> (1)
<com.android.server.location.GpsLocationProvider: void enableLocationTracking(boolean)> (1)
<com.android.server.location.GpsLocationProvider: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void handleUpdateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void updateLocation(android.location.Location)> (1)
<com.android.server.location.GpsLocationProvider: void updateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void xtraDownloadRequest()> (1)
<com.android.server.LocationManagerService: void access$600(com.android.server.LocationManagerService)> (2)
<com.android.server.NotificationPlayer: void enqueueLocked(com.android.server.NotificationPlayer$Command)> (2)
<com.android.server.sip.SipService$AutoRegistrationProcess: void run()> (2)
<com.android.server.sip.SipService$AutoRegistrationProcess: void start(com.android.server.sip.SipSessionGroup)> (1)
<com.android.server.sip.SipService$ConnectivityReceiver: void onChanged(java.lang.String,boolean)> (1)
<com.android.server.sip.SipService$KeepAliveProcess: void run()> (1)
<com.android.server.sip.SipService$MyExecutor: void execute(java.lang.Runnable)> (3)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<com.android.server.WiredAccessoryObserver: void updateState(java.lang.String,int)> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)> (1)
<com.android.server.wm.WindowManagerService: boolean setRotationUncheckedLocked(int,int,boolean)> (5)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(int,int)> (3)
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,int)> (2)
<com.android.settings.bluetooth.DockEventReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.CryptKeeper: void onStart()> (1)
<com.android.soundrecorder.Recorder$OnStateChangedListener: void onStateChanged(int)> (1)
<com.android.voicedialer.VoiceDialerActivity: void onStart()> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.media.HudLayer$12: void run()> (1)
<android.content.SyncManager: void access$900(android.content.SyncManager)> (1)
<android.content.SyncManager: void access$100(android.content.SyncManager)> (3)
<android.content.SyncManager: void onAccountsUpdated(android.accounts.Account[])> (2)
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> (6)
<android.content.SyncManager: void access$1100(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)> (2)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<android.bluetooth.HeadsetBase$1: void run()> (1)
<android.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> ()
<android.media.AsyncPlayer: void stop()> ()
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void access$300(android.media.MediaPlayer,boolean)> (1)
<android.webkit.HTML5Audio: void pause()> ()
<android.webkit.HTML5VideoView: void pause()> (4)
<android.widget.VideoView: void pause()> (3)
<com.android.mms.ui.SlideView: void pauseAudio()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void pause()> (4)
<com.android.music.MediaPlaybackService$MultiPlayer: void pause()> (1)
<android.media.AsyncPlayer$Thread: void run()> (2)
<android.media.AsyncPlayer: void startSound(android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void cleanupPlayer(android.media.MediaPlayer)> (1)
<android.media.Ringtone: void stop()> (6)
<android.tts.TtsService: void cleanUpPlayer()> (2)
<android.webkit.HTML5Audio: void teardown()> ()
<android.webkit.HTML5VideoView: void release()> (4)
<android.widget.VideoView: void release(boolean)> (3)
<android.widget.VideoView: void stopPlayback()> (2)
<com.android.deskclock.AlarmKlaxon$3: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.AlarmKlaxon: void stop()> (2)
<com.android.mms.ui.AudioAttachmentView: void cleanupMediaPlayer()> (1)
<com.android.mms.ui.SlideListItemView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideshowAttachmentView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.SlideView$1: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.mms.ui.SlideView: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (1)
<com.android.mms.ui.SlideView: void stopAudio()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void release()> (2)
<com.android.music.MediaPlaybackService$MultiPlayer: void release()> (1)
<com.android.music.MusicPicker: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MusicPicker: void stopMediaPlayer()> (2)
<com.android.server.NotificationPlayer$CmdThread: void run()> (2)
<com.android.server.NotificationPlayer$CreationAndCompletionThread: void run()> (2)
<com.android.soundrecorder.Recorder: void stopPlayback()> (1)
<android.webkit.HTML5Audio: void resetMediaPlayer()> (5)
<android.webkit.HTML5VideoFullScreen: void prepareForFullScreen()> (1)
<com.android.deskclock.AlarmKlaxon: void play(com.android.deskclock.Alarm)> (1)
<com.android.music.AudioPreview$PreviewPlayer: void reset()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setDataSource(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void stop()> (2)
<android.media.AudioService$AudioHandler: void playSoundEffect(int,int)> (1)
<android.media.Ringtone: void play()> (7)
<android.tts.TtsService: void processSpeechQueue()> (6)
<android.webkit.HTML5Audio: void play()> (1)
<android.webkit.HTML5VideoView: void start()> (4)
<android.widget.VideoView: void start()> (8)
<com.android.deskclock.AlarmKlaxon: void startAlarm(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void startAudio()> (1)
<com.android.mms.ui.SlideView: void startAudio()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void start()> (3)
<com.android.music.MediaPlaybackService$MultiPlayer: void start()> (1)
<com.android.music.MusicPicker: void setSelected(android.database.Cursor)> (1)
<com.android.soundrecorder.Recorder: void startPlayback()> (1)
<android.tts.TtsService: int stopAll(java.lang.String)> (2)
<android.tts.TtsService: int stop(java.lang.String)> (4)
<android.webkit.HTML5VideoView: void stopPlayback()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void stop()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatch(android.content.Intent,java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void dispatchBroadcastPdus(byte[][])> (2)
<com.android.internal.telephony.SMSDispatcher: void dispatchPdus(byte[][])> (3)
<com.android.internal.telephony.SMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (3)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[])> (4)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleIccFull()> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleIccFull()> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHandsfree: void access$5500(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHandsfree: void access$6700(com.android.phone.BluetoothHandsfree)> (1)
<com.android.server.sip.SipSessionGroup: void processRequest(javax.sip.RequestEvent)> ()
<com.android.bluetooth.opp.BluetoothOppObexSession: void start(android.os.Handler)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$700(com.android.bluetooth.opp.BluetoothOppService,javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.contacts.ContactsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (4)
<com.android.deskclock.AlarmReceiver: void access$000(com.android.deskclock.AlarmReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (3)
<com.android.exchange.EasSyncService: void sleep(long,boolean)> (2)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.exchange.ExchangeService: void startServiceThread(com.android.exchange.AbstractSyncService,com.android.emailcommon.provider.EmailContent$Mailbox)> (2)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock(int)> (3)
<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void adjustUserActivityLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$200(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void enableKeyguard(boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection checkMtFindNewRinging(com.android.internal.telephony.DriverCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dialThreeWay(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void processNextPostDialChar()> (5)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> (4)
<com.android.internal.telephony.gsm.GsmConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void processNextPostDialChar()> (4)
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void conference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getBasebandVersion(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCDMASubscription(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaSubscriptionSource(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCLIR(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCurrentCalls(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDataCallList(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getDataRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getGsmBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMSI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastDataCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getMute(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getOperator(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSignalStrength(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getVoiceRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendScreenState(boolean)> (2)
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceiveWithPrivilege(android.content.Context,android.content.Intent,boolean)> (2)
<com.android.mms.transaction.SmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onCustomRingQueryComplete()> (3)
<com.android.phone.CallNotifier: void startIncomingCallQuery(com.android.internal.telephony.Connection)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.AccelerometerListener$OrientationListener: void orientationChanged(int)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.PhoneUtils: void activateSpeakerIfDocked(com.android.internal.telephony.Phone)> (2)
<com.android.phone.PhoneUtils: void restoreSpeakerMode(android.content.Context)> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.server.am.ActivityStack: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.location.LocationProviderInterface: void disable()> (1)
<com.android.server.location.LocationProviderInterface: void enableLocationTracking(boolean)> (4)
<com.android.server.location.LocationProviderInterface: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void access$1000(com.android.server.location.GpsLocationProvider,int,android.net.NetworkInfo)> (1)
<com.android.server.location.LocationProviderInterface: void updateLocation(android.location.Location)> (1)
<com.android.server.location.LocationProviderInterface: void updateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.LocationManagerService$ProximityListener: void onLocationChanged(android.location.Location)> (2)
<com.android.server.LocationManagerService$Receiver: void incrementPendingBroadcastsLocked()> (3)
<com.android.server.NotificationPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> (1)
<com.android.server.NotificationPlayer: void stop()> (3)
<com.android.server.sip.SipService$AutoRegistrationProcess: void onRegistrationDone(android.net.sip.ISipSession,int)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void openToReceiveCalls()> (2)
<com.android.server.sip.SipService$ConnectivityReceiver: void onReceiveInternal(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask: void run()> ()
<com.android.server.sip.SipService$ConnectivityReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService$WakeupTimer: void execute(long)> (1)
<com.android.server.VibratorService: void startNextVibrationLocked()> (3)
<com.android.server.VibratorService: void vibrate(long,android.os.IBinder)> (2)
<com.android.server.WiredAccessoryObserver: void init()> (1)
<com.android.server.WiredAccessoryObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (19)
<com.android.server.wm.DragState: void endDragLw()> (4)
<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()> (2)
<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize()> (2)
<com.android.server.wm.WindowManagerService: void readForcedDisplaySizeLocked()> (1)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int)> (2)
<com.android.soundrecorder.Recorder: void signalStateChanged(int)> (4)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$7: void onStatusChanged(int)> (2)
<android.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<android.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,android.content.SyncManager$ActiveSyncContext)> (4)
<android.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)> (1)
<android.content.SyncManager: void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)> (5)
<android.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.webkit.HTML5VideoFullScreen: void pause()> (2)
<android.webkit.HTML5VideoInline: void pause()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void pause(android.webkit.HTML5VideoViewProxy)> (2)
<android.webkit.HTML5VideoView: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (7)
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.mms.ui.SlideView: void pauseVideo()> (1)
<com.android.mms.ui.SlideViewInterface: void pauseAudio()> (1)
<com.android.music.AudioPreview$2: void onAudioFocusChange(int)> (1)
<com.android.music.AudioPreview: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.music.AudioPreview: void playPauseClicked(android.view.View)> ()
<com.android.music.MediaPlaybackService: void pause()> (4)
<android.media.AsyncPlayer: void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void access$4000(android.media.AudioService$AudioHandler,android.media.MediaPlayer)> (2)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> (1)
<android.media.RingtoneManager: void stopPreviousRingtone()> (3)
<android.preference.VolumePreference$SeekBarVolumizer: void stopSample()> (4)
<com.android.internal.app.RingtonePickerActivity: void run()> (1)
<com.android.internal.app.RingtonePickerActivity: void stopAnyPlayingRingtone()> (2)
<android.tts.TtsService: void onDestroy()> (1)
<android.webkit.HTML5VideoFullScreen: void release()> (1)
<android.webkit.HTML5VideoInline: void release()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void enterFullScreenVideo(int,java.lang.String,android.webkit.HTML5VideoViewProxy,android.webkit.WebView)> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void play(java.lang.String,int,android.webkit.HTML5VideoViewProxy,android.webkit.WebChromeClient,int)> (2)
<android.widget.VideoView: void access$2100(android.widget.VideoView,boolean)> (1)
<android.widget.VideoView: void openVideo()> (3)
<android.widget.VideoView: void suspend()> (1)
<com.android.mms.ui.SlideView: void stopVideo()> (2)
<com.cooliris.media.MovieViewControl: void onDestroy()> (2)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.mms.ui.AudioAttachmentView: void stopAudio()> (4)
<com.android.mms.ui.SlideViewInterface: void setVideo(java.lang.String,android.net.Uri)> (2)
<com.android.mms.ui.SlideViewInterface: void setAudio(android.net.Uri,java.lang.String,java.util.Map)> (2)
<com.android.mms.ui.SlideViewInterface: void stopAudio()> (1)
<com.android.mms.ui.SlideView: void reset()> (2)
<com.android.music.AudioPreview: void stopPlayback()> (3)
<com.android.music.MediaPlaybackService: void onDestroy()> (1)
<com.android.music.MusicPicker: void onPause()> (2)
<com.android.server.NotificationPlayer: void startSound(com.android.server.NotificationPlayer$Command)> (1)
<com.android.soundrecorder.Recorder: void stop()> (11)
<android.webkit.HTML5Audio: boolean onError(android.media.MediaPlayer,int,int)> (1)
<android.webkit.HTML5Audio: void <init>(int)> ()
<android.webkit.HTML5Audio: void onCompletion(android.media.MediaPlayer)> (1)
<android.webkit.HTML5Audio: void setDataSource(java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void access$500(android.webkit.HTML5VideoFullScreen)> (1)
<com.android.deskclock.AlarmKlaxon: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService: void open(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void stop(boolean)> (8)
<android.preference.VolumePreference$SeekBarVolumizer: void startSample()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void playSounds(boolean)> (2)
<com.android.systemui.power.PowerUI: void showLowBatteryWarning()> (1)
<com.android.server.DockObserver: void update()> (2)
<android.tts.TtsService: boolean synthesizeToFile(java.lang.String,java.lang.String,java.util.ArrayList,java.lang.String)> (1)
<android.tts.TtsService: int playEarcon(java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int playSilence(java.lang.String,long,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int speak(java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: void access$100(android.tts.TtsService)> (3)
<android.tts.TtsService: void onCompletion(android.media.MediaPlayer)> (1)
<android.webkit.HTML5Audio: void onPrepared(android.media.MediaPlayer)> (1)
<android.webkit.HTML5VideoFullScreen: void start()> (2)
<android.webkit.HTML5VideoInline: void start()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void onPrepared()> (1)
<android.widget.VideoView$2: void onPrepared(android.media.MediaPlayer)> (1)
<android.widget.VideoView$6: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.mms.ui.SlideView: void startVideo()> (1)
<com.cooliris.media.MovieViewControl$3: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.media.MovieViewControl$4: void onClick(android.content.DialogInterface,int)> (1)
<com.cooliris.media.MovieViewControl: void <init>(android.view.View,android.content.Context,android.net.Uri)> (2)
<com.android.mms.ui.SlideViewInterface: void startAudio()> (1)
<com.android.music.AudioPreview: void onPrepared(android.media.MediaPlayer)> (2)
<com.android.music.AudioPreview: void start()> (3)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.music.MusicPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<android.tts.TtsService: int access$2200(android.tts.TtsService,java.lang.String)> (1)
<android.webkit.HTML5VideoFullScreen: void stopPlayback()> (1)
<android.webkit.HTML5VideoInline: void stopPlayback()> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchBroadcastPdus(byte[][])> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchBroadcastPdus(byte[][])> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPdus(byte[][])> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPdus(byte[][])> (2)
<com.android.internal.telephony.SMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispatchPortAddressedPdus(byte[][],int)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processCdmaWapPdu(byte[],int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$5400(com.android.phone.BluetoothHandsfree)> (3)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startObexSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.contacts.activities.ContactBrowserActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.deskclock.AlarmReceiver$1: void run()> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (2)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (6)
<com.android.exchange.EasOutboxService: void sleep(long,boolean)> (1)
<com.android.exchange.EasSyncService: void runPingLoop()> (2)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void requestSync(com.android.emailcommon.provider.EmailContent$Mailbox,int,com.android.exchange.Request)> (2)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock(int)> (9)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void takeEmergencyCallAction()> (1)
<com.android.internal.policy.impl.KeyguardViewBase: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void pokeWakelock()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleSetHidden(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1300(com.android.internal.policy.impl.KeyguardViewMediator,int)> (9)
<android.view.WindowManagerPolicy: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguardTimeout()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback: void onSimStateChanged(com.android.internal.telephony.IccCard$State)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemReady()> (1)
<android.view.WindowManagerPolicy: void enableKeyguard(boolean)> (3)
<android.view.WindowManagerPolicy: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.Connection: void cancelPostDial()> (3)
<com.android.internal.telephony.Connection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.Connection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void onConnectedInOrOut()> (3)
<com.android.internal.telephony.CallTracker: void handlePollCalls(android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$000(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void onConnectedInOrOut()> (1)
<com.android.internal.telephony.CommandsInterface: void acceptCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void conference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deactivateDataCall(int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void exitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void explicitCallTransfer(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getBasebandVersion(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCDMASubscription(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getCdmaSubscriptionSource(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getCLIR(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCurrentCalls(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDataCallList(android.os.Message)> (4)
<com.android.internal.telephony.RIL: void getPDPContextList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getDataRegistrationState(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getGsmBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMSI(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getLastCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getLastDataCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastPdpFailCause(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getMute(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getOperator(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getSignalStrength(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getVoiceRegistrationState(android.os.Message)> (7)
<com.android.internal.telephony.CommandsInterface: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void hangupConnection(int,android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void hangupForegroundResumeBackground(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void hangupWaitingOrBackground(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (11)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void queryCallWaiting(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void rejectCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportSmsMemoryStatus(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void resetRadio(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendDtmf(char,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void sendEnvelope(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void access$000(com.android.internal.telephony.RIL,boolean)> (1)
<com.android.internal.telephony.RIL: void onRadioAvailable()> (1)
<com.android.internal.telephony.CommandsInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void separateConnection(int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCallWaiting(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaSubscriptionSource(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void processUnsolicited(android.os.Parcel)> (1)
<com.android.internal.telephony.CommandsInterface: void setCLIR(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void setMute(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setRadioPower(boolean,android.os.Message)> (8)
<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setSuppServiceNotifications(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void startDtmf(char,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void stopDtmf(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.RIL: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.mms.transaction.PrivilegedSmsReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.phone.CallNotifier: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.AccelerometerListener: void setOrientation(int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.server.am.ActivityStack: void activityPaused(android.os.IBinder,boolean)> (3)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.PackageManagerService$5: void run()> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)> (1)
<com.android.server.LocationManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.location.ILocationListener$Stub$Proxy: void onLocationChanged(android.location.Location)> ()
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> (1)
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> (1)
<com.android.server.sip.SipService$SipSessionGroupExt: void onConnectivityChanged(boolean)> (1)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver: void access$1300(com.android.server.sip.SipService$ConnectivityReceiver,android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService$WakeupTimer: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<android.os.IVibratorService$Stub$Proxy: void vibrate(long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(long,android.os.IBinder)> (2)
<com.android.server.WiredAccessoryObserver: void access$100(com.android.server.WiredAccessoryObserver)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$500(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void moveAppWindowsLocked(com.android.server.wm.AppWindowToken,int,boolean)> (1)
<com.android.server.wm.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)> (2)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (3)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setWindowWallpaperPositionLocked(com.android.server.wm.WindowState,float,float,float,float)> (1)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.server.wm.WindowManagerService$3: void handleMotion(android.view.MotionEvent,android.view.InputQueue$FinishedCallback)> (1)
<com.android.server.wm.DragState: boolean notifyDropLw(float,float)> (1)
<android.view.IWindowManager$Stub$Proxy: void clearForcedDisplaySize()> ()
<android.view.IWindowManager$Stub: void clearForcedDisplaySize()> (2)
<com.android.server.wm.WindowManagerService: void systemReady()> (1)
<android.view.IWindowManager$Stub$Proxy: void setForcedDisplaySize(int,int)> ()
<android.view.IWindowManager$Stub: void setForcedDisplaySize(int,int)> (2)
<com.android.soundrecorder.Recorder: void clear()> (1)
<com.android.soundrecorder.Recorder: void delete()> (3)
<com.android.soundrecorder.Recorder: void restoreState(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void setState(int)> (4)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<android.content.ContentService: android.content.SyncManager getSyncManager()> (20)
<android.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,java.lang.String)> (2)
<android.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.content.SyncManager$6: void onServiceChanged(android.content.SyncAdapterType,boolean)> (1)
<android.content.SyncManager: void scheduleLocalSync(android.accounts.Account,java.lang.String)> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.webkit.HTML5VideoViewProxy: void pause()> ()
<android.webkit.HTML5VideoFullScreen: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (2)
<android.webkit.HTML5VideoInline: void pauseAndDispatch(android.webkit.HTML5VideoViewProxy)> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void pauseAndDispatch()> (1)
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void setBaseLayer(int)> (3)
<android.webkit.HTML5VideoView: void onPrepared(android.media.MediaPlayer)> (3)
<com.android.mms.ui.SlideViewInterface: void pauseVideo()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentAudio(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel,boolean)> (2)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<android.media.AudioService$AudioHandler$1: void onCompletion(android.media.MediaPlayer)> (1)
<android.media.AudioService$AudioHandler$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.internal.app.RingtonePickerActivity: void onClick(android.content.DialogInterface,int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void muteVolume()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void stop()> (2)
<android.preference.VolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (2)
<com.android.settings.RingerVolumePreference: void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)> (1)
<com.android.internal.app.RingtonePickerActivity: void onPause()> (2)
<com.android.internal.app.RingtonePickerActivity: void onStop()> (2)
<android.webkit.HTML5VideoViewProxy: void enterFullScreenVideo(int,java.lang.String)> (4)
<android.webkit.HTML5VideoViewProxy: void play(java.lang.String,int,int)> ()
<android.widget.VideoView$6: void surfaceDestroyed(android.view.SurfaceHolder)> (1)
<android.widget.VideoView: void access$2000(android.widget.VideoView)> (1)
<android.widget.VideoView: void resume()> (1)
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)> (1)
<com.cooliris.media.MovieViewControl: void onPause()> (2)
<com.android.mms.ui.SlideViewInterface: void stopVideo()> (1)
<com.cooliris.media.MovieView$1: void onDestroy()> (1)
<com.cooliris.media.MovieView: void onDestroy()> (1)
<com.android.mms.ui.AudioAttachmentView$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.mms.ui.AudioAttachmentView: void onPlaybackError()> (1)
<com.android.mms.ui.AudioAttachmentView: void reset()> (2)
<com.android.mms.ui.MmsThumbnailPresenter: void presentVideoThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel)> (1)
<com.android.mms.ui.SlideshowPresenter: void presentVideo(com.android.mms.ui.SlideViewInterface,com.android.mms.model.VideoModel,com.android.mms.model.RegionModel,boolean)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentAudioThumbnail(com.android.mms.ui.SlideViewInterface,com.android.mms.model.AudioModel)> (1)
<com.android.mms.ui.SlideViewInterface: void reset()> (3)
<com.android.mms.ui.ViewInterface: void reset()> ()
<com.android.music.AudioPreview: void onDestroy()> (1)
<com.android.music.AudioPreview: void onUserLeaveHint()> (1)
<com.android.server.NotificationPlayer: void access$500(com.android.server.NotificationPlayer,com.android.server.NotificationPlayer$Command)> (1)
<com.android.soundrecorder.Recorder: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.soundrecorder.Recorder: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.soundrecorder.SoundRecorder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.soundrecorder.SoundRecorder: void onPause()> (1)
<com.android.soundrecorder.SoundRecorder: void onStop()> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimeRemaining()> (1)
<android.webkit.HTML5VideoFullScreen$1: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void openCurrent()> (9)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void next(boolean)> (6)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void stop()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void changeVolumeBy(int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.systemui.power.PowerUI$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<android.tts.TtsService: boolean access$3100(android.tts.TtsService,java.lang.String,java.lang.String,java.util.ArrayList,java.lang.String)> (1)
<android.tts.TtsService: int access$2000(android.tts.TtsService,java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int access$2100(android.tts.TtsService,java.lang.String,long,int,java.util.ArrayList)> (1)
<android.tts.TtsService: int access$1900(android.tts.TtsService,java.lang.String,java.lang.String,int,java.util.ArrayList)> (1)
<android.tts.TtsService$1SilenceThread: void run()> (1)
<android.tts.TtsService$1SynthThread: void run()> (1)
<android.tts.TtsService$2SynthThread: void run()> (1)
<android.webkit.HTML5VideoViewProxy: void onPrepared(android.media.MediaPlayer)> (2)
<com.android.mms.ui.SlideViewInterface: void startVideo()> (1)
<com.cooliris.media.MovieView$1: void <init>(android.view.View,android.content.Context,android.net.Uri)> (1)
<com.cooliris.media.MovieView$1: void <init>(com.cooliris.media.MovieView,android.view.View,android.content.Context,android.net.Uri)> (1)
<com.android.music.AudioPreview$PreviewPlayer: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.music.AudioPreview: void access$700(com.android.music.AudioPreview)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<android.tts.TtsService$1: int stop(java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleBroadcastSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)> (2)
<com.android.internal.telephony.SMSDispatcher: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.bluetooth.opp.BluetoothOppTransfer: void access$600(com.android.bluetooth.opp.BluetoothOppTransfer)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (3)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,byte[])> (8)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasSyncService: org.apache.http.HttpResponse sendPing(byte[],int)> (2)
<com.android.exchange.EasSyncService: void loadAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.EasOutboxService: void runPingLoop()> (1)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.exchange.Request)> (4)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen$2: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void asyncCheckPassword()> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$UnlockPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen$TouchInput: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.KeyguardScreenCallback: void takeEmergencyCallAction()> (6)
<com.android.internal.policy.impl.LockPatternKeyguardView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<com.android.internal.policy.impl.KeyguardScreenCallback: void pokeWakelock()> (15)
<com.android.internal.policy.impl.KeyguardViewBase: void wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$800(com.android.internal.policy.impl.KeyguardViewMediator)> (4)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1600(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (13)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$700(com.android.internal.policy.impl.KeyguardViewMediator)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()> (2)
<com.android.server.wm.InputMonitor: void notifyLidSwitchChanged(long,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$12: void run()> (1)
<android.view.WindowManagerPolicy: void screenTurnedOff(int)> (1)
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void handleSimStateChange(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<android.view.WindowManagerPolicy: void systemReady()> (1)
<com.android.server.wm.WindowManagerService$1: void acquired()> (1)
<com.android.server.wm.WindowManagerService$1: void released()> (1)
<com.android.server.wm.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.InputMonitor: int interceptMotionBeforeQueueingWhenScreenOff(int)> (1)
<com.android.server.wm.InputManager$Callbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.phone.InCallScreen$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$7: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void acceptCall()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void acceptCall()> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmMmiCode: void cancel()> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void processCode()> (2)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void conference()> (1)
<com.android.internal.telephony.DataConnection: void tearDownData(java.lang.Object)> (3)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void explicitCallTransfer()> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void explicitCallTransfer()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void getCellBroadcastSmsConfig(android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void onRuimReady()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getOutgoingCallerIdDisplay(android.os.Message)> ()
<com.android.internal.telephony.CallTracker: void pollCallsWhenSafe()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getPDPContextList(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void fetchSimRecords()> (1)
<com.android.internal.telephony.gsm.SIMRecords: void fetchSimRecords()> (4)
<com.android.internal.telephony.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> (6)
<com.android.internal.telephony.ServiceStateTracker: void reRegisterNetwork(android.os.Message)> (5)
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> (6)
<com.android.internal.telephony.cat.CatService: void handleCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupAllConnections(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupAllConnections(com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmConnection)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupWaitingOrBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmCall)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupWaitingOrBackground()> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (6)
<com.android.internal.telephony.IccFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (4)
<com.android.internal.telephony.IccFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (4)
<com.android.internal.telephony.IccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (10)
<com.android.internal.telephony.IccFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (8)
<com.android.internal.telephony.IccFileHandler: void loadEFTransparent(int,android.os.Message)> (8)
<com.android.internal.telephony.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (8)
<com.android.internal.telephony.IccFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (5)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void queryAvailableBandMode(android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void queryTTYMode(android.os.Message)> (6)
<com.android.internal.telephony.cdma.CdmaCallTracker: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void rejectCall()> (2)
<com.android.internal.telephony.SMSDispatcher$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void flashAndSetGenericTrue()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void switchWaitingOrHoldingAndActive()> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> ()
<com.android.internal.telephony.cat.CatService: void eventDownload(int,int,int,byte[],boolean)> ()
<com.android.internal.telephony.cat.CatService: void sendMenuSelection(int,boolean)> (1)
<com.android.internal.telephony.RIL$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.BaseCommands: void onRadioAvailable()> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.cat.CatService: void sendTerminalResponse(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,boolean,int,com.android.internal.telephony.cat.ResponseData)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void separate(com.android.internal.telephony.cdma.CdmaConnection)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void separate(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void activateCellBroadcastSms(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void setCellBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> (6)
<com.android.internal.telephony.RIL: void processResponse(android.os.Parcel)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void syncClirSetting()> (1)
<com.android.internal.telephony.CommandsInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (3)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean setCellBroadcastActivation(boolean)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.ServiceStateTracker: void disableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void disableSingleLocationUpdate()> (3)
<com.android.internal.telephony.ServiceStateTracker: void enableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void enableSingleLocationUpdate()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> (6)
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRestartRadio()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setPowerStateToDesired()> (3)
<com.android.internal.telephony.cdma.RuimRecords: void handleRuimRefresh(int[])> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void hangupAndPowerOff()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.gsm.SIMRecords: void handleSimRefresh(int[])> (2)
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)> ()
<com.android.internal.telephony.gsm.GSMPhone: void unregisterForSuppServiceNotification(android.os.Handler)> ()
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> (6)
<com.android.internal.telephony.cdma.CdmaDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void stopDtmf()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void stopDtmf()> ()
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.IccCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()> (5)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.phone.AccelerometerListener: void onSensorEvent(double,double,double)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (3)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (5)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.ShutdownThread: void run()> (2)
<com.android.server.PowerManagerService$4: void run()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (6)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.sip.SipService: void onConnectivityChanged(java.lang.String,boolean)> (1)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<com.android.server.VibratorService$1: void run()> (1)
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(long,android.os.IBinder)> (1)
<com.android.server.WiredAccessoryObserver$BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> (7)
<com.android.server.wm.WindowManagerService: void requestAnimationLocked(long)> (5)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord)> (5)
<com.android.internal.view.BaseInputHandler: void handleMotion(android.view.MotionEvent,android.view.InputQueue$FinishedCallback)> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void clearForcedDisplaySize()> (1)
<android.view.IWindowManager: void setForcedDisplaySize(int,int)> (1)
<com.android.soundrecorder.SoundRecorder$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.soundrecorder.SoundRecorder: void onCreate(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void stopRecording()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<android.content.ContentService: void <init>(android.content.Context,boolean)> (1)
<android.content.SyncManager$6: void onServiceChanged(java.lang.Object,boolean)> (1)
<android.webkit.HTML5VideoFullScreen$2: void onCustomViewHidden()> (1)
<android.webkit.HTML5VideoViewProxy: void pauseAndDispatch()> (1)
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)> (1)
<android.webkit.HTML5VideoFullScreen: void onPrepared(android.media.MediaPlayer)> (2)
<android.webkit.HTML5VideoInline: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.mms.ui.SlideshowPresenter$5: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void presentSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<android.preference.VolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (2)
<android.preference.VolumePreference: void cleanup()> (2)
<com.android.settings.RingerVolumePreference: void cleanup()> (3)
<com.android.internal.app.AlertActivity: void onPause()> (4)
<com.android.internal.app.AlertActivity: void onStop()> (2)
<android.webkit.WebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (2)
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)> (6)
<android.webkit.WebView: boolean handleTouchEventCommon(android.view.MotionEvent,int,int,int)> (3)
<android.widget.VideoView$6: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.cooliris.media.MovieViewControl: void onResume()> (2)
<android.widget.VideoView: void setVideoURI(android.net.Uri)> (3)
<com.cooliris.media.MovieView$1: void onPause()> (1)
<com.cooliris.media.MovieView: void onPause()> (1)
<com.android.mms.ui.AudioAttachmentView: void access$000(com.android.mms.ui.AudioAttachmentView)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void presentFirstSlide(com.android.mms.ui.SlideViewInterface,com.android.mms.model.SlideModel)> (1)
<com.android.mms.ui.SlideshowPresenter: void presentRegionMedia(com.android.mms.ui.SlideViewInterface,com.android.mms.model.RegionMediaModel,boolean)> (2)
<com.android.soundrecorder.SoundRecorder: void updateTimerView()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFile(java.lang.String)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void stop()> (2)
<com.android.server.ServerThread$1: void run()> (1)
<android.tts.TtsService$1: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<android.tts.TtsService$1: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<android.tts.TtsService$1: int playSilence(java.lang.String,long,int,java.lang.String[])> (2)
<android.tts.TtsService$1: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<com.cooliris.media.MovieView: void onCreate(android.os.Bundle)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<android.speech.tts.ITts$Stub$Proxy: int stop(java.lang.String)> ()
<android.speech.tts.ITts$Stub: int stop(java.lang.String)> (2)
<com.android.internal.telephony.SMSDispatcher: void handleBroadcastSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleSms(byte[])> (2)
<com.android.internal.telephony.gsm.SIMRecords: void handleSmses(java.util.ArrayList)> (2)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,byte[])> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (2)
<com.android.exchange.EasSyncService: com.android.exchange.adapter.ProvisionParser canProvision()> (3)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (2)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvisionImpl(java.lang.String,java.lang.String,boolean)> (3)
<com.android.exchange.EasSyncService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (2)
<com.android.exchange.EasSyncService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (2)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity)> (1)
<com.android.exchange.EasOutboxService: org.apache.http.HttpResponse sendPing(byte[],int)> (1)
<com.android.exchange.EasOutboxService: void loadAttachment(com.android.exchange.PartRequest)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.EasSyncService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (2)
<com.android.exchange.ExchangeService$2: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService: void sendMessageRequest(com.android.exchange.Request)> (3)
<com.android.exchange.ExchangeService: void serviceRequest(long,long,int)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.WaveView$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)> (1)
<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)> (1)
<com.android.internal.policy.impl.LockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PatternUnlockScreen$2: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.LockScreen$SlidingTabMethods: void onTrigger(android.view.View,int)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$1: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$2: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void checkPuk()> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void onSimLockChangedResponse(boolean)> (1)
<com.android.internal.policy.impl.SimUnlockScreen: void checkPin()> (2)
<com.android.internal.policy.impl.KeyguardViewManager: boolean wakeWhenReadyTq(int)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1400(com.android.internal.policy.impl.KeyguardViewMediator,boolean)> (10)
<com.android.internal.policy.impl.KeyguardViewMediator: boolean doLidChangeTq(boolean)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean,boolean)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()> (1)
<com.android.server.wm.InputManager$Callbacks: void notifyLidSwitchChanged(long,boolean)> ()
<com.android.internal.policy.impl.KeyguardUpdateMonitor: void access$300(com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardUpdateMonitor$SimArgs)> (1)
<com.android.server.wm.InputManager$Callbacks: int interceptMotionBeforeQueueingWhenScreenOff(int)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void acceptCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void acceptCall()> ()
<com.android.internal.telephony.SMSDispatcher: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.internal.telephony.MmiCode: void cancel()> (2)
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> ()
<com.android.internal.telephony.IccCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.gsm.GSMPhone: void conference()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.DataConnection: void access$1900(com.android.internal.telephony.DataConnection,java.lang.Object)> (4)
<com.android.internal.telephony.gsm.GsmDataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.cdma.CDMAPhone$1: void run()> (1)
<com.android.internal.telephony.PhoneBase: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void explicitCallTransfer()> (1)
<com.android.internal.telephony.SMSDispatcher: void getCellBroadcastSmsConfig(android.os.Message)> (1)
<com.android.internal.telephony.CallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleFileUpdate(int)> (2)
<com.android.internal.telephony.gsm.SIMRecords: void onRefresh(boolean,int[])> (2)
<com.android.internal.telephony.gsm.SIMRecords: void onSimReady()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getPreferredNetworkType(android.os.Message)> (7)
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void reRegisterNetwork(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void doRecovery()> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,com.android.internal.telephony.ApnContext,int)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.AdnRecordLoader: void updateEF(com.android.internal.telephony.AdnRecord,int,int,int,java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.gsm.SIMFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.cat.IconLoader: void readId()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void readClut()> (1)
<com.android.internal.telephony.cat.IconLoader: void readIconData()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.AdnRecordLoader: void loadAllFromEF(int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readEmailFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readIapFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readPbrFileAndWait()> (1)
<com.android.internal.telephony.AdnRecordLoader: void loadFromEF(int,int,int,android.os.Message)> (3)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimRecords: void fetchRuimRecords()> (3)
<com.android.internal.telephony.gsm.SIMFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void getSpnFsm(boolean,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceCallForwardingFlag(int,boolean)> (2)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryCdmaRoamingPreference(android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void rejectCall()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void conference()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.SMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.BaseCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void onRadioAvailable()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartTextWithPermit(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.cat.CatService: void handleProactiveCommand(com.android.internal.telephony.cat.CommandParams)> (1)
<com.android.internal.telephony.cat.CatService: void handleRilMsg(com.android.internal.telephony.cat.RilMessage)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaConnection: void separate()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void separate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.SMSDispatcher: void activateCellBroadcastSms(int,android.os.Message)> (1)
<com.android.internal.telephony.SMSDispatcher: void setCellBroadcastConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaRoamingPreference(int,android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaSubscription(int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void access$400(com.android.internal.telephony.RIL,android.os.Parcel)> (1)
<com.android.internal.telephony.IccCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.IccCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean updateCellBroadcastConfig()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> ()
<com.android.internal.telephony.PhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void handleSimRefresh(int[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setTTYMode(int,android.os.Message)> (4)
<com.android.internal.telephony.sip.SipPhoneBase: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.DataConnection: void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void stopDtmf()> (1)
<com.android.internal.telephony.IccCard: void supplyPin2(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccCard: void supplyPin(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.IccCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaMmiCode: void processCode()> (1)
<com.android.internal.telephony.IccCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.cdma.RuimCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.phone.IccNetworkDepersonalizationPanel$3: void onClick(android.view.View)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void switchHoldingAndActive()> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.AccelerometerListener: void access$000(com.android.phone.AccelerometerListener,double,double,double)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.server.LocationManagerService: void access$800(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void _loadProvidersLocked()> (1)
<com.android.server.LocationManagerService: void access$2000(com.android.server.LocationManagerService,android.location.Location,boolean)> (1)
<com.android.server.sip.SipService: void access$1700(com.android.server.sip.SipService,java.lang.String,boolean)> (2)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.Vibrator: void vibrate(long)> (11)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)> (2)
<com.android.server.am.ActivityStack: boolean moveTaskToBackLocked(int,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)> (2)
<com.android.server.wm.WindowState: boolean showLw(boolean,boolean)> (2)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.InputHandler: void handleMotion(android.view.MotionEvent,android.view.InputQueue$FinishedCallback)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am: void runDisplaySize()> (1)
<android.content.ContentService: android.content.IContentService main(android.content.Context,boolean)> (1)
<android.webkit.WebView: void onPause()> (3)
<android.webkit.WebView: void setBaseLayer(int,android.graphics.Region,boolean,boolean)> (4)
<com.android.mms.ui.SlideshowPresenter$2: void run()> (1)
<com.android.mms.ui.SlideshowPresenter: void present()> (2)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<com.android.settings.RingerVolumePreference: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<android.preference.VolumePreference: void onActivityStop()> (2)
<android.preference.VolumePreference: void onDialogClosed(boolean)> (2)
<com.android.settings.RingerVolumePreference: void onActivityStop()> (1)
<com.android.settings.RingerVolumePreference: void onDialogClosed(boolean)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onPause()> (2)
<com.android.internal.app.NetInitiatedActivity: void onPause()> (2)
<android.webkit.WebView: void drawContent(android.graphics.Canvas)> (2)
<com.android.browser.ScrollWebView: void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)> (1)
<android.webkit.PluginFullScreenHolder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.webkit.WebTextView: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.browser.ScrollWebView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<android.webkit.WebView: boolean access$2500(android.webkit.WebView,android.view.MotionEvent,int,int,int)> (2)
<android.webkit.WebView: void handleMultiTouchInWebView(android.view.MotionEvent)> (3)
<com.android.browser.ScrollWebView: boolean handleTouchEventCommon(android.view.MotionEvent,int,int,int)> (1)
<com.cooliris.media.MovieView$1: void onResume()> (1)
<com.cooliris.media.MovieView: void onResume()> (1)
<android.widget.VideoView: void setVideoPath(java.lang.String)> ()
<com.android.mms.ui.SlideView: void setVideo(java.lang.String,android.net.Uri)> (1)
<com.android.mms.ui.AudioAttachmentView$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.mms.ui.MmsThumbnailPresenter: void present()> (1)
<com.android.mms.ui.SlideshowPresenter$4: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$000(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void updateUi()> (5)
<com.android.music.IMediaPlaybackService: void openFile(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService: void access$1500(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void stop()> ()
<com.android.music.IMediaPlaybackService$Stub: void stop()> (2)
<android.speech.tts.ITts$Stub$Proxy: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> ()
<android.speech.tts.ITts$Stub: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<android.speech.tts.ITts$Stub$Proxy: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<android.speech.tts.ITts$Stub$Proxy: int playSilence(java.lang.String,long,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int playSilence(java.lang.String,long,int,java.lang.String[])> (2)
<android.speech.tts.ITts$Stub$Proxy: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> ()
<android.speech.tts.ITts$Stub: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (2)
<com.android.music.IMediaPlaybackService: void play()> (4)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<android.speech.tts.ITts: int stop(java.lang.String)> (1)
<android.speech.tts.ITts$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void handleSms(byte[])> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void handleSmses(java.util.ArrayList)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.exchange.EasOutboxService: android.os.Bundle tryAutodiscover(java.lang.String,java.lang.String)> (1)
<com.android.exchange.ExchangeService$2: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.AbstractSyncService: android.os.Bundle validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.EasOutboxService: android.os.Bundle validateAccount(java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.adapter.ProvisionParser canProvision()> (1)
<com.android.exchange.EasSyncService: boolean tryProvision()> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvisionImpl(java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvision(java.lang.String,java.lang.String)> (3)
<com.android.exchange.EasSyncService: void acknowledgeRemoteWipe(java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (1)
<com.android.exchange.EasOutboxService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.exchange.EasOutboxService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void startSync(long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void loadAttachment(long,boolean)> (2)
<com.android.exchange.ExchangeService$2: void moveMessage(long,long)> (2)
<com.android.exchange.ExchangeService$2: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,int)> (4)
<com.android.internal.widget.WaveView: void setGrabbedState(int)> (1)
<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)> (1)
<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void onSimLockChangedResponse(boolean)> (2)
<com.android.internal.policy.impl.SimUnlockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)> (14)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDoneDrawing()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurnedOn()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void acceptCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleInCallMmiCommands(java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.phone.PhoneUtils$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.PhoneUtils: boolean cancelMmiCode(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.cdma.RuimCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.phone.ChangeIccPinScreen$2: void onClick(android.view.View)> (1)
<com.android.phone.FdnSetting: void updatePINChangeState(boolean)> (1)
<com.android.internal.telephony.cdma.RuimCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.settings.IccLockSettings: void tryChangePin()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: void access$1900(com.android.internal.telephony.DataConnection,java.lang.Object)> (1)
<com.android.internal.telephony.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void access$1900(com.android.internal.telephony.DataConnection,java.lang.Object)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(int,int,byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.Phone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.sip.SipPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleEctIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getCellBroadcastSmsConfig(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void handleFileUpdate(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onRefresh(boolean,int[])> (2)
<com.android.internal.telephony.IccRecords: void onRefresh(boolean,int[])> ()
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onSimReady()> (1)
<com.android.internal.telephony.IccCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (3)
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.phone.Settings$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Settings: void onResume()> (3)
<com.android.phone.Use2GOnlyCheckBoxPreference$MyHandler: void handleSetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.settings.RadioInfo: void onCreate(android.os.Bundle)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,com.android.internal.telephony.ApnContext,int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getEnhancedVoicePrivacy(android.os.Message)> (3)
<com.android.internal.telephony.sip.SipPhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> (1)
<com.android.settings.RadioInfo: void refreshSmsc()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (3)
<com.android.internal.telephony.Connection: void hangup()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (2)
<com.android.internal.telephony.Call: void hangup()> (6)
<com.android.internal.telephony.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.cat.IconLoader: void startLoadingIcon(int)> (3)
<com.android.internal.telephony.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> (2)
<com.android.internal.telephony.cdma.RuimRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void getSpnFsm(boolean,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setVoiceCallForwardingFlag(int,boolean)> (2)
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)> (6)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.IccRecords: void setVoiceMessageWaiting(int,int)> (3)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.settings.BandMode: void loadBandList()> (1)
<com.android.internal.telephony.PhoneProxy: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleSetCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.internal.telephony.PhoneProxy: void queryTTYMode(android.os.Message)> (1)
<com.android.phone.PhoneApp: void handleSetTTYModeResponse(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.RIL: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (6)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.Connection: void separate()> (1)
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> (1)
<com.android.settings.BandMode$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void activateCellBroadcastSms(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void resetCdmaRoamingModeToDefault()> (1)
<com.android.phone.CdmaSystemSelectListPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.phone.CdmaSubscriptionListPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.telephony.RIL$RILReceiver: void run()> (1)
<com.android.internal.telephony.cdma.RuimCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.phone.EnableFdnScreen: void enableFdn()> (1)
<com.android.phone.FdnSetting: void toggleFDNEnable(boolean)> (1)
<com.android.internal.telephony.cdma.RuimCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.phone.EnableIccPinScreen: void enableIccPin()> (1)
<com.android.settings.IccLockSettings: void tryChangeIccLockState()> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void disableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void updateServiceLocation()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updateServiceLocation()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.gsm.SIMRecords: void handleEfCspData(byte[])> (2)
<com.android.internal.telephony.Phone: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.phone.Settings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.Settings$MyHandler: void resetNetworkModeToDefault()> (1)
<com.android.phone.Use2GOnlyCheckBoxPreference: void onClick()> (2)
<com.android.settings.RadioInfo$19: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.DataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.DataConnectionTracker: void restartRadio()> ()
<com.android.internal.telephony.ServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (4)
<com.android.internal.telephony.ServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.DataConnectionTracker)> (4)
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> (3)
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.settings.RadioInfo$17: void onClick(android.view.View)> (1)
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.internal.telephony.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.phone.PhoneInterfaceManager$UnlockSim: boolean unlockSim(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.RuimCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.SimCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(int,byte[],byte[])> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(int,byte[],byte[])> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.AccelerometerListener$1: void onSensorChanged(android.hardware.SensorEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.server.LocationManagerService$SettingsObserver: void update(java.util.Observable,java.lang.Object)> ()
<com.android.server.LocationManagerService: void loadProvidersLocked()> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask: void realRun()> (1)
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> (3)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.internal.app.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (5)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (3)
<com.android.phone.Ringer$VibratorThread: void run()> (2)
<com.android.stk.ToneDialog: void onCreate(android.os.Bundle)> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void vibrate()> (2)
<com.android.voicedialer.VoiceDialerActivity: int playSound(int)> (1)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (9)
<android.view.IWindowManager: void prepareAppTransition(int,boolean)> ()
<com.android.server.am.ActivityStack: void moveHomeToFrontLocked()> (2)
<com.android.server.wm.WindowState: boolean hideLw(boolean)> (1)
<com.android.server.wm.WindowState: boolean showLw(boolean)> (1)
<android.view.InputQueue: void dispatchMotionEvent(android.view.InputHandler,android.view.MotionEvent,long)> ()
<com.android.commands.am.Am: void run(java.lang.String[])> (1)
<android.webkit.WebViewFragment: void onPause()> (1)
<com.android.browser.ScrollWebView: void onPause()> (1)
<com.android.browser.Tab: void pause()> (2)
<android.webkit.WebView: void clearView()> (2)
<com.android.browser.ScrollWebView: void setBaseLayer(int,android.graphics.Region,boolean,boolean)> (1)
<com.android.mms.ui.Presenter: void present()> (3)
<com.android.mms.ui.SlideEditorActivity: void showCurrentSlide()> (3)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<android.webkit.WebView: void onDraw(android.graphics.Canvas)> (4)
<com.android.browser.ScrollWebView: void drawContent(android.graphics.Canvas)> (1)
<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<android.webkit.WebView$TouchEventQueue: void handleQueuedMotionEvent(android.view.MotionEvent)> (2)
<com.android.browser.ScrollWebView: boolean access$2500(android.webkit.WebView,android.view.MotionEvent,int,int,int)> (1)
<android.webkit.WebView$TouchEventQueue: void handleQueuedTouchEventData(android.webkit.WebViewCore$TouchEventData)> (2)
<com.android.browser.ScrollWebView: void handleMultiTouchInWebView(android.view.MotionEvent)> (1)
<com.android.soundrecorder.SoundRecorder$1: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$100(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void stop()> (2)
<android.speech.tts.ITts: boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (1)
<android.speech.tts.ITts: int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])> (1)
<android.speech.tts.ITts: int playSilence(java.lang.String,long,int,java.lang.String[])> (1)
<android.speech.tts.ITts: int speak(java.lang.String,java.lang.String,int,java.lang.String[])> (1)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<android.speech.tts.TextToSpeech: int stop()> (1)
<android.tts.TtsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.AbstractSyncService: android.os.Bundle validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (3)
<com.android.exchange.EasOutboxService: boolean tryProvision()> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvision(java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void acknowledgeRemoteWipe(java.lang.String)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void startSync(long,boolean)> (3)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(long,boolean)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void moveMessage(long,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void moveMessage(long,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void handleReceive(android.content.Context)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk$2: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$1: void run()> (1)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin$2: void run()> (1)
<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewManager$KeyguardViewHost: void dispatchDraw(android.graphics.Canvas)> (3)
<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<android.view.WindowManagerPolicy: void screenTurnedOn()> (1)
<com.android.phone.FdnSetting: void onPinEntered(com.android.phone.EditPinPreference,boolean)> (1)
<com.android.settings.IccLockSettings: void onPinEntered(com.android.settings.EditPinPreference,boolean)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneProxy: void exitEmergencyCallbackMode()> (1)
<com.android.phone.EmergencyCallbackModeExitDialog$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getCellBroadcastSmsConfig(android.os.Message)> (1)
<com.android.internal.telephony.cdma.RuimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.gsm.SimCard: void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)> (1)
<com.android.internal.telephony.IccCard: void getIccCardStatusDone(android.os.AsyncResult)> (3)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference$MyHandler: void handleSetVPResponse(android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.settings.RadioInfo: void access$3400(com.android.settings.RadioInfo)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (4)
<com.android.internal.telephony.sip.SipPhone$SipCall: void hangup()> (2)
<com.android.phone.PhoneUtils: void hangup(com.android.internal.telephony.Connection)> (2)
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)> (1)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.CallManager: void hangupForegroundResumeBackground(com.android.internal.telephony.Call)> (1)
<com.android.internal.telephony.Call: void hangupIfAlive()> (4)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.Call)> (4)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.IccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.cat.IconLoader: void loadIcon(int,android.os.Message)> (8)
<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)> (2)
<com.android.internal.telephony.cat.IconLoader: void postIcon()> (3)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readAdnFileAndWait(int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf()> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf()> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf()> (1)
<com.android.internal.telephony.cdma.RuimRecords: void setVoiceCallForwardingFlag(int,boolean)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void onQueryCfComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void updateMessageWaitingIndicator(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void updateMessageWaitingIndicator(int)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void updateMessageWaitingIndicator(boolean)> (1)
<com.android.settings.BandMode: void onCreate(android.os.Bundle)> (1)
<com.android.phone.CdmaSystemSelectListPreference: void <init>(android.content.Context)> (3)
<com.android.phone.PhoneApp: void access$1000(com.android.phone.PhoneApp,android.os.Message)> (1)
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)> (4)
<com.android.internal.telephony.RIL: void switchToRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void <init>()> ()
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void shutdown()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.phone.PhoneUtils: void separateCall(com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void activateCellBroadcastSms(int,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCellBroadcastSmsConfig(int[],android.os.Message)> (1)
<com.android.phone.CdmaSystemSelectListPreference$MyHandler: void handleQueryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.phone.EnableFdnScreen: void access$300(com.android.phone.EnableFdnScreen)> (1)
<com.android.phone.EnableIccPinScreen: void access$300(com.android.phone.EnableIccPinScreen)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateServiceLocation()> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void handleEfCspData(byte[])> (1)
<com.android.internal.telephony.PhoneProxy: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.phone.NetworkSetting: void selectNetworkAutomatic()> (1)
<com.android.phone.Settings$MyHandler: void handleGetPreferredNetworkTypeResponse(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void onClick()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.DataConnectionTracker)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.DataConnectionTracker)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void restartRadio()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.DataConnectionTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)> (2)
<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean handlePinMmi(java.lang.String)> (1)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.server.LocationManagerService: void loadProviders()> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask: void access$1800(com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask)> (1)
<com.android.phone.SipBroadcastReceiver$1: void run()> (1)
<com.android.phone.sip.SipEditor: void saveAndRegisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void handleSipReceiveCallsOption(boolean)> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (1)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<com.android.launcher2.DragController: void startDrag(android.graphics.Bitmap,int,int,com.android.launcher2.DragSource,java.lang.Object,int)> (3)
<com.android.launcher2.DragController: void startDrag(android.view.View,android.graphics.Bitmap,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (2)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int,android.graphics.Rect)> (1)
<com.android.phone.Ringer: void ring()> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar$6: void run()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar$7: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity: int access$600(com.android.voicedialer.VoiceDialerActivity,int)> (4)
<com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)> (1)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (7)
<com.android.providers.settings.SettingsHelper: void setLocaleData(byte[])> (1)
<com.android.server.UiModeManagerService: void updateConfigurationLocked(boolean)> (2)
<com.android.server.wm.WindowManagerService: void sendNewConfiguration()> (11)
<com.android.settings.Display: void onClick(android.view.View)> (1)
<com.android.spare_parts.SpareParts: void writeFontSizePreference(java.lang.Object)> (1)
<com.android.server.am.ActivityStack: void moveHomeToFrontFromLaunchLocked(int)> (1)
<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)> (1)
<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)> (1)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.browser.Tab: void putInBackground()> (4)
<com.android.browser.ScrollWebView: void clearView()> (1)
<com.android.email.activity.MessageViewFragmentBase: void resetView()> (7)
<com.android.mms.ui.AttachmentEditor: boolean update(com.android.mms.data.WorkingMessage)> (2)
<com.android.mms.ui.MessageListItem: void bindCommonMessage(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View createViewFromResource(int,android.view.View,int)> (1)
<com.android.mms.ui.SlideEditorActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.SlideEditorActivity: void access$400(com.android.mms.ui.SlideEditorActivity)> (3)
<com.android.mms.ui.SlideEditorActivity: void onCreate(android.os.Bundle)> (1)
<com.android.music.MediaPlaybackActivity: void access$800(com.android.music.MediaPlaybackActivity)> (1)
<com.android.browser.ScrollWebView: void onDraw(android.graphics.Canvas)> (4)
<com.android.browser.ScrollWebView: boolean dispatchKeyEvent(android.view.KeyEvent)> (4)
<android.webkit.WebView$TouchEventQueue: void enqueueTouchEvent(android.view.MotionEvent)> (1)
<android.webkit.WebView$TouchEventQueue: void handleQueuedTouch(android.webkit.WebView$QueuedTouch)> (2)
<android.webkit.WebView$TouchEventQueue: boolean enqueueTouchEvent(android.webkit.WebViewCore$TouchEventData)> (3)
<com.android.music.MediaPlaybackActivity: void access$1100(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackActivity$8: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void scanForward(int,long)> (3)
<com.android.music.MediaPlaybackActivity: void scanBackward(int,long)> (3)
<com.android.music.TrackBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MediaPickerActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)> ()
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)> (7)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int,boolean)> (3)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int)> (7)
<com.android.music.MusicUtils: void playPlaylist(android.content.Context,long)> (2)
<com.android.music.MusicUtils: void addToCurrentPlaylist(android.content.Context,long[])> (3)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<com.android.music.MusicBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void togglePartyShuffle()> (5)
<com.android.voicedialer.VoiceDialerActivity: void onStop()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.emailcommon.service.IEmailService: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validate(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean,android.content.Context)> (1)
<com.android.exchange.ExchangeService$2: android.os.Bundle validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.emailcommon.service.IEmailService: void loadAttachment(long,boolean)> (1)
<com.android.emailcommon.service.IEmailService: void moveMessage(long,long)> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver: void access$000(com.android.exchange.EmailSyncAlarmReceiver,android.content.Context)> (1)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToLockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void goToUnlockScreen()> (1)
<com.android.internal.policy.impl.LockPatternKeyguardView$2: void keyguardDone(boolean)> (2)
<com.android.internal.policy.impl.LockPatternKeyguardView: void verifyUnlock()> (1)
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.WindowManagerPolicy: boolean interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.phone.EditPinPreference$OnPinEnteredListener: void onPinEntered(com.android.phone.EditPinPreference,boolean)> (1)
<com.android.settings.EditPinPreference$OnPinEnteredListener: void onPinEntered(com.android.settings.EditPinPreference,boolean)> (1)
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.internal.telephony.cdma.RuimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void getIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.IccCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (3)
<com.android.phone.Use2GOnlyCheckBoxPreference: void <init>(android.content.Context)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.settings.RadioInfo$18: void onClick(android.view.View)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: void rejectCall()> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaitingReject()> (3)
<com.android.phone.ManageConferenceUtils: void endConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.gsm.GsmCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.sip.SipCallBase: void hangupIfAlive()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: void hangupIfAlive()> (2)
<com.android.phone.PhoneUtils: boolean hangupActiveCall(com.android.internal.telephony.Call)> (3)
<com.android.phone.PhoneUtils: boolean hangup(com.android.internal.telephony.CallManager)> (6)
<com.android.phone.PhoneUtils: boolean hangupHoldingCall(com.android.internal.telephony.Call)> (3)
<com.android.phone.PhoneUtils: boolean hangupRingingCall(com.android.internal.telephony.Call)> (7)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processDisplayText(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processEventNotify(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processGetInkey(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processGetInput(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processLaunchBrowser(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processPlayTone(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSelectItem(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSetUpIdleModeText(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSetupCall(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void refreshCache()> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateMessageWaitingIndicator(boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateMessageWaitingIndicator(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void sendShortDtmfToNetwork(char)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.test.SimulatedRadioControl: void shutdown()> ()
<com.android.phone.ManageConferenceUtils: void separateConferenceConnection(int,com.android.internal.telephony.Connection)> (1)
<com.android.phone.EnableFdnScreen$3: void onClick(android.view.View)> (1)
<com.android.phone.EnableIccPinScreen$3: void onClick(android.view.View)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcast(int)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcast(int)> (1)
<com.android.phone.NetworkSetting: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> ()
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPin(java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean supplyPin(java.lang.String)> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: boolean supplyPuk(java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.ITelephony$Stub: boolean supplyPuk(java.lang.String,java.lang.String)> (2)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.server.LocationManagerService: void initialize()> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask$1: void run()> (1)
<com.android.phone.sip.SipEditor: void access$700(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipSettings: void access$800(com.android.phone.sip.SipSettings,boolean)> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (1)
<android.view.WindowManagerPolicy: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$000(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.launcher2.AllApps3D: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.CustomizePagedView: boolean beginDragging(android.view.View)> (1)
<com.android.launcher2.Workspace: void startDrag(com.android.launcher2.CellLayout$CellInfo)> (1)
<com.android.launcher2.AllAppsPagedView: boolean beginDragging(android.view.View)> (1)
<com.android.launcher2.DragController: void startDrag(android.view.View,com.android.launcher2.DragSource,java.lang.Object,int)> (2)
<com.android.voicedialer.VoiceDialerActivity$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient$2: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$CommandRecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.voicedialer.VoiceDialerActivity$ErrorRunnable: void run()> (1)
<com.android.settings.LocalePicker: void updateLocale(java.util.Locale)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void setLocaleFromCsim()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.MccTable: void setLocaleFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)> (1)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.providers.settings.SettingsBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.spare_parts.SpareParts: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int finishAnimationLw()> (1)
<com.android.browser.BaseUi: void showComboView(boolean,android.os.Bundle)> (3)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean,java.lang.String,java.lang.String,boolean)> (5)
<com.android.email.activity.MessageFileViewFragment: void resetView()> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.String[])> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.activity.MessageViewFragmentBase: void clearContent()> (3)
<com.android.email.activity.MessageViewFragmentBase: void loadMessageIfResumed()> (3)
<com.android.email.activity.MessageViewFragment: void resetView()> (1)
<com.android.mms.ui.ComposeMessageActivity: void drawTopPanel()> (5)
<com.android.mms.ui.ComposeMessageActivity: void onRestart()> (1)
<com.android.mms.ui.MessageListItem: void bind(com.android.mms.ui.MessageListAdapter$AvatarCache,com.android.mms.ui.MessageItem)> (2)
<com.android.mms.ui.SlideshowEditActivity$SlideListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mms.ui.SlideEditorActivity$2: void onClick(android.view.View)> (1)
<com.android.mms.ui.SlideEditorActivity$6: void onClick(android.view.View)> (1)
<com.android.mms.ui.SlideEditorActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$6: void onClick(android.view.View)> (1)
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> (6)
<android.webkit.WebView$TouchEventQueue: void runNextQueuedEvents()> (2)
<android.webkit.WebView$TouchEventQueue: void runQueuedAndPreQueuedEvents()> (2)
<com.android.music.MediaPlaybackActivity$11: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void deleteTracks(android.content.Context,long[])> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void makeNowPlayingCursor()> (2)
<com.android.music.MusicUtils: void clearQueue()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean removeItem(int)> (2)
<com.android.music.MediaPlaybackActivity: void access$1000(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void access$900(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.settings.TextToSpeechSettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.voicedialer.VoiceDialerActivity$ChoiceRecognizerClient: void onRecognitionSuccess(android.content.Intent[])> (1)
<com.android.voicedialer.VoiceDialerActivity$GreetingRunnable: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity: void performChoice()> (1)
<com.android.voicedialer.VoiceDialerActivity: void speakChoices()> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int)> (2)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor)> (1)
<com.android.music.MusicUtils: void shuffleAll(android.content.Context,android.database.Cursor)> (3)
<com.android.music.AlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.PlaylistBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: void playPodcasts()> (2)
<com.android.music.PlaylistBrowserActivity: void playRecentlyAdded()> (2)
<com.android.music.QueryBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.QueryBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.music.MediaPlaybackActivity: void access$700(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$600(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.AlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.ArtistAlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.music.TrackBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.emailcommon.service.EmailServiceProxy$5: void run()> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.Controller: void sendMessage(long,long)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$5: void run()> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$11: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$10: void run()> (1)
<com.android.email.Controller: void sendMeetingResponse(long,int)> (1)
<com.android.exchange.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.EmailSyncAlarmReceiver$1: void run()> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToLockScreen()> (5)
<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()> (8)
<com.android.internal.policy.impl.KeyguardScreenCallback: void keyguardDone(boolean)> (4)
<com.android.internal.policy.impl.KeyguardViewBase: void verifyUnlock()> (1)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<com.android.server.wm.InputMonitor: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.phone.EditPinPreference: void onDialogClosed(boolean)> (2)
<com.android.settings.EditPinPreference: void onDialogClosed(boolean)> (2)
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.cdma.RuimCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.SimCard: void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)> (1)
<com.android.phone.CdmaVoicePrivacyCheckBoxPreference: void <init>(android.content.Context)> (2)
<com.android.internal.telephony.sip.SipPhone: void rejectCall()> ()
<com.android.phone.CallNotifier: void sendCdmaCallWaitingReject()> (1)
<com.android.phone.ManageConferenceUtils$1: void onClick(android.view.View)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.PhoneUtils: boolean hangupRingingAndActive(com.android.internal.telephony.Phone)> (1)
<com.android.phone.InCallScreen: void internalHangup()> (2)
<com.android.phone.InCallScreen: void internalHangupRingingCall()> (3)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: void make(com.android.internal.telephony.cat.BerTlv)> (1)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getAllMessagesFromIcc()> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void handleBurstDtmfConfirmation()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void startTone(char)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.phone.ManageConferenceUtils$2: void onClick(android.view.View)> (1)
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> ()
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setRadioPower(boolean)> (1)
<com.android.internal.telephony.ITelephony: boolean supplyPin(java.lang.String)> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephony: boolean supplyPuk(java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.server.LocationManagerService: void run()> (1)
<com.android.phone.sip.SipEditor$3: void run()> (1)
<com.android.phone.sip.SipSettings$3$1: void run()> (1)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean beginDragging(android.view.View)> (4)
<com.android.launcher2.Launcher: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.AllApps2D: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.launcher2.Folder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (2)
<com.android.voicedialer.RecognizerClient: void onMicrophoneStart(java.io.InputStream)> (1)
<com.android.settings.LocalePicker: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSystemLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<android.view.WindowManagerPolicy: int finishAnimationLw()> (1)
<com.android.browser.PhoneUi: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.UI: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.XLargeUi: void showComboView(boolean,android.os.Bundle)> (1)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabAndShow(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData,boolean,java.lang.String)> (4)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.Tab,java.lang.String,boolean)> (4)
<com.android.browser.Controller: void start(android.os.Bundle,android.content.Intent,int,boolean)> (1)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> (1)
<com.android.email.Controller$Result: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (12)
<com.android.email.activity.MessageViewFragmentBase$LoadBodyTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageViewFragmentBase$LoadMessageTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageFileViewFragment: void clearContent()> (1)
<com.android.email.activity.MessageViewFragmentBase: void onDestroy()> (3)
<com.android.email.activity.MessageViewFragment: void clearContent()> (2)
<com.android.email.activity.MessageFileViewFragment: void loadMessageIfResumed()> (2)
<com.android.email.activity.MessageViewFragmentBase: void onResume()> (3)
<com.android.email.activity.MessageViewFragment: void loadMessageIfResumed()> (2)
<com.android.mms.ui.ComposeMessageActivity: void access$4000(com.android.mms.ui.ComposeMessageActivity)> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void initialize(android.os.Bundle,long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.mms.ui.MessageListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter: void notifyImageLoaded(java.lang.String)> (1)
<android.webkit.WebTextView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView: boolean textFieldDrag(android.view.MotionEvent)> (2)
<com.android.browser.ScrollWebView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.webkit.WebView$TouchEventQueue: boolean dropStaleGestures(android.view.MotionEvent,long)> (2)
<android.webkit.WebView$TouchEventQueue: void ignoreCurrentlyMissingEvents()> (1)
<com.android.music.DeleteItems$2: void onClick(android.view.View)> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean requery()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void <init>(com.android.music.TrackBrowserActivity,com.android.music.IMediaPlaybackService,java.lang.String[])> (2)
<com.android.music.TrackBrowserActivity: void removeItem()> (1)
<com.android.music.TrackBrowserActivity: void removePlaylistItem(int)> (2)
<com.android.music.MediaPlaybackActivity$10: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.MediaPlaybackActivity$9: void onRepeat(android.view.View,long,int)> (1)
<com.android.settings.SettingsPreferenceFragment: void onActivityResult(int,int,android.content.Intent)> (4)
<com.android.voicedialer.RecognizerClient: void onRecognitionSuccess(android.content.Intent[])> (2)
<com.android.voicedialer.VoiceDialerActivity: void access$2700(com.android.voicedialer.VoiceDialerActivity)> (2)
<com.android.voicedialer.VoiceDialerActivity: void waitForChoice()> (1)
<com.android.music.PlaylistBrowserActivity: void access$100(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.PlaylistBrowserActivity: void access$000(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.MediaPlaybackActivity$5: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$4: void onClick(android.view.View)> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,boolean,boolean)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.MessageViewFragment: void onRespondToInvite(int,int)> (1)
<com.android.internal.policy.impl.AccountUnlockScreen: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.LockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.LockScreen$WaveViewMethods$1: void run()> (1)
<com.android.internal.policy.impl.SimPukUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.SimUnlockScreen: void updateConfiguration()> (2)
<com.android.internal.policy.impl.AccountUnlockScreen$1: void run()> (1)
<com.android.internal.policy.impl.PasswordUnlockScreen: void verifyPasswordAndUnlock()> (1)
<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()> (1)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<com.android.server.wm.InputManager$Callbacks: boolean interceptKeyBeforeDispatching(com.android.server.wm.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: boolean decodeMessageParams(com.android.internal.telephony.cat.RilMessage)> (1)
<com.android.internal.telephony.IccProvider: java.util.ArrayList loadFromEf(int)> (2)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void processDtmf(char)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (5)
<com.android.internal.policy.impl.SimUnlockScreen$CheckSimPin: void run()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.policy.impl.SimPukUnlockScreen$CheckSimPuk: void run()> (2)
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onLongClick(android.view.View)> (3)
<com.android.launcher2.PagedViewWithDraggableItems: void determineDraggingStart(android.view.MotionEvent)> (3)
<com.android.launcher2.UserFolder: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.voicedialer.RecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.internal.app.LocalePicker$LocaleSelectionListener: void onLocaleSelected(java.util.Locale)> (1)
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onRecordLoaded()> (3)
<com.android.internal.telephony.gsm.SIMRecords: void onAllRecordsLoaded()> (3)
<com.android.internal.telephony.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.browser.Controller: void bookmarksOrHistoryPicker(boolean)> (6)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (8)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,int,boolean,boolean)> (1)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,java.lang.String,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (3)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTabAndShow(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData,boolean,java.lang.String)> (1)
<com.android.browser.Controller$6: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: void onUrlSelected(java.lang.String,boolean)> (2)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,int,boolean)> (1)
<com.android.email.activity.AccountFolderList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.AccountFolderListFragment$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MailboxList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageList$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.Controller$LegacyListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$2: void run()> (1)
<com.android.email.Controller: void loadMessageForView(long)> (1)
<com.android.email.RefreshManager$ControllerResult: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.service.MailService$ControllerResults: void loadMessageForViewCallback(com.android.emailcommon.mail.MessagingException,long,long,int)> (1)
<com.android.email.activity.MessageFileViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageViewFragment: void onDestroy()> (2)
<com.android.email.activity.MessageListXLFragmentManager: void onMessageViewClosed()> (1)
<com.android.email.activity.MessageFileViewFragment: void openMessage(android.net.Uri)> (1)
<com.android.email.activity.MessageFileViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void onResume()> (2)
<com.android.email.activity.MessageViewFragment: void openMessage(long)> (2)
<com.android.mms.ui.ComposeMessageActivity$14: void run()> (1)
<com.android.mms.ui.ComposeMessageActivity: void editMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.browser.ScrollWebView: boolean textFieldDrag(android.view.MotionEvent)> (1)
<android.webkit.WebView: void cancelWebCoreTouchEvent(int,int,boolean)> (3)
<com.android.music.TrackBrowserActivity$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor getTrackCursor(com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (3)
<com.android.music.TrackBrowserActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.music.TrackBrowserActivity: void access$700(com.android.music.TrackBrowserActivity,int)> (1)
<com.android.music.RepeatingImageButton$RepeatListener: void onRepeat(android.view.View,long,int)> (1)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.settings.SecuritySettings: void onActivityResult(int,int,android.content.Intent)> (3)
<com.android.voicedialer.CommandRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.voicedialer.VoiceDialerActivity: void access$2800(com.android.voicedialer.VoiceDialerActivity)> (2)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.email.mail.store.ExchangeStore$ExchangeTransport: android.os.Bundle checkSettings(java.net.URI)> (1)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (2)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.activity.MessageViewFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.internal.policy.impl.LockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.LockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimPukUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onAttachedToWindow()> (3)
<com.android.internal.policy.impl.SimUnlockScreen: void onConfigurationChanged(android.content.res.Configuration)> (3)
<com.android.internal.policy.impl.PasswordUnlockScreen: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (2)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: boolean access$200(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessage)> (1)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void access$000(com.android.phone.DTMFTwelveKeyDialer,char)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.policy.impl.SimUnlockScreen$1: void run()> (2)
<com.android.internal.policy.impl.SimPukUnlockScreen$2: void run()> (2)
<com.android.launcher2.AllAppsPagedView: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.CustomizePagedView: boolean onLongClick(android.view.View)> (1)
<com.android.launcher2.AllAppsPagedView: void determineDraggingStart(android.view.MotionEvent)> (1)
<com.android.launcher2.CustomizePagedView: void determineDraggingStart(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: void handleTouchEvent(android.view.MotionEvent)> (4)
<com.android.voicedialer.CommandRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.voicedialer.PhoneTypeChoiceRecognizerEngine: void recognize(com.android.voicedialer.RecognizerClient,android.app.Activity,java.io.File,int)> (2)
<com.android.internal.app.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.internal.telephony.gsm.SIMRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.IccRecords: void onRecordLoaded()> ()
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.browser.Controller: boolean onKeyLongPress(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: void bookmarksOrHistoryPicker(boolean)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void closeEmptyChildTab()> (2)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: boolean switchToTab(int)> (9)
<com.android.browser.Controller: void removeActiveTabsPage(boolean)> (1)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActiveTabsPage$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.BookmarksHistoryCallbacks: void onUrlSelected(java.lang.String,boolean)> (2)
<com.android.browser.UiController: void onUrlSelected(java.lang.String,boolean)> (4)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller$2: void run()> (1)
<com.android.email.MessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (1)
<com.android.email.MessagingListener: void loadMessageForViewFinished(long)> (1)
<com.android.email.MessagingListener: void loadMessageForViewStarted(long)> (1)
<com.android.email.activity.MessageViewFragmentBase: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (3)
<com.android.email.activity.MessageListXLFragmentManager: void access$600(com.android.email.activity.MessageListXLFragmentManager)> (1)
<com.android.email.activity.MessageFileView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMessage(long)> (4)
<com.android.email.activity.MessageView: void messageChanged()> (3)
<com.android.mms.ui.ComposeMessageActivity: void access$600(com.android.mms.ui.ComposeMessageActivity,com.android.mms.ui.MessageItem)> (2)
<android.webkit.WebView: void access$4200(android.webkit.WebView,int,int,boolean)> (3)
<com.android.browser.ScrollWebView: void cancelWebCoreTouchEvent(int,int,boolean)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor access$300(com.android.music.TrackBrowserActivity,com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (2)
<com.android.music.TrackBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.TrackBrowserActivity$5: void remove(int)> (1)
<com.android.music.RepeatingImageButton: void doRepeat(boolean)> (3)
<com.android.voicedialer.RecognizerEngine: void onRecognitionSuccess(com.android.voicedialer.RecognizerClient)> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.mail.store.ExchangeStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (3)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Object)> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)> (6)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: boolean processMessage(android.os.Message)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer$DTMFKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (3)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.launcher2.AllAppsPagedView: void handleTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.CustomizePagedView: void handleTouchEvent(android.view.MotionEvent)> (1)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.PagedViewWithDraggableItems: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.voicedialer.VoiceDialerActivity$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity$4: void run()> (1)
<com.android.settings.LocalePicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.browser.BrowserActivity: boolean onKeyLongPress(int,android.view.KeyEvent)> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.TitleBarXLarge: void onClick(android.view.View)> (1)
<com.android.browser.UiController: void closeCurrentTab()> (2)
<com.android.browser.UrlHandler: boolean startActivityForUrl(java.lang.String)> (1)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.ActiveTabsPage$TabsListAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.UiController: boolean switchToTab(int)> (3)
<com.android.browser.WebViewController: boolean switchToTab(int)> (2)
<com.android.browser.UiController: void removeActiveTabsPage(boolean)> (4)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PieControl$MenuAdapter: void onClick(android.view.View)> (1)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1500(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.BrowserHistoryPage$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.CombinedBookmarkHistoryView$2: boolean onBookmarkSelected(android.database.Cursor,boolean)> (1)
<com.android.browser.CombinedBookmarkHistoryView$2: boolean onOpenInNewWindow(android.database.Cursor)> (1)
<com.android.browser.CombinedBookmarkHistoryView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.email.GroupMessagingListener: void loadMessageForViewFailed(long,java.lang.String)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewFinished(long)> (2)
<com.android.email.GroupMessagingListener: void loadMessageForViewStarted(long)> (2)
<com.android.email.activity.MessageFileViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageViewFragment: void reloadUiFromMessage(com.android.emailcommon.provider.EmailContent$Message,boolean)> (1)
<com.android.email.activity.MessageListXLFragmentManager$ThreePaneLayoutCallback: void onVisiblePanesChanged(int)> (1)
<com.android.email.activity.MessageViewBase: void onCreate(android.os.Bundle)> (3)
<com.android.email.activity.MessageListXL: boolean moveToNewer()> (2)
<com.android.email.activity.MessageListXL: boolean moveToOlder()> (2)
<com.android.email.activity.MessageListXLFragmentManager: void selectMailbox(long,long)> (3)
<com.android.email.activity.MessageListXL$MessageListFragmentCallback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: boolean moveToNewer()> (2)
<com.android.email.activity.MessageView: boolean moveToOlder()> (3)
<com.android.email.activity.MessageView: void onResume()> (2)
<com.android.mms.ui.ComposeMessageActivity$MsgListMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.ScrollWebView: void access$4200(android.webkit.WebView,int,int,boolean)> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.music.TouchInterceptor$RemoveListener: void remove(int)> (2)
<com.android.music.RepeatingImageButton: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<com.android.music.RepeatingImageButton: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.music.RepeatingImageButton: void access$000(com.android.music.RepeatingImageButton,boolean)> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (3)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$1500(com.android.email.activity.MessageListFragment)> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onDialerKeyDown(android.view.KeyEvent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.launcher2.AllAppsPagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.CustomizePagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.PagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.AllAppsPagedView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.launcher2.CustomizePagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.launcher2.PagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> (2)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$6: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.PhoneUi: void onPause()> (1)
<com.android.browser.TitleBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BookmarksPageCallbacks: boolean onBookmarkSelected(android.database.Cursor,boolean)> (2)
<com.android.browser.BookmarksPageCallbacks: boolean onOpenInNewWindow(android.database.Cursor)> (2)
<com.android.browser.OptionsMenuHandler: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.email.MessagingController$7: void run()> (1)
<com.android.email.MessagingController: void loadMessageForView(long,com.android.email.MessagingListener)> (1)
<com.android.email.activity.ThreePaneLayout$Callback: void onVisiblePanesChanged(int)> (2)
<com.android.email.activity.MessageView: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.MessageListXL: void onCurrentMessageGone()> (2)
<com.android.email.activity.MessageListXL: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXL: void onMoveToOlder()> (1)
<com.android.email.activity.MessageListXLFragmentManager$MailboxFinderCallback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void selectAccount(long,long,long)> (4)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$Callback: void onMessageOpen(long,long,long,int)> (1)
<com.android.email.activity.MessageView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageView: void onDeleteMessage()> (2)
<com.android.email.activity.MessageView: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageViewBase: void onResume()> (3)
<com.android.music.TouchInterceptor$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.music.TouchInterceptor: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.music.RepeatingImageButton$1: void run()> (1)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: boolean handleDialerKeyDown(int,android.view.KeyEvent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.mms.transaction.SmsSingleRecipientSender: boolean sendMessage(long)> (1)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.launcher2.Workspace: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.launcher2.SmoothPagedView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.Workspace: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.launcher2.SmoothPagedView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.android.phone.SipBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.SipCallOptionHandler: void createSipPhoneIfNeeded(android.net.sip.SipProfile)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.BaseUi: void onPause()> (3)
<com.android.browser.TitleBar: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.TitleBarXLarge: void onAction(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.BrowserBookmarksPage: void loadUrl(int)> (1)
<com.android.browser.BrowserBookmarksPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: void onPostExecute(android.database.Cursor)> (1)
<com.android.browser.BrowserBookmarksPage: void openInNewWindow(int)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.email.Controller$4: void run()> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.email.activity.ThreePaneLayout$AnimatorListener: void onAnimationStart(android.animation.Animator)> (1)
<com.android.email.activity.MessageListXL: void access$1200(com.android.email.activity.MessageListXL)> (2)
<com.android.email.activity.MessageListXL: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$TargetActivity: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$Callback: void onMailboxFound(long,long)> (1)
<com.android.email.activity.MessageListXLFragmentManager: void loadState(android.os.Bundle)> (1)
<com.android.email.activity.MessageListXL$MailboxListFragmentCallback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void initFromIntent()> (1)
<com.android.email.activity.MessageListXL: void selectAccount(long)> (2)
<com.android.email.activity.MailboxListFragment$Callback: void onMailboxSelected(long,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Integer)> (1)
<com.android.email.activity.MessageView: boolean handleMenuItem(int)> (1)
<com.android.email.activity.MessageViewFragment$Callback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MessageFileView: void onResume()> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mms.transaction.SmsMessageSender: boolean sendMessage(long)> (2)
<com.android.phone.SipCallOptionHandler: void access$200(com.android.phone.SipCallOptionHandler,android.net.sip.SipProfile)> (1)
<com.android.browser.UI: boolean onBackKey()> (2)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.UI: void onPause()> (1)
<com.android.browser.XLargeUi: void onPause()> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MessageListXL$MessageViewFragmentCallback: void onRespondedToInvite(int)> (1)
<com.android.email.activity.MoveMessageToDialog$Callback: void onMoveToMailboxSelected(long,long[])> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageListXLFragmentManager$CommandButtonCallback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Long)> (1)
<com.android.email.activity.MessageListXL: void onCreate(android.os.Bundle)> (1)
<com.android.email.activity.MailboxListFragment$Callback: void onAccountSelected(long)> (1)
<com.android.email.activity.MessageListXL: void access$2000(com.android.email.activity.MessageListXL,long)> (1)
<com.android.email.activity.MessageListXL: void updateAccountList(android.database.Cursor)> (1)
<com.android.email.activity.MailboxListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment$MessageOpenTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageView: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.transaction.MessageSender: boolean sendMessage(long)> (2)
<com.android.mms.transaction.SmsReceiverService: void sendFirstQueuedMessage()> (4)
<com.android.phone.SipCallOptionHandler$1: void run()> (1)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.BrowserBookmarksPage$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.email.activity.MessageViewFragment$Callback: void onBeforeMessageDelete()> (1)
<com.android.email.activity.MoveMessageToDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToNewer()> (1)
<com.android.email.activity.MessageCommandButtonView$Callback: void onMoveToOlder()> (1)
<com.android.email.activity.MailboxFinder$FindMailboxTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.MessageListXL$ActionBarNavigationCallback: boolean onNavigationItemSelected(int,long)> (1)
<com.android.email.activity.MessageListXL: void access$1800(com.android.email.activity.MessageListXL,android.database.Cursor)> (1)
<com.android.mms.data.WorkingMessage: void sendMmsWorker(com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void sendSmsWorker(java.lang.String,java.lang.String,long)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleBootCompleted()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSendMessage()> (1)
<com.android.mms.transaction.SmsReceiverService: void handleServiceStateChanged(android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsSent(android.content.Intent,int)> (1)
<com.android.browser.autocomplete.SuggestiveAutoCompleteTextView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageViewFragment: void onDelete()> (1)
<com.android.email.activity.MessageCommandButtonView: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.mms.data.WorkingMessage: void access$000(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,android.net.Uri,com.google.android.mms.pdu.PduPersister,com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.SendReq)> (1)
<com.android.mms.data.WorkingMessage: void preSendSmsWorker(com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$200(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$400(com.android.mms.transaction.SmsReceiverService)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$300(com.android.mms.transaction.SmsReceiverService,android.content.Intent)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$000(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.email.activity.MessageViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.email.activity.MessageListXL$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mms.data.WorkingMessage$1: void run()> (1)
<com.android.mms.data.WorkingMessage: void access$100(com.android.mms.data.WorkingMessage,com.android.mms.data.Conversation,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.MessageViewFragmentBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mms.data.WorkingMessage$2: void run()> (1)
<com.android.server.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> ()
<android.os.IPowerManager$Stub: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)> (3)
<android.os.PowerManager$WakeLock: void finalize()> ()
<android.os.PowerManager$WakeLock: void release(int)> (2)
<android.os.PowerManager$WakeLock: void release()> (108)
<android.bluetooth.HeadsetBase: void releaseWakeLock()> (2)
<android.content.SyncManager$ActiveSyncContext: void close()> (1)
<android.media.AsyncPlayer: void releaseWakeLock()> (1)
<android.net.DhcpStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$RunningState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$WaitBeforeRenewalState: void exit()> (1)
<android.os.PowerManager$WakeLock$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void releaseWakeLocks()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.browser.Controller: void onPageFinished(com.android.browser.Tab)> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.calendar.alerts.AlertReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void finalize()> ()
<com.android.deskclock.AlarmAlertWakeLock: void releaseCpuLock()> (1)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.development.Connectivity: void onStopDelayedCycle()> (1)
<com.android.exchange.ExchangeService: void releaseWakeLock(long)> (4)
<com.android.exchange.ExchangeService: void shutdown()> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void onDestroy()> (1)
<com.android.internal.policy.impl.KeyguardViewMediator: void handleTimeout(int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$9: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void releaseWakeLock()> (7)
<com.android.internal.telephony.cdma.CDMAPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void releaseWakeLock()> (5)
<com.android.internal.telephony.RIL: void releaseWakeLockIfDone()> (2)
<com.android.mms.transaction.SmsReceiver: void finishStartingService(android.app.Service,int)> (2)
<com.android.mms.transaction.TransactionService: void releaseWakeLock()> (2)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void callStarted()> (1)
<com.android.providers.calendar.CalendarProvider2: void releaseScheduleNextAlarmWakeLock()> (1)
<com.android.server.AlarmManagerService$ResultReceiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.am.ActivityStack: void activityIdleInternal(android.os.IBinder,boolean,android.content.res.Configuration)> (7)
<com.android.server.am.ActivityStack: void awakeFromSleepingLocked()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void run()> (2)
<com.android.server.BackupManagerService$PerformClearTask: void run()> (3)
<com.android.server.BackupManagerService$PerformInitializeTask: void run()> (3)
<com.android.server.BackupManagerService$PerformRestoreTask: void run()> (5)
<com.android.server.LocationManagerService: void decrementPendingBroadcasts()> (2)
<com.android.server.NotificationPlayer: void releaseWakeLock()> (1)
<com.android.server.sip.SipWakeLock: void release(java.lang.Object)> (9)
<com.android.settings.bluetooth.DockEventReceiver: void finishStartingService(android.app.Service,int)> (6)
<com.android.settings.CryptKeeper: void onDestroy()> (1)
<com.android.voicedialer.VoiceDialerActivity: void releaseWakeLock()> (1)
<com.cooliris.media.Gallery: void onPause()> (1)
<com.cooliris.media.GridLayer: void endSlideshow()> (7)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<android.bluetooth.HeadsetBase: void finalize()> ()
<android.content.SyncManager$SyncHandler: void closeActiveSyncContext(android.content.SyncManager$ActiveSyncContext)> (3)
<android.media.AsyncPlayer: void access$500(android.media.AsyncPlayer)> (1)
<com.android.internal.util.State: void exit()> (62)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void onClose()> ()
<com.android.browser.WebViewController: void onPageFinished(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.development.Connectivity: void access$1400(com.android.development.Connectivity)> (1)
<com.android.exchange.ExchangeService: void releaseMailbox(long)> (5)
<com.android.exchange.ExchangeService: void runAsleep(long,long)> (4)
<com.android.exchange.ExchangeService: void stopManualSync(long)> (3)
<com.android.exchange.ExchangeService: void stopServiceThreads()> (2)
<com.android.internal.policy.impl.KeyguardViewMediator: void access$600(com.android.internal.policy.impl.KeyguardViewMediator,int)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void access$000(com.android.internal.telephony.cdma.CdmaConnection)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void finalize()> ()
<com.android.internal.telephony.cdma.CdmaConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void onLocalDisconnect()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$100(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void finalize()> ()
<com.android.internal.telephony.gsm.GsmConnection: void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (2)
<com.android.internal.telephony.RIL: void access$200(com.android.internal.telephony.RIL)> (2)
<com.android.mms.transaction.PrivilegedSmsReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree: void access$3500(com.android.phone.BluetoothHandsfree)> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityRecord: void windowsVisible()> (2)
<com.android.server.am.ActivityManagerService: void wakingUp()> (1)
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.LocationManagerService: void access$500(com.android.server.LocationManagerService)> (3)
<com.android.server.NotificationPlayer: void access$700(com.android.server.NotificationPlayer)> (1)
<com.android.server.sip.SipService$AutoRegistrationProcess: boolean notCurrentSession(android.net.sip.ISipSession)> (4)
<com.android.server.sip.SipService$AutoRegistrationProcess: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> (2)
<com.android.server.sip.SipService$AutoRegistrationProcess: void onRegistrationTimeout(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$AutoRegistrationProcess: void stop()> (3)
<com.android.server.sip.SipService$MyExecutor: void executeInternal(java.lang.Runnable)> (1)
<com.android.server.sip.SipWakeLock: void reset()> (2)
<com.android.settings.bluetooth.DockService$4: void onDismiss(android.content.DialogInterface)> (1)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.cooliris.media.GridInputProcessor: boolean onKeyDown(int,android.view.KeyEvent,int)> (1)
<com.cooliris.media.GridInputProcessor: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.cooliris.media.GridInputProcessor: void selectSlot(int)> (2)
<com.cooliris.media.GridInputProcessor: void touchEnded(int,int,float)> (1)
<com.cooliris.media.GridLayer: boolean changeFocusToNextSlot(float)> (4)
<com.cooliris.media.GridLayer: void stop()> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.browser.Tab$2: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.exchange.ExchangeService: void access$1000(com.android.exchange.ExchangeService,long)> (1)
<com.android.exchange.ExchangeService: void done(com.android.exchange.AbstractSyncService)> (2)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (3)
<com.android.exchange.ExchangeService: void stopAccountSyncs(long,boolean)> (3)
<com.android.exchange.ExchangeService$2: void stopSync(long)> (2)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void onRemoteDisconnect(int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void onRemoteDisconnect(int)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<android.app.ActivityManagerNative: void wakingUp()> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: void clearBackupData(java.lang.String)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restoreAll(long,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession$Stub$Proxy: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.LocationManagerService$ProximityListener: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$Receiver: void decrementPendingBroadcastsLocked()> (2)
<com.android.server.sip.SipService$AutoRegistrationProcess: void onRegistering(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void close()> (1)
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.cooliris.media.GridLayer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.cooliris.media.GridInputProcessor: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.GridLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.Gallery: void onStop()> (1)
<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (3)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.exchange.ExchangeService$5: void run()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService: void access$200(com.android.exchange.ExchangeService,long,boolean)> (2)
<com.android.exchange.ExchangeService: void stopAccountSyncs(long)> (3)
<com.android.exchange.ExchangeService: void stopNonAccountMailboxSyncsForAccount(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void stopSync(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void stopSync(long)> (2)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$1600(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<android.app.IActivityManager: void wakingUp()> (1)
<android.app.backup.IBackupManager: void clearBackupData(java.lang.String)> (1)
<android.app.backup.IRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)> (2)
<android.app.backup.IRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)> (2)
<com.android.server.LocationManagerService$Receiver: void access$700(com.android.server.LocationManagerService$Receiver)> (1)
<com.android.server.LocationManagerService$Receiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<com.cooliris.media.RootLayer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.cooliris.media.GridLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.Layer: boolean update(com.cooliris.media.RenderView,float)> (5)
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doListRestoreSets()> (1)
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService$2: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver: void onAccountChanged()> (1)
<com.android.exchange.ExchangeService$2: void deleteAccountPIMData(long)> (2)
<com.android.exchange.ExchangeService$ConnectivityReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.adapter.FolderSyncParser: boolean parse()> (3)
<com.android.emailcommon.service.IEmailService: void stopSync(long)> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<com.android.server.am.ActivityRecord: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.bmgr.Bmgr: void doWipe()> (1)
<android.app.backup.RestoreSession: int restoreAll(long,android.app.backup.RestoreObserver)> ()
<android.app.backup.RestoreSession: int restorePackage(java.lang.String,android.app.backup.RestoreObserver)> (1)
<com.android.commands.bmgr.Bmgr: void doRestorePackage(java.lang.String)> (1)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<com.cooliris.media.RenderView: void processKeyEvent()> (1)
<com.cooliris.media.Layer: boolean onTouchEvent(android.view.MotionEvent)> (4)
<com.cooliris.media.ImageButton: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.LoadingLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.MenuBar: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.cooliris.media.RenderView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.cooliris.media.RootLayer: boolean update(com.cooliris.media.RenderView,float)> (1)
<com.android.commands.bmgr.Bmgr: void doList()> (1)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void hostChanged(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver: void access$400(com.android.exchange.ExchangeService$AccountObserver)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(long)> (2)
<com.android.emailcommon.service.EmailServiceProxy$3: void run()> (1)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.CallManager)> (1)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)> ()
<android.net.sip.SipManager: void close(java.lang.String)> (3)
<com.cooliris.media.RenderView: void processCurrentEvent()> (1)
<com.cooliris.media.BackgroundLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.LoadingLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.cooliris.media.RenderView: void processTouchEvent()> (1)
<com.cooliris.media.RootLayer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.Controller$1: void run()> (1)
<com.android.emailcommon.service.IEmailService: void hostChanged(long)> (2)
<com.android.exchange.ExchangeService$AccountObserver$1: void run()> (1)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(long)> (2)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.phone.sip.SipEditor: void unregisterProfile(java.lang.String)> (3)
<com.android.phone.sip.SipSettings$8: void run()> (1)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.email.activity.setup.AccountSetupExchangeFragment: void saveSettingsAfterEdit()> (1)
<com.android.emailcommon.service.EmailServiceProxy$9: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$12: void run()> (1)
<com.android.email.Controller: void deleteSyncedDataSync(long)> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.sip.SipEditor: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.phone.sip.SipEditor: void deleteAndUnregisterProfile(android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void unregisterOldPrimaryAccount()> (1)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context,com.android.email.Controller)> (1)
<com.android.phone.sip.SipEditor: void access$600(com.android.phone.sip.SipEditor,android.net.sip.SipProfile)> (1)
<com.android.phone.sip.SipEditor: void access$500(com.android.phone.sip.SipEditor)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.util.State: void enter()> (13)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<android.server.BluetoothService$EnableThread: void run()> (2)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothService: boolean enable(boolean)> (2)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.server.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> ()
<android.net.wifi.IWifiManager$Stub: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$WifiLock: void acquire()> (2)
<com.android.server.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipAudioCall: void grabWifiHighPerfLock()> (1)
<com.android.server.sip.SipService: void grabWifiLock()> (2)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<com.android.server.sip.SipService: void access$300(com.android.server.sip.SipService)> (1)
<android.net.sip.SipAudioCall: void startAudio()> (3)
<com.android.server.sip.SipService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<com.android.server.WifiService: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> ()
<android.net.wifi.IWifiManager$Stub: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager: boolean releaseWifiLock(android.os.IBinder)> (3)
<android.net.wifi.WifiManager$WifiLock: void finalize()> ()
<android.net.wifi.WifiManager$WifiLock: void release()> (2)
<android.net.sip.SipAudioCall: void releaseWifiHighPerfLock()> (1)
<com.android.server.sip.SipService: void releaseWifiLock()> (2)
<android.net.sip.SipAudioCall: void stopCall(boolean)> (3)
<com.android.server.sip.SipService: void access$400(com.android.server.sip.SipService)> (1)
<android.net.sip.SipAudioCall: void close(boolean)> (3)
<android.net.sip.SipAudioCall: void endCall()> (1)
<android.net.sip.SipAudioCall: void access$700(android.net.sip.SipAudioCall,boolean)> (1)
<android.net.sip.SipAudioCall: void close()> (2)
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void hangup()> (1)
<android.net.sip.SipAudioCall$1: void onCallBusy(android.net.sip.SipSession)> (1)
<android.net.sip.SipAudioCall$1: void onCallEnded(android.net.sip.SipSession)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<android.net.sip.SipAudioCall: void access$1000(android.net.sip.SipAudioCall,int,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onChanged(android.net.sip.SipAudioCall)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<android.net.sip.SipAudioCall$1: void onError(android.net.sip.SipSession,int,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
<com.android.mms.transaction.SmsReceiverService: void moveOutboxMessagesToQueuedBox()> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.mms.util.Recycler$SmsRecycler: void deleteMessagesForThread(android.content.Context,long,int)> (1)
<com.android.mms.util.Recycler: void deleteMessagesForThread(android.content.Context,long,int)> (2)
<com.android.mms.util.Recycler: void deleteOldMessages(android.content.Context)> (2)
<com.android.mms.util.Recycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessages(android.content.Context)> (1)
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (2)
<com.android.mms.util.Recycler$SmsRecycler: void deleteOldMessagesByThreadId(android.content.Context,long)> (3)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri storeMessage(android.content.Context,android.telephony.SmsMessage[],int)> (2)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri insertMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: android.net.Uri replaceMessage(android.content.Context,android.telephony.SmsMessage[],int)> (1)
<com.android.mms.transaction.SmsReceiverService: void handleSmsReceived(android.content.Intent,int)> (1)
<com.android.mms.transaction.SmsReceiverService: void access$100(com.android.mms.transaction.SmsReceiverService,android.content.Intent,int)> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getSmsReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: java.util.List getReportItems()> (1)
<com.android.mms.ui.DeliveryReportActivity: void initListAdapter()> (1)
<com.android.mms.ui.DeliveryReportActivity: void onCreate(android.os.Bundle)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.mms.ui.ClassZeroActivity: android.net.Uri replaceMessage(android.telephony.SmsMessage)> (1)
<com.android.mms.ui.ClassZeroActivity: void saveMessage()> (1)
<com.android.mms.ui.ClassZeroActivity: void access$200(com.android.mms.ui.ClassZeroActivity)> (2)
<com.android.mms.ui.ClassZeroActivity$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void startQuery()> (2)
<com.android.mms.ui.ManageSimMessages: void init()> (2)
<com.android.mms.ui.ManageSimMessages: void refreshMessageList()> (1)
<com.android.mms.ui.ManageSimMessages: void onCreate(android.os.Bundle)> (1)
<com.android.mms.ui.ManageSimMessages: void onNewIntent(android.content.Intent)> (1)
<com.android.mms.ui.ManageSimMessages: void access$000(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$1: void onChange(boolean)> (1)
<com.android.mms.ui.ClassZeroActivity: android.net.Uri storeMessage(android.telephony.SmsMessage)> (2)
<com.android.mms.transaction.SmsMessageSender: java.lang.String getOutgoingServiceCenter(long)> (2)
<com.android.mms.transaction.SmsMessageSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (3)
<com.android.mms.transaction.SmsSingleRecipientSender: java.lang.String getOutgoingServiceCenter(long)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String,java.lang.String,long,boolean,android.net.Uri)> (1)
<com.android.mms.transaction.SmsSingleRecipientSender: void <init>(android.content.Context,java.lang.String[],java.lang.String,long)> (1)
<com.android.mms.data.WorkingMessage: void deleteDraftSmsMessage(long)> (2)
<com.android.mms.ui.ComposeMessageActivity: void editSmsMessageItem(com.android.mms.ui.MessageItem)> (1)
<com.android.mms.data.WorkingMessage: void asyncDeleteDraftSmsMessage(com.android.mms.data.Conversation)> (3)
<com.android.mms.data.WorkingMessage$3: void run()> (1)
<com.android.mms.data.WorkingMessage: void clearConversation(com.android.mms.data.Conversation)> (2)
<com.android.mms.data.WorkingMessage: java.lang.String readDraftSmsMessage(com.android.mms.data.Conversation)> (1)
<com.android.mms.data.WorkingMessage: void discard()> (5)
<com.android.mms.data.WorkingMessage: boolean loadFromConversation(com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity$BackgroundQueryHandler: void onDeleteComplete(int,java.lang.Object,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$DiscardDraftListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ComposeMessageActivity: void saveDraft()> (3)
<com.android.mms.data.WorkingMessage: com.android.mms.data.WorkingMessage loadDraft(com.android.mms.ui.ComposeMessageActivity,com.android.mms.data.Conversation)> (1)
<com.android.mms.ui.ComposeMessageActivity: void onMaxPendingMessagesReached()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onStop()> (1)
<com.android.mms.ui.ComposeMessageActivity: void loadDraft()> (2)
<com.android.mms.data.WorkingMessage$MessageStatusListener: void onMaxPendingMessagesReached()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(android.content.Context,java.util.Set)> (1)
<com.android.mms.transaction.MessagingNotification: void blockingUpdateNewMessageIndicator(android.content.Context,boolean,boolean)> (4)
<com.android.mms.transaction.MessagingNotification$1: void run()> (1)
<com.android.mms.transaction.MessagingNotification: com.android.mms.transaction.MessagingNotification$MmsSmsDeliveryInfo getSmsNewDeliveryInfo(android.content.Context)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> (1)
<com.android.mms.ui.ManageSimMessages: void copyToPhoneMemory(android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)> (1)
<com.android.mms.data.Conversation: void access$900(android.content.Context)> (1)
<com.android.mms.data.Conversation$3: void run()> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean anyThreadOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler: boolean checkForThreadsOverLimit(android.content.Context)> (3)
<com.android.mms.ui.ConversationList$2: void run()> (1)
<com.android.mms.util.Recycler$MmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: boolean checkForThreadsOverLimit(android.content.Context)> (1)
<com.android.mms.util.Recycler$SmsRecycler: android.database.Cursor getAllThreads(android.content.Context)> (2)
<com.android.mms.util.Recycler: android.database.Cursor getAllThreads(android.content.Context)> (1)
<com.android.mms.transaction.MessageStatusReceiver: android.telephony.SmsMessage updateMessageStatus(android.content.Context,android.net.Uri,byte[])> (1)
<com.android.mms.transaction.MessageStatusReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.mms.ui.ManageSimMessages: void deleteFromSim(android.database.Cursor)> (2)
<com.android.mms.ui.ManageSimMessages: void access$500(com.android.mms.ui.ManageSimMessages,android.database.Cursor)> (1)
<com.android.mms.ui.ManageSimMessages: void deleteAllFromSim()> (1)
<com.android.mms.ui.ManageSimMessages$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mms.ui.ManageSimMessages: void access$600(com.android.mms.ui.ManageSimMessages)> (1)
<com.android.mms.ui.ManageSimMessages$3: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> (1)
Permission:android.permission.SIGNAL_PERSISTENT_PROCESSES
8 Callers:
<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)> (1)
<android.app.ActivityManagerNative: void signalPersistentProcesses(int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void signalPersistentProcesses(int)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.Monkey: void signalPersistentProcesses()> (1)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
Permission:android.permission.READ_SYNC_SETTINGS
947 Callers:
<android.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (16)
<android.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onResume()> (1)
<com.android.email.AccountBackupRestore: void doBackupAccounts(android.content.Context,com.android.email.Preferences)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void loadSettings()> (2)
<com.android.email.service.MailService: void setupSyncReportsLocked(long,android.content.Context)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void updatePIMSyncSettings(com.android.emailcommon.provider.EmailContent$Account,int,java.lang.String)> (1)
<com.android.settings.accounts.AccountSyncSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.accounts.AccountSyncSettings: void setFeedsState()> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onSyncStateUpdated()> (4)
<com.cooliris.media.PicasaDataSource: java.util.HashMap getAccountStatus(android.content.Context)> (4)
<com.cooliris.picasa.PicasaContentProvider: boolean isSyncEnabled(java.lang.String,com.cooliris.picasa.PicasaContentProvider$SyncContext)> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncUsersAndAlbums(boolean,android.content.SyncResult)> (1)
<com.android.email.AccountBackupRestore$1: void run()> (2)
<com.android.email.activity.setup.AccountSettingsFragment: void access$800(com.android.email.activity.setup.AccountSettingsFragment)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onStart()> (2)
<com.android.email.service.MailService: void refreshSyncReports()> (1)
<com.android.email.service.MailService: void setupSyncReports(long)> (3)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean isSyncable()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.exchange.ExchangeService: void checkPIMSyncSettings()> (2)
<com.android.settings.accounts.AccountSyncSettings: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.AccountPreferenceBase: void onSyncStateUpdated()> (2)
<com.android.settings.accounts.ManageAccountsSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.accounts.ManageAccountsSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.accounts.ManageAccountsSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.cooliris.media.Gallery: void updatePicasaAccountStatus()> (2)
<com.cooliris.media.PicasaDataSource: void loadMediaSetsIntoFeed(com.cooliris.media.MediaFeed,boolean)> (1)
<com.cooliris.media.Gallery: void initializeDataSource()> (1)
<com.cooliris.picasa.PicasaContentProvider: void syncAlbumPhotos(long,boolean,android.content.SyncResult)> (1)
<com.android.email.AccountBackupRestore: void backupAccounts(android.content.Context)> (7)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.lang.Object[])> (1)
<com.android.email.service.MailService$6: void run()> (1)
<com.android.email.service.MailService: com.android.email.service.MailService$AccountSyncReport updateAccountReport(long,int)> (4)
<com.android.email.service.MailService: void reschedule(android.app.AlarmManager)> (3)
<com.android.email.service.MailService: void restoreSyncReports(android.content.Intent)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (2)
<com.android.exchange.ExchangeService: void access$700(com.android.exchange.ExchangeService)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.android.settings.accounts.AccountPreferenceBase$1$1: void run()> (1)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.accounts.AccountPreferenceBase: void onAccountsUpdated(android.accounts.Account[])> (2)
<com.cooliris.media.Gallery: void onResume()> (1)
<com.cooliris.media.PicasaDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.Gallery: void access$100(com.cooliris.media.Gallery)> (2)
<com.android.email.activity.setup.AccountSettingsUtils: void commitSettings(android.content.Context,com.android.emailcommon.provider.EmailContent$Account)> (2)
<com.android.email.activity.setup.AccountSetupExchangeFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.activity.setup.AccountSetupNames$FinalSetupTask: java.lang.Boolean doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupOutgoingFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.Controller: void deleteAccountSync(long,android.content.Context)> (3)
<com.android.email.service.MailService: void accountDeleted(android.content.Context)> (2)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.MailService$3: void run()> (1)
<com.android.email.service.MailService$7: void run()> (1)
<com.android.email.service.MailService$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.service.MailService$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.ExchangeService$EasSyncStatusObserver: void onStatusChanged(int)> (1)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.cooliris.media.DataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (2)
<com.cooliris.media.Gallery: void checkStorage()> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.email.activity.setup.AccountSetupOptions$4: void run()> (1)
<com.android.email.activity.setup.AccountServerBaseFragment: void saveSettingsAfterEdit()> (1)
<com.android.email.activity.setup.AccountSetupNames$FinalSetupTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.Controller$11: void run()> (1)
<com.android.email.SecurityPolicy: void deleteSecuredAccounts(android.content.Context)> (1)
<com.android.email.service.MailService$4: void run()> (1)
<com.android.email.service.AccountService$1: void accountDeleted()> (2)
<com.android.email.service.MailService: void reconcileAccountsWithAccountManager(android.content.Context,java.util.List,android.accounts.Account[],boolean,android.content.ContentResolver)> (1)
<com.android.email.Controller$Result: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (8)
<com.android.email.Controller$Result: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int)> (7)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.cooliris.media.ConcatenatedDataSource: void loadMediaSets(com.cooliris.media.MediaFeed)> (1)
<com.cooliris.media.MediaFeed: void loadMediaSets()> (1)
<com.cooliris.media.Gallery: void access$000(com.cooliris.media.Gallery)> (2)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: void accountDeleted()> ()
<com.android.emailcommon.service.IAccountService$Stub: void accountDeleted()> (2)
<com.android.email.service.MailService$8: void runInternal(android.content.Context)> (1)
<com.android.email.activity.AccountFolderListFragment$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.activity.MailboxList$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.activity.MessageList$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void serviceCheckMailCallback(com.android.emailcommon.mail.MessagingException,long,long,int,long)> (1)
<com.android.email.Controller$LegacyListener: void checkMailFinished(android.content.Context,long,long,long)> (2)
<com.android.email.Controller$LegacyListener: void checkMailStarted(android.content.Context,long,long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$4: void run()> (1)
<com.android.email.activity.MailboxFinder$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int)> (1)
<com.android.email.activity.MessageViewFragmentBase$ControllerResults: void updateMailboxCallback(com.android.emailcommon.mail.MessagingException,long,long,int,int)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxFinished(long,long,int,int)> (1)
<com.android.email.Controller$LegacyListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.email.ControllerResultUiThreadWrapper$5: void run()> (1)
<com.android.email.Controller$ServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.cooliris.media.MediaFeed: void access$500(com.cooliris.media.MediaFeed)> (1)
<com.android.email.activity.setup.AccountServerBaseFragment$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.SecurityPolicy: void onDeviceAdminReceiverMessage(android.content.Context,int)> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IAccountService: void accountDeleted()> (1)
<com.android.email.service.MailService$8: void runInternal(java.lang.Object)> (1)
<com.android.email.Controller: void serviceCheckMail(long,long,long)> (1)
<com.android.email.MessagingListener: void checkMailFinished(android.content.Context,long,long,long)> (1)
<com.android.email.MessagingListener: void checkMailStarted(android.content.Context,long,long)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxFinished(long,long,int,int)> (1)
<com.android.email.MessagingListener: void synchronizeMailboxStarted(long,long)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxStatus(long,int,int)> (3)
<com.cooliris.media.MediaFeed$2: void run()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.AccountServiceProxy$4: void run()> (1)
<com.android.email.SingleRunningTask: void runInternal(java.lang.Object)> (1)
<com.android.email.service.MailService: boolean syncOneAccount(com.android.email.Controller,long,int)> (1)
<com.android.email.GroupMessagingListener: void checkMailFinished(android.content.Context,long,long,long)> (2)
<com.android.email.GroupMessagingListener: void checkMailStarted(android.content.Context,long,long)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFailed(long,long,java.lang.Exception)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxFinished(long,long,int,int)> (2)
<com.android.email.GroupMessagingListener: void synchronizeMailboxStarted(long,long)> (3)
<com.android.emailcommon.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxStatus(long,int,int)> (2)
<com.android.exchange.ExchangeService$2: void startSync(long,boolean)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.SingleRunningTask: void run(java.lang.Object)> (2)
<com.android.email.service.MailService: boolean access$200(com.android.email.service.MailService,com.android.email.Controller,long,int)> (1)
<com.android.email.MessagingController$10: void run()> (1)
<com.android.email.MessagingController: void checkMail(long,long,com.android.email.MessagingListener)> (1)
<com.android.email.MessagingController: void synchronizeMailboxSynchronous(com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (1)
<com.android.email.MessagingController: void synchronizeMailbox(com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox,com.android.email.MessagingListener)> (2)
<com.android.email.Controller$12: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.Controller$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1$4: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void startSync(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void startSync(long,boolean)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyRunnable: void run()> (1)
<com.android.email.service.MailService$8: void run(java.lang.Object)> (1)
<com.android.email.service.MailService: void reconcilePopImapAccountsSync(android.content.Context)> (3)
<com.android.email.Controller$2: void run()> (1)
<com.android.email.MessagingController: void access$400(com.android.email.MessagingController,com.android.emailcommon.provider.EmailContent$Account,com.android.emailcommon.provider.EmailContent$Mailbox)> (2)
<com.android.email.Controller$3: void run()> (1)
<com.android.email.Controller$7: void run()> (1)
<com.android.exchange.ExchangeService$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<com.android.emailcommon.service.IEmailService: void startSync(long,boolean)> (3)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.email.service.MailService$2: void run()> (1)
<com.android.email.MessagingController$2: void run()> (1)
<com.android.exchange.ExchangeService$1: void broadcastCallback(com.android.exchange.ExchangeService$ServiceCallbackWrapper)> (4)
<com.android.email.Controller$ControllerService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.Controller: void sendPendingMessages(long)> (3)
<com.android.email.Controller: void updateMailbox(long,long,boolean)> (2)
<com.android.email.activity.Welcome$MainActivityLauncher: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.ExchangeService$1: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxListStatus(long,int,int)> (2)
<com.android.exchange.ExchangeService$1: void syncMailboxStatus(long,int,int)> (2)
<com.android.email.Controller: void sendMessage(long,long)> (1)
<com.android.email.RefreshManager: boolean sendPendingMessages(long)> (2)
<com.android.email.service.MailService$5: void run()> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (6)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void sendMessageStatus(long,java.lang.String,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void syncMailboxListStatus(long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void syncMailboxListStatus(long,int,int)> (2)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.MessageListFragment: void onSendPendingMessages()> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void performAction(long)> (1)
<com.android.email.RefreshManager: boolean loadMoreMessages(long,long)> (1)
<com.android.email.RefreshManager: boolean refreshMessageList(long,long,boolean)> (2)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (5)
<com.android.email.Controller$ControllerService$1: void loadAttachment(long,boolean)> (2)
<com.android.email.Controller$LegacyListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.Controller$LegacyListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.emailcommon.service.IEmailServiceCallback: void sendMessageStatus(long,java.lang.String,int,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback: void syncMailboxListStatus(long,int,int)> (3)
<com.android.email.activity.MessageCompose$SendOrSaveMessageTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.MessageListFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void performAction(long)> (1)
<com.android.email.activity.MessageListFragment: void onLoadMoreMessages()> (1)
<com.android.email.activity.MessageListFragment: void onRefresh(boolean)> (2)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Boolean)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.email.Controller$12$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasSyncService: void doProgressCallback(long,long,int)> (2)
<com.android.exchange.EasSyncService: void doStatusCallback(long,long,int)> (2)
<com.android.exchange.ExchangeService$1$1: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(long,boolean)> (2)
<com.android.email.MessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (1)
<com.android.email.MessagingListener: void loadAttachmentFinished(long,long,long)> (1)
<com.android.email.MessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (1)
<com.android.exchange.EasOutboxService: void sendCallback(long,java.lang.String,int)> (1)
<com.android.exchange.ExchangeService$1$2: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasSyncService: void runAccountMailbox()> (2)
<com.android.exchange.ExchangeService$1$3: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.ExchangeService: void reloadFolderListFailed(long)> (1)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Long[])> (3)
<com.android.email.activity.MessageListFragment: void doFooterClick()> (1)
<com.android.email.activity.MessageList: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.activity.MessageListFragment: void autoRefreshStaleMailbox()> (1)
<com.android.email.activity.MessageListXL$RefreshTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.Controller$ServiceCallbackWrapper: void call(com.android.emailcommon.service.IEmailServiceCallback)> (1)
<com.android.exchange.EasOutboxService: void doProgressCallback(long,long,int)> (1)
<com.android.exchange.EasSyncService: void loadAttachment(com.android.exchange.PartRequest)> (2)
<com.android.exchange.EasOutboxService: void doStatusCallback(long,long,int)> (1)
<com.android.emailcommon.service.IEmailService: void loadAttachment(long,boolean)> (1)
<com.android.email.GroupMessagingListener: void loadAttachmentFailed(long,long,long,com.android.emailcommon.mail.MessagingException,boolean)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentFinished(long,long,long)> (2)
<com.android.email.GroupMessagingListener: void loadAttachmentStarted(long,long,long,boolean)> (2)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasOutboxService: void runAccountMailbox()> (1)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (3)
<com.android.emailcommon.utility.Utility$ForEachAccount: void onPostExecute(java.lang.Object)> (3)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Long[])> (1)
<com.android.email.activity.MessageListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.MessageListFragment: void access$1500(com.android.email.activity.MessageListFragment)> (1)
<com.android.email.Controller$12: void broadcastCallback(com.android.email.Controller$ServiceCallbackWrapper)> (1)
<com.android.exchange.EasOutboxService: void loadAttachment(com.android.exchange.PartRequest)> (1)
<com.android.email.MessagingController$8: void run()> (1)
<com.android.email.MessagingController: void loadAttachment(long,long,long,long,com.android.email.MessagingListener,boolean)> (1)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (4)
<com.android.exchange.ExchangeService$2: void updateFolderList(long)> (2)
<com.android.email.NotificationController$1: void onPostExecute(java.lang.Object)> (2)
<com.android.email.RefreshManager$SendPendingMessagesForAllAccountsImpl: void onPostExecute(java.lang.Object)> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.email.Controller$12: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.exchange.adapter.CalendarSyncAdapter$EasCalendarSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.email.activity.MessageListFragment$MessagesLoaderCallback: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.exchange.adapter.CalendarSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.Controller$1: void run()> (1)
<android.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (3)
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (10)
<com.android.contacts.model.AccountTypeManagerImpl: void loadAccountsInBackground()> (5)
<com.android.providers.contacts.ContactsProvider2: boolean isContactsAccount(android.accounts.Account)> (1)
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<com.android.browser.preferences.ImportWizard: void done()> (1)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<com.android.settings.accounts.AccountSyncSettings: void updateAccountCheckboxes(android.accounts.Account[])> (2)
<com.cooliris.picasa.PicasaService: void performSyncImpl(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onAccountsUpdated(android.accounts.Account[])> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void <init>(android.content.Context)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void onStatusChanged(int)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: void processBroadcastIntent(android.content.Intent)> (1)
<com.android.providers.contacts.ContactsProvider2: void updateContactsAccountCount(android.accounts.Account[])> (2)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.android.browser.preferences.ImportWizard: void onClick(android.view.View)> (1)
<com.cooliris.picasa.PicasaService: boolean performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.SyncResult)> (2)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> (3)
<com.android.providers.contacts.ContactsProvider2: boolean updateAccountsInBackground(android.accounts.Account[])> (1)
<com.android.providers.contacts.ContactsProvider2: void performBackgroundTask(int,java.lang.Object)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.cooliris.picasa.PicasaService$2: void run()> (1)
<com.cooliris.picasa.PicasaSyncAdapter: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.contacts.ContactsApplication: java.lang.Object getSystemService(java.lang.String)> (3)
<com.android.contacts.model.AccountTypeManager: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> (31)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager createAccountTypeManager(android.content.Context)> (1)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void createNewContact()> (2)
<com.android.contacts.ContactsApplication: void onCreate()> (1)
<com.android.contacts.ContactSaveService: void saveContact(android.content.Intent)> (1)
<com.android.contacts.detail.ContactDetailFragment: void buildEntries()> (1)
<com.android.contacts.detail.ContactDetailFragment: void makePersonalCopy()> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean canEditSuggestedContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean doJoinContactAction()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean isContactWritable()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean revert()> (1)
<com.android.contacts.editor.ContactEditorFragment: boolean save(int)> (8)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(com.android.contacts.model.EntityDelta,com.android.contacts.model.EntityDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditors()> (3)
<com.android.contacts.editor.ContactEditorFragment: void createContact(android.accounts.Account)> (3)
<com.android.contacts.editor.ContactEditorFragment: void selectAccountAndCreateContact()> (1)
<com.android.contacts.editor.ContactEditorFragment: void setData(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void setIntentExtras(android.os.Bundle)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.interactions.ImportExportInteraction: void handleImportRequest(int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction$PhoneItemAdapter: void <init>(com.android.contacts.interactions.PhoneNumberInteraction,android.content.Context)> (1)
<com.android.contacts.list.ContactListFilterLoader: java.util.List loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: com.android.contacts.list.CustomContactListFilterActivity$AccountSet loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$DisplayAdapter: void <init>(android.content.Context)> (1)
<com.android.contacts.model.AccountTypeManagerImpl: com.android.contacts.model.AccountTypeManager getInstance(android.content.Context)> (1)
<com.android.contacts.quickcontact.QuickContactWindow: void handleData(android.database.Cursor)> (1)
<com.android.contacts.SplitAggregateView: void <init>(android.content.Context,android.net.Uri)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnCancelListener)> (4)
<com.android.contacts.util.AccountsListAdapter: void <init>(android.content.Context,boolean)> (2)
<com.android.contacts.vcard.ImportVCardActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: void onCreate(android.os.Bundle)> (2)
<android.content.SyncManager$InitializerServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.activities.ContactBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void access$900(com.android.contacts.activities.ContactBrowserActivity)> (1)
<com.android.contacts.ContactSaveService: void onHandleIntent(android.content.Intent)> (1)
<com.android.contacts.detail.ContactDetailFragment: void bindData()> (2)
<com.android.contacts.detail.ContactDetailFragment: void access$000(com.android.contacts.detail.ContactDetailFragment)> (1)
<com.android.contacts.editor.AggregationSuggestionView: boolean performClick()> (3)
<com.android.contacts.editor.ContactEditorFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.editor.ContactEditorFragment: void joinAggregate(long)> (1)
<com.android.contacts.activities.ContactEditorActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.activities.ContactEditorActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onBackPressed()> (2)
<com.android.contacts.editor.ContactEditorFragment: void doJoinSuggestedContact(long[])> (1)
<com.android.contacts.editor.ContactEditorFragment: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.ContactEditorFragment: void onStop()> (1)
<com.android.contacts.editor.ContactEditorFragment$EntityDeltaComparator: int compare(java.lang.Object,java.lang.Object)> (1)
<com.android.contacts.editor.ContactEditorFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForExistingContact(com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.editor.ContactEditorFragment: void bindEditorsForNewContact(android.accounts.Account,com.android.contacts.model.AccountType)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.interactions.ContactDeletionInteraction: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.interactions.ImportExportInteraction: void access$000(com.android.contacts.interactions.ImportExportInteraction,int)> (1)
<com.android.contacts.interactions.PhoneNumberInteraction: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.list.ContactListFilterLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$CustomFilterConfigurationLoader: java.lang.Object loadInBackground()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.quickcontact.QuickContactWindow: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int,android.content.DialogInterface$OnClickListener)> ()
<com.android.contacts.util.AccountSelectionUtil: android.app.Dialog getSelectAccountDialog(android.content.Context,int)> (1)
<com.android.contacts.vcard.ImportVCardActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.vcard.SelectAccountActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.editor.SelectAccountDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.contacts.ContactsActivity: void onCreate(android.os.Bundle)> (16)
<com.android.contacts.ContactsActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.activities.ContactBrowserActivity$1: void onClick(android.view.View)> (1)
<com.android.contacts.detail.ContactDetailFragment: void access$1100(com.android.contacts.detail.ContactDetailFragment)> (2)
<com.android.contacts.detail.ContactDetailFragment: void loadUri(android.net.Uri)> (2)
<com.android.contacts.detail.ContactDetailFragment$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.ContactEditorFragment: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.contacts.ContactsActivity: void onBackPressed()> (2)
<com.android.contacts.editor.ContactEditorFragment$JoinSuggestedContactDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$Listener: void onSplitContactConfirmed()> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$Listener: void onAccountChosen(android.accounts.Account)> (1)
<com.android.contacts.editor.ContactEditorFragment$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.ContactsActivity: void onNewIntent(android.content.Intent)> (4)
<com.android.contacts.interactions.ImportExportInteraction$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.activities.ContactBrowserActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (2)
<com.android.contacts.util.NotifyingAsyncQueryHandler$AsyncQueryListener: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.interactions.ImportExportInteraction: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (1)
<com.android.contacts.ContactsActivity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> (4)
<com.android.contacts.activities.AttachPhotoActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactDetailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactEditorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactSelectionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ContactsFrontDoor: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.JoinContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.NonPhoneActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.activities.ShowOrCreateActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.CallContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.quickcontact.QuickContactActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.test.FragmentTestActivity: void onCreate(android.os.Bundle)> (2)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoaderReset(android.content.Loader)> (1)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoadFinished(android.content.Loader,com.android.contacts.ContactLoader$Result)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void setupContactDetailFragment(android.net.Uri)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onBackPressed()> (3)
<com.android.contacts.editor.SplitContactConfirmationDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.SelectAccountDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.ContactsActivity: void onServiceCompleted(android.content.Intent)> (16)
<com.android.contacts.quickcontact.QuickContactActivity: void onNewIntent(android.content.Intent)> (3)
<com.android.contacts.util.NotifyingAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.detail.ContactDetailFragment$2: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void access$500(com.android.contacts.activities.ContactBrowserActivity,android.net.Uri)> (2)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.activities.AttachPhotoActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactDetailActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactEditorActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactsFrontDoor: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.JoinContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.NonPhoneActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.CallContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService$Listener: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.quickcontact.QuickContactActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.test.FragmentTestActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportVCardActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.vcard.SelectAccountActivity: void onServiceCompleted(android.content.Intent)> (1)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onFinishAction()> (1)
<com.android.contacts.ContactSaveService: void deliverCallbackOnUiThread(android.content.Intent)> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onSelectionChange()> (1)
<com.android.contacts.list.OnContactBrowserActionListener: void onViewContactAction(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void finish()> (3)
<com.android.contacts.ContactSaveService$2: void run()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void checkSelection()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void viewContact(android.net.Uri)> (3)
<com.android.contacts.list.ContactEntryListFragment: void finish()> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void finish()> (2)
<com.android.contacts.list.StrequentContactListFragment: void finish()> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void checkSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void checkSelection()> (1)
<com.android.contacts.list.ContactBrowseListContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.StrequentContactListFragment: void viewContact(android.net.Uri)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onClose()> (7)
<com.android.contacts.list.ContactPickerFragment: void finish()> (1)
<com.android.contacts.list.JoinContactListFragment: void finish()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void finish()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void finish()> (1)
<com.android.contacts.list.ContactBrowseListFragment$ContactUriQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void refreshSelectedContactUri()> (4)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onContactUriQueryFinished(android.net.Uri)> (1)
<com.android.contacts.widget.ContextMenuAdapter: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.ContactPickerFragment: void onClose()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onClose()> (1)
<com.android.contacts.list.JoinContactListFragment: void onClose()> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onClose()> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onClose()> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClose()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (8)
<com.android.contacts.list.DefaultContactBrowseListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.list.StrequentContactListFragment: void refreshSelectedContactUri()> (1)
<com.android.contacts.activities.ContactBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.activities.ContactSelectionActivity: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (2)
<com.android.contacts.list.ContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (3)
<com.android.contacts.list.ContactBrowseListFragment: void restoreSelectedUri(boolean)> (5)
<com.android.contacts.list.ContactBrowseListFragment: void selectDefaultContact()> (4)
<com.android.contacts.list.ContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (3)
<com.android.contacts.list.ContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (3)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri,boolean,boolean,boolean,boolean)> (1)
<com.android.contacts.ContactsActivity: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.contacts.list.ContactEntryListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (8)
<com.android.contacts.list.ContactEntryListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.StrequentContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (2)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void reloadDataAndSetSelectedUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onAttach(android.app.Activity)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (4)
<com.android.contacts.list.ContactBrowseListFragment: void setSearchMode(boolean)> (5)
<com.android.contacts.list.DefaultContactBrowseListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void restoreSelectedUri(boolean)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectDefaultContact()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.list.StrequentContactListFragment: void selectFirstFoundContactAfterDelay()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragmentForRequest()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setSelectedContactUri(android.net.Uri)> (1)
<com.android.contacts.list.ContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.list.ContactPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.JoinContactListFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactEntryListFragment: void onAttach(android.app.Activity)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.list.StrequentContactListFragment: void onAttach(android.app.Activity)> (3)
<com.android.contacts.activities.ContactBrowserActivity$ContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (6)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter,boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactEntryListFragment: void setSearchMode(boolean)> (7)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.StrequentContactListFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void configureFragments(boolean)> (2)
<com.android.contacts.list.ContactPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.JoinContactListFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PhoneNumberPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void onAttach(android.app.Activity)> (2)
<com.android.contacts.list.OnContactBrowserActionListener: void onInvalidSelection()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFilterChanged()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onContactListFiltersLoaded()> (1)
<com.android.contacts.list.DefaultContactBrowseListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.list.StrequentContactListFragment: void setFilter(com.android.contacts.list.ContactListFilter)> (1)
<com.android.contacts.activities.ContactSelectionActivity: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ContactSelectionActivity: void configureListFragment()> (1)
<com.android.contacts.list.ContactPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.JoinContactListFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void setSearchMode(boolean)> (2)
<com.android.contacts.list.PostalAddressPickerFragment: void setSearchMode(boolean)> (1)
<com.android.contacts.activities.ContactBrowserActivity: void configureContentView(boolean,android.os.Bundle)> (2)
<com.android.contacts.activities.ContactBrowserActivity: void onAction()> (1)
<com.android.contacts.list.ContactBrowseListFragment: void notifyInvalidSelection()> (3)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFilterChanged()> (1)
<com.android.contacts.list.ContactListFilterController$ContactListFilterListener: void onContactListFiltersLoaded()> (1)
<com.android.contacts.activities.ContactBrowserActivity: void onNewIntent(android.content.Intent)> (2)
<com.android.contacts.activities.ActionBarAdapter$Listener: void onAction()> (2)
<com.android.contacts.list.DefaultContactBrowseListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.StrequentContactListFragment: void notifyInvalidSelection()> (1)
<com.android.contacts.list.ContactListFilterController: void notifyContactListFilterChanged()> (3)
<com.android.contacts.list.ContactListFilterController: void notifyContacListFiltersLoaded()> (1)
<com.android.contacts.activities.ActionBarAdapter: boolean onQueryTextChange(java.lang.String)> (1)
<com.android.contacts.activities.ActionBarAdapter: void setSearchMode(boolean)> (4)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.util.List)> (1)
<com.android.contacts.list.ContactListFilterController: void selectCustomFilter()> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(com.android.contacts.list.ContactListFilter,boolean)> (3)
<com.android.contacts.activities.ActionBarAdapter: boolean onClose()> (1)
<com.android.contacts.list.ContactListFilterController: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.contacts.list.ContactListFilterController: void setContactListFilter(int)> (1)
<com.android.contacts.list.ContactListFilterController: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.content.ContentService: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> ()
<android.content.IContentService$Stub: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService: boolean getMasterSyncAutomatically()> (1)
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> (9)
<android.app.ContextImpl$ApplicationContentResolver: boolean getMasterSyncAutomatically()> (1)
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getActualState(android.content.Context)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void requestStateChange(android.content.Context,boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void requestStateChange(android.content.Context,boolean)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setCurrentState(android.content.Context,int)> (4)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setCurrentState(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setCurrentState(android.content.Context,int)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setCurrentState(android.content.Context,int)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setCurrentState(android.content.Context,int)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void onActualStateChange(android.content.Context,android.content.Intent)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (3)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.contacts.list.PostalAddressListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.list.PostalAddressPickerFragment: void onItemClick(int,long)> (2)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.net.Uri getPhoneUri(int)> (1)
<com.android.contacts.list.PhoneNumberPickerFragment: void onItemClick(int,long)> (2)
<com.android.contacts.activities.AttachPhotoActivity: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.exchange.adapter.ContactsSyncAdapter: void dirtyContactsWithinDirtyGroups()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.contacts.ContactSaveService: void setSuperPrimary(android.content.Intent)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.contacts.ContactLoader$LoadContactTask: android.net.Uri ensureIsContactUri(android.content.ContentResolver,android.net.Uri)> (1)
<com.android.contacts.ContactLoader$LoadContactTask: com.android.contacts.ContactLoader$Result doInBackground(java.lang.Void[])> (1)
<com.android.contacts.ContactLoader$LoadContactTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.contacts.list.LegacyContactListAdapter: android.net.Uri getPersonUri(int)> (1)
<com.android.contacts.list.ContactPickerFragment: void onItemClick(int,long)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updateExtensions(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(int,long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateAll(android.net.Uri,int,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.LegacyApiSupport: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (11)
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> (1)
<com.android.phone.CallLogAsync$AddCallTask: android.net.Uri[] doInBackground(com.android.phone.CallLogAsync$AddCallArgs[])> (1)
<com.android.phone.CallLogAsync$AddCallTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.contacts.list.ProviderStatusLoader: void retryUpgrade()> (1)
<com.android.contacts.list.ContactsUnavailableFragment: void onClick(android.view.View)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateContactMethods(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.exchange.adapter.ContactsSyncAdapter: void setSyncKey(java.lang.String,boolean)> (2)
<com.android.exchange.adapter.AbstractSyncAdapter: void setSyncKey(java.lang.String,boolean)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.AccountSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: void setSyncKey(java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: java.lang.String getSyncKey()> (4)
<com.android.exchange.adapter.AccountSyncAdapter: java.lang.String getSyncKey()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: java.lang.String getSyncKey()> (2)
<com.android.exchange.adapter.EmailSyncAdapter: boolean sendLocalChanges(com.android.exchange.adapter.Serializer)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhoto(long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,int,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.contacts.ContactSaveService: void buildJoinContactDiff(java.util.ArrayList,long,long)> (1)
<com.android.contacts.ContactSaveService: void joinContacts(android.content.Intent)> (1)
<com.android.contacts.ContactSaveService: void clearPrimary(android.content.Intent)> (1)
<com.android.mms.data.Contact: android.net.Uri getPhoneUri()> (1)
<com.android.mms.ui.ComposeMessageActivity: void launchMultiplePhonePicker()> (1)
<com.android.mms.ui.ComposeMessageActivity: void onClick(android.view.View)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePhones(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateGroups(long,android.content.ContentValues)> (1)
<com.android.providers.contacts.LegacyApiSupport: void updateLegacyPhotoData(long,long,android.content.ContentValues)> (2)
<com.android.providers.contacts.LegacyApiSupport: int updatePhotoByDataId(long,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> ()
<com.android.contacts.model.EntityDelta: android.content.ContentProviderOperation$Builder buildSetAggregationMode(java.lang.Long,int)> (1)
<com.android.contacts.model.EntityDelta: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.model.EntityDeltaList: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.ContactSaveService: void createGroup(android.content.Intent)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$GroupDelta: android.content.ContentProviderOperation buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountDisplay: void buildDiff(java.util.ArrayList)> (1)
<com.android.contacts.list.CustomContactListFilterActivity$AccountSet: java.util.ArrayList buildDiff()> (1)
<com.android.contacts.list.CustomContactListFilterActivity: void doSaveAction()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onBackPressed()> (2)
<com.android.contacts.list.CustomContactListFilterActivity: void onClick(android.view.View)> (1)
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void endEntry()> (1)
<com.android.vcard.VCardInterpreter: void endEntry()> (2)
<com.android.vcard.VCardInterpreterCollection: void endEntry()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard(boolean)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseVCardFile()> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard(boolean)> (1)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V30: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseVCardFile()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (2)
<com.android.contacts.vcard.ImportProcessor: boolean readOneVCard(android.net.Uri,int,java.lang.String,com.android.vcard.VCardInterpreter,int[])> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: com.android.contacts.vcard.ImportRequest constructImportRequest(android.net.Uri,android.net.Uri)> (1)
<com.android.contacts.vcard.ImportProcessor: void runInternal()> (1)
<com.android.contacts.vcard.ImportVCardActivity$VCardCacheThread: void run()> (2)
<com.android.contacts.vcard.ImportProcessor: void run()> (1)
<com.android.contacts.vcard.ImportVCardActivity$ImportRequestConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.contacts.vcard.ProcessorBase: void run()> ()
<com.android.providers.telephony.SmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.providers.contacts.LegacyApiSupport: android.net.Uri findFirstDataRow(long,java.lang.String)> (1)
<com.android.providers.contacts.LegacyApiSupport: int updatePeople(long,android.content.ContentValues)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.net.Uri getContactMethodUri(int)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.net.Uri getDataUri(int)> (1)
<com.android.contacts.ContactSaveService: void renameGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (12)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (6)
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.activities.ShowOrCreateActivity: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (5)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean onContactIdLoaded(android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.lang.String buildUri()> (2)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.EventInfoFragment$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result load(android.content.Context,java.lang.String)> (2)
<com.android.contacts.ContactSaveService: void createRawContact(android.content.Intent)> (1)
<com.android.contacts.vcard.ImportProcessor: void doFinishNotification(android.net.Uri)> (1)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getContactUri(int)> (9)
<com.android.contacts.list.ContactListAdapter: android.net.Uri getFirstContactUri()> (4)
<com.android.contacts.list.ContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int,android.database.Cursor)> (1)
<com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData: boolean access$400(com.android.mms.ui.MessageListAdapter$AvatarCache$ContactData,android.database.Cursor,int,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: java.util.ArrayList asList(java.lang.String[])> (1)
<com.android.providers.contacts.GlobalSearchSupport$SearchSuggestion: void addColumnValue(java.util.ArrayList,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.NotificationController: android.graphics.Bitmap getSenderPhoto(com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getContactUri(int)> (2)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getContactUri(int)> (1)
<com.android.contacts.list.StrequentContactListFragment: void onClick(android.view.View)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.JoinContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.net.Uri getFirstContactUri()> (1)
<com.android.contacts.list.DefaultContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.contacts.list.JoinContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindQuickContact(com.android.contacts.list.ContactListItemView,int,android.database.Cursor)> (2)
<com.android.mms.ui.MessageListAdapter$AvatarCache$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor buildCursorForSearchSuggestionsBasedOnFilter(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.email.NotificationController: android.app.Notification createNewMessageNotification(long,int)> (1)
<com.android.contacts.list.JoinContactListFragment: void onItemClick(int,long)> (2)
<com.android.contacts.list.DefaultContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.contacts.list.StrequentContactListAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchShortcutRefresh(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String)> (2)
<com.android.providers.contacts.GlobalSearchSupport: android.database.Cursor handleSearchSuggestionsQuery(android.database.sqlite.SQLiteDatabase,android.net.Uri,java.lang.String[],java.lang.String)> (2)
<com.android.email.NotificationController$2: void run()> (1)
<com.android.common.widget.CompositeCursorAdapter: void bindView(android.view.View,int,android.database.Cursor,int)> (1)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor queryLocal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,long)> (1)
<com.android.providers.contacts.LegacyApiSupport: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String)> (4)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (17)
<com.android.providers.contacts.ContactsProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (6)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getContactMethodType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.widget.CompositeCursorAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (16)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.database.Cursor,int,android.view.View,android.view.ViewGroup)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.ContactsProvider2: int deleteData(long,java.lang.String[])> (1)
<com.android.providers.contacts.ContactsProvider2: int updateData(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.providers.contacts.LegacyApiSupport: java.lang.String getType(android.net.Uri)> (1)
<com.android.calendar.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.common.contacts.BaseEmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactEntryListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.ContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.contacts.list.DefaultContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.JoinContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.list.LegacyContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.LegacyPostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PhoneNumberListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.list.PostalAddressListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.contacts.widget.IndexerListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.contacts.widget.PinnedHeaderListDemoActivity$TestPinnedHeaderListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.email.EmailAddressAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)> (1)
<com.android.contacts.list.StrequentContactListAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (3)
<com.android.providers.contacts.LegacyApiSupport: int updateOrganizations(long,android.content.ContentValues)> (1)
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int,int,int[])> (1)
<com.android.contacts.model.EntityDeltaList: void buildSplitContactDiff(java.util.ArrayList,int[])> (1)
<com.android.mms.data.Contact: android.net.Uri getUri()> (4)
<com.android.mms.ui.ComposeMessageActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mms.ui.ComposeMessageActivity$RecipientsMenuClickListener: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mms.ui.ConversationList: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.mms.ui.ConversationListItem: void updateAvatarView()> (2)
<com.android.mms.ui.ConversationListItem: void bind(android.content.Context,com.android.mms.ui.ConversationListItemData)> (1)
<com.android.mms.ui.ConversationListItem: void updateFromView()> (1)
<com.android.mms.ui.ConversationListAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.mms.ui.ConversationListItem: void access$000(com.android.mms.ui.ConversationListItem)> (1)
<com.android.mms.ui.ConversationListItem$1: void run()> (1)
<com.android.providers.contacts.LegacyApiSupport: int updateSettings(android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<com.android.phone.SimContacts: void actuallyImportOneSimContact(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (2)
<com.android.phone.SimContacts: void access$100(android.database.Cursor,android.content.ContentResolver,android.accounts.Account)> (1)
<com.android.phone.SimContacts: void importOneSimContact(int)> (2)
<com.android.phone.SimContacts$ImportAllSimContactsThread: void run()> (2)
<com.android.phone.SimContacts: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.phone.SimContacts: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.phone.SimContacts: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.phone.ADNList: boolean onContextItemSelected(android.view.MenuItem)> (3)
<com.android.exchange.adapter.ContactsSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: void cleanup()> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncAdapter$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncAdapter$EasContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.contacts.model.EntityDeltaList: android.content.ContentProviderOperation$Builder beginKeepTogether()> (1)
<android.pim.ContactsAsyncHelper$ImageTracker: android.net.Uri getPhotoUri()> (1)
<com.android.phone.CallCard: void updatePhotoForCallState(com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void displayMainCallStatus(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (3)
<com.android.phone.CallCard: void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)> (1)
<com.android.phone.CallCard: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateForegroundCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateNoCall(com.android.internal.telephony.CallManager)> (1)
<com.android.phone.CallCard: void updateRingingCall(com.android.internal.telephony.CallManager)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener: void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)> (1)
<com.android.phone.CallCard: void updateState(com.android.internal.telephony.CallManager)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.InCallScreen: void updateSlidingTabHint(int,int)> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallTouchUi: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onGrabbedStateChange(android.view.View,int)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab: void setGrabbedState(int)> (3)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.SlidingTab: void cancelGrab()> (2)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<com.android.internal.widget.SlidingTab: void onVisibilityChanged(android.view.View,int)> (2)
<com.android.contacts.ContactSaveService: void deleteGroup(android.content.Intent)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: android.net.Uri buildAggregationSuggestionUri(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.AggregationSuggestionEngine: void onNameChange(com.android.contacts.model.EntityDelta$ValuesDelta)> (1)
<com.android.contacts.editor.ContactEditorFragment: void acquireAggregationSuggestions(com.android.contacts.editor.RawContactEditorView)> (2)
<com.android.contacts.editor.ContactEditorFragment$1: void onRequest(int)> (1)
<com.android.contacts.editor.Editor$EditorListener: void onRequest(int)> (3)
<com.android.contacts.editor.LabeledEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (4)
<com.android.contacts.editor.LabeledEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.PhotoEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.editor.Editor: void onFieldChanged(java.lang.String,java.lang.String)> ()
<com.android.contacts.editor.EventFieldEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.PhoneticNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (3)
<com.android.contacts.editor.EventFieldEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onOptionalFieldVisibilityChange()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onOptionalFieldVisibilityChange()> (3)
<com.android.contacts.editor.EventFieldEditorView$2: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.EventFieldEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onFieldChanged(java.lang.String,java.lang.String)> (2)
<com.android.contacts.editor.TextFieldsEditorView$2: void afterTextChanged(android.text.Editable)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onOptionalFieldVisibilityChange()> (2)
<com.android.contacts.editor.TextFieldsEditorView$1: void onClick(android.view.View)> (1)
<com.android.contacts.datepicker.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.contacts.datepicker.DatePicker,int,int,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onLabelRebuilt()> (5)
<com.android.contacts.datepicker.DatePickerDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.contacts.editor.LabeledEditorView: void onTypeSelectionChange(int)> (5)
<com.android.contacts.editor.PhoneticNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onLabelRebuilt()> (1)
<com.android.contacts.editor.EventFieldEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.LabeledEditorView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.contacts.editor.PhoneticNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.StructuredNameEditorView: void onTypeSelectionChange(int)> (1)
<com.android.contacts.editor.TextFieldsEditorView: void onTypeSelectionChange(int)> (1)
Permission:android.permission.SET_WALLPAPER_HINTS
11 Callers:
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> ()
<android.app.IWallpaperManager$Stub: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IWallpaperManager: void setDimensionHints(int,int)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> (1)
<com.android.launcher2.Workspace$3: void run()> (2)
<com.android.launcher2.Workspace: void setWallpaperDimension()> (1)
<com.android.launcher2.Launcher: void setupViews()> (1)
<com.android.launcher2.Launcher: void onCreate(android.os.Bundle)> (1)
Permission:android.permission.FLASHLIGHT
6 Callers:
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> ()
<android.os.IHardwareService$Stub: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IHardwareService: void setFlashlightEnabled(boolean)> ()
<com.android.server.LightsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
7 Callers:
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.BLUETOOTH
1612 Callers:
<android.server.BluetoothAdapterProperties: void getAllProperties()> (2)
<android.server.BluetoothAdapterProperties: java.lang.String getProperty(java.lang.String)> (5)
<android.server.BluetoothEventLoop: void onPropertyChanged(java.lang.String[])> (1)
<android.server.BluetoothAdapterProperties: java.lang.String getObjectPath()> (2)
<android.server.BluetoothBondState: void loadBondState()> (1)
<android.server.BluetoothService: java.lang.String getProperty(java.lang.String)> (8)
<android.server.BluetoothService: void initProfileState()> (1)
<android.server.BluetoothService: void updateBluetoothState(java.lang.String)> (1)
<android.server.BluetoothService: java.lang.String getAddressFromObjectPath(java.lang.String)> (19)
<android.server.BluetoothService: java.lang.String getObjectPathFromAddress(java.lang.String)> (23)
<android.server.BluetoothService$EnableThread: void run()> (2)
<android.server.BluetoothA2dpService: void onBluetoothEnable()> (2)
<android.server.BluetoothService: android.os.ParcelUuid[] getUuids()> (2)
<android.server.BluetoothService: int getDiscoverableTimeout()> (2)
<android.server.BluetoothService: int getScanMode()> (2)
<android.server.BluetoothService: java.lang.String getAddress()> (3)
<android.server.BluetoothService: java.lang.String[] getKnownDevices()> (2)
<android.server.BluetoothService: java.lang.String getName()> (3)
<android.server.BluetoothService: void access$800(android.server.BluetoothService)> (1)
<android.server.BluetoothA2dpService: void onConnectSinkResult(java.lang.String,boolean)> ()
<android.server.BluetoothA2dpService: void onSinkPropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: boolean onAgentAuthorize(java.lang.String,java.lang.String)> ()
<android.server.BluetoothEventLoop: boolean onAgentOutOfBandDataAvailable(java.lang.String)> ()
<android.server.BluetoothEventLoop: java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)> (6)
<android.server.BluetoothEventLoop: void onDeviceCreated(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDeviceDisconnectRequested(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onDeviceRemoved(java.lang.String)> ()
<android.server.BluetoothEventLoop: void onDiscoverServicesResult(java.lang.String,boolean)> ()
<android.server.BluetoothEventLoop: void onInputDeviceConnectionResult(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onInputDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothEventLoop: void onPanDeviceConnectionResult(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onPanDevicePropertyChanged(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothService: void autoConnect()> (1)
<android.server.BluetoothService: void dumpAclConnectedDevices(java.io.PrintWriter)> (1)
<android.server.BluetoothA2dpService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothA2dpService: boolean addAudioSink(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean isConnectSinkFeasible(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean isDisconnectSinkFeasible(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void onBluetoothDisable()> (1)
<android.server.BluetoothEventLoop: void onCreateDeviceResult(java.lang.String,int)> ()
<android.server.BluetoothInputProfileHandler: boolean connectInputDevice(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothDeviceProfileState)> (1)
<android.server.BluetoothInputProfileHandler: boolean connectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothInputProfileHandler: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothDeviceProfileState)> (1)
<android.server.BluetoothInputProfileHandler: boolean disconnectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothPanProfileHandler: boolean disconnectPanServerDevices()> (1)
<android.server.BluetoothService: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.server.BluetoothService: boolean removeBondInternal(java.lang.String)> (1)
<android.server.BluetoothService: boolean setTrust(java.lang.String,boolean)> (3)
<android.server.BluetoothService: int getDeviceServiceChannelForUuid(java.lang.String,android.os.ParcelUuid)> (1)
<android.server.BluetoothService: java.lang.String[] getRemoteDeviceProperties(java.lang.String)> (2)
<android.server.BluetoothService: void setLinkTimeout(java.lang.String,int)> (1)
<android.server.BluetoothService: boolean enable(boolean)> (2)
<android.server.BluetoothA2dpService: void access$000(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothA2dpService: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getUuids()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> ()
<android.bluetooth.IBluetooth$Stub: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> ()
<android.bluetooth.IBluetooth$Stub: int getScanMode()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getAddress()> (2)
<android.server.BluetoothService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getName()> (2)
<android.server.BluetoothEventLoop: void onDisplayPasskey(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestOobData(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPairingConsent(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskeyConfirmation(java.lang.String,int,int)> ()
<android.server.BluetoothEventLoop: void onRequestPasskey(java.lang.String,int)> ()
<android.server.BluetoothEventLoop: void onRequestPinCode(java.lang.String,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothDeviceProfileState: boolean processCommand(int)> (9)
<android.bluetooth.IBluetoothA2dp$Stub: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothA2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: void access$100(android.server.BluetoothA2dpService)> (1)
<android.server.BluetoothService: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothService: boolean connectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothService: boolean disconnectInputDeviceInternal(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (3)
<android.server.BluetoothPanProfileHandler: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> ()
<android.bluetooth.IBluetooth$Stub: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setTrust(java.lang.String,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setTrust(java.lang.String,boolean)> (2)
<android.server.BluetoothService: void updateDeviceServiceChannelCache(java.lang.String)> (2)
<android.server.BluetoothDeviceProperties: java.util.Map updateCache(java.lang.String)> (3)
<android.server.BluetoothService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.server.BluetoothService: boolean enable()> (4)
<com.android.server.ServerThread: void run()> (1)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getUuids()> (1)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: int getDiscoverableTimeout()> (1)
<android.bluetooth.IBluetooth: int getScanMode()> (1)
<android.bluetooth.IBluetooth: java.lang.String getAddress()> (1)
<android.bluetooth.IBluetooth: java.lang.String getName()> (1)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void enter()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void enter()> (1)
<android.bluetooth.IBluetoothA2dp: boolean connectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: void disconnectDevices()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothService: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.IBluetooth: boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)> (2)
<android.bluetooth.IBluetooth: boolean setTrust(java.lang.String,boolean)> (1)
<android.server.BluetoothDeviceProperties: java.util.Map addProperties(java.lang.String,java.lang.String[])> (2)
<android.server.BluetoothDeviceProperties: java.lang.String getProperty(java.lang.String,java.lang.String)> (5)
<android.server.BluetoothService: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (2)
<android.server.BluetoothService: void updateRemoteDevicePropertiesCache(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.server.BluetoothService: void finishDisable(boolean)> (1)
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> (2)
<android.server.BluetoothService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> ()
<android.bluetooth.BluetoothAdapter: int getScanMode()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (8)
<com.android.internal.util.State: void enter()> (13)
<android.server.BluetoothA2dpService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean resumeSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean suspendSink(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean connectInputDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disconnectInputDevice(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: boolean disable(boolean)> (6)
<android.bluetooth.IBluetooth: boolean connectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disconnectPanDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetooth$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> (2)
<android.bluetooth.BluetoothSocket$SdpHelper: int doSdp()> (1)
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> (1)
<android.server.BluetoothEventLoop: void addDevice(java.lang.String,java.lang.String[])> (2)
<android.server.BluetoothService: android.os.ParcelUuid[] getUuidFromCache(java.lang.String)> (2)
<android.server.BluetoothService: boolean getTrustState(java.lang.String)> (2)
<android.server.BluetoothService: int getRemoteClass(java.lang.String)> (3)
<android.server.BluetoothService: java.lang.String getRemoteName(java.lang.String)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetooth: boolean enable()> (1)
<android.server.BluetoothService: void access$000(android.server.BluetoothService,boolean)> (1)
<com.android.phone.BluetoothHeadsetService: void getSdpRecordsAndConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: android.os.ParcelUuid[] getUuids()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getScanMode()> (2)
<com.android.settings.deviceinfo.Status: void setBtStatus()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: java.lang.String getName()> (2)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: void processMsg(android.os.Message)> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.BluetoothHandsfree: void audioOff()> (11)
<com.android.phone.BluetoothHandsfree: boolean audioOn()> (9)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean disable(boolean)> (2)
<android.server.BluetoothService: boolean disable()> ()
<android.server.BluetoothService: void restart()> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.IBluetooth: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void doOpushSdp()> (1)
<com.android.phone.BluetoothHeadsetService$RfcommConnectThread: void run()> (2)
<android.bluetooth.BluetoothSocket: void connect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<android.server.BluetoothEventLoop: void onDeviceFound(java.lang.String,java.lang.String[])> ()
<android.server.BluetoothService: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (6)
<android.server.BluetoothService: void sendUuidIntent(java.lang.String)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean getTrustState(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean getTrustState(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteClass(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteName(java.lang.String)> (2)
<android.server.BluetoothBondState: boolean isAutoPairingBlacklisted(java.lang.String)> (1)
<android.server.BluetoothService: void dumpKnownDevices(java.io.PrintWriter)> (1)
<android.bluetooth.IBluetooth: int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (4)
<com.android.phone.BluetoothHeadsetService: void access$1600(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean updateProfiles()> (3)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void <init>(android.content.Context,com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.CachedBluetoothDeviceManager,com.android.settings.bluetooth.BluetoothEventManager)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager: void setBluetoothStateOn()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void resume()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void updateCountdownSummary()> (3)
<com.android.settings.deviceinfo.Status: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.BluetoothNamePreference: void onClick()> (3)
<com.android.settings.bluetooth.BluetoothNamePreference: void setSummaryToName()> (2)
<com.android.internal.util.StateMachine$SmHandler: void completeConstruction()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions()> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult headsetButtonPress()> (2)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void handlePreciseCallStateChange(boolean,com.android.internal.telephony.Connection)> (2)
<com.android.phone.BluetoothHandsfree: boolean stopVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: boolean terminateScoUsingVirtualVoiceCall()> (6)
<com.android.phone.BluetoothHandsfree$DebugThread: void run()> (2)
<com.android.phone.BluetoothHandsfree: void disconnectHeadset()> (1)
<com.android.phone.BluetoothHandsfree: void onBluetoothDisabled()> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOff()> (1)
<com.android.phone.CallNotifier: void resetAudioStateAfterDisconnect()> (2)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree: boolean initiateScoUsingVirtualVoiceCall()> (1)
<com.android.phone.BluetoothHandsfree: boolean startVoiceRecognition()> (1)
<com.android.phone.BluetoothHandsfree: void connectHeadset(android.bluetooth.HeadsetBase,int)> (2)
<com.android.phone.BluetoothHandsfree: void userWantsAudioOn()> (1)
<com.android.settings.bluetooth.HidProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean disable(boolean)> (2)
<android.server.BluetoothEventLoop: void onRestartRequired()> (1)
<com.android.settings.bluetooth.PanProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> (1)
<com.android.settings.bluetooth.PanProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer$SocketConnectThread: void run()> (2)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (2)
<android.server.BluetoothA2dpService: boolean isSinkDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: boolean getTrustState(java.lang.String)> (1)
<android.bluetooth.IBluetooth: int getRemoteClass(java.lang.String)> (1)
<android.bluetooth.IBluetooth: java.lang.String getRemoteName(java.lang.String)> (1)
<android.server.BluetoothService: boolean attemptAutoPair(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: int getServiceChannel(android.os.ParcelUuid)> (3)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean enable()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothEnabled(boolean)> (2)
<com.android.settings.TetherSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.phone.BluetoothHeadsetService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectWithoutResettingTimer(boolean)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fillData()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onUuidChanged()> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: void <init>(com.android.settings.bluetooth.LocalBluetoothAdapter,android.content.Context)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setBluetoothStateInt(int)> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onResume()> (4)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void access$100(com.android.settings.bluetooth.BluetoothDiscoverableEnabler)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void handleModeChanged(int)> (2)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void setEnabled(boolean)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: void access$000(com.android.settings.bluetooth.BluetoothNamePreference)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.internal.util.StateMachine$SmHandler: void access$2200(com.android.internal.util.StateMachine$SmHandler)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (16)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void access$1600(com.android.phone.BluetoothHandsfree$BluetoothPhoneState,boolean,com.android.internal.telephony.Connection)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult redial()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHandsfree: void startDebug()> (1)
<com.android.phone.BluetoothHeadsetService: void setState(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.phone.BluetoothHeadsetService: void onDestroy()> (1)
<com.android.phone.InCallScreen: void disconnectBluetoothAudio()> (3)
<com.android.phone.CallNotifier: void access$1000(com.android.phone.CallNotifier)> (1)
<com.android.phone.CallNotifier: void onDisconnect(android.os.AsyncResult)> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleTestCommand()> (22)
<com.android.phone.BluetoothHeadsetService$6: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: void connectBluetoothAudio()> (1)
<android.bluetooth.BluetoothAdapter: boolean disable()> (3)
<com.android.internal.app.ShutdownThread: void run()> (2)
<android.net.NetworkStateTracker: boolean teardown()> (2)
<com.android.settings.TetherSettings$TetherChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.phone.BluetoothHandsfree: void connectScoThread()> (2)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getRemoteUuids(java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean getTrustState()> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> (3)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> (7)
<com.android.bluetooth.opp.BluetoothOppTransfer$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: void applyBtSettings(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.settings.bluetooth.DockService: void handleBtStateChange(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connect(boolean)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void <init>(com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onUuidChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothManager: com.android.settings.bluetooth.LocalBluetoothManager getInstance(android.content.Context)> (10)
<com.android.settings.bluetooth.BluetoothEventManager$AdapterStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean syncBluetoothState()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onResume()> (6)
<com.android.settings.SettingsPreferenceFragment: void onResume()> (19)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$2: void run()> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: void access$000(com.android.settings.bluetooth.BluetoothDiscoverableEnabler,int)> (1)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.util.StateMachine: void start()> (13)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectInt(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (3)
<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleActionCommand()> (19)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState: void <init>(com.android.phone.BluetoothHandsfree,com.android.phone.BluetoothHandsfree$1)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.AtCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (32)
<com.android.phone.BluetoothHandsfree: android.bluetooth.AtCommandResult access$5400(com.android.phone.BluetoothHandsfree)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService: void access$2100(com.android.phone.BluetoothHeadsetService,android.bluetooth.BluetoothDevice,int)> (6)
<com.android.phone.InCallScreen: void onBluetoothClick()> (2)
<com.android.phone.InCallScreen: void onSpeakerClick()> (2)
<com.android.phone.OtaUtils: void setSpeaker(boolean)> (3)
<com.android.phone.CallNotifier$InCallTonePlayer: void run()> (6)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleTestCommand()> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean disable()> (2)
<com.android.internal.app.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.ConnectivityService: boolean teardown(android.net.NetworkStateTracker)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.phone.BluetoothHandsfree: void access$3200(com.android.phone.BluetoothHandsfree)> (3)
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> (5)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$ClassUuidFilter: boolean matches(android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchBtClass()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> (4)
<com.android.phone.BluetoothHandsfree: void configAudioParameters()> (1)
<com.android.settings.bluetooth.BluetoothPairingRequest: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: java.lang.String getName(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void fetchName()> (2)
<com.android.settings.bluetooth.DockService: void access$700(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.settings.bluetooth.DockService: void handleBluetoothStateOn(int)> (1)
<com.android.settings.bluetooth.DockService: void handleDocked(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.bluetooth.DockService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.bluetooth.IBluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onClicked()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingDockConnect()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)> (1)
<com.android.settings.bluetooth.DockService: void connectIfEnabled(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: com.android.settings.bluetooth.CachedBluetoothDevice addDevice(com.android.settings.bluetooth.LocalBluetoothAdapter,com.android.settings.bluetooth.LocalBluetoothProfileManager,android.bluetooth.BluetoothDevice)> (5)
<com.android.settings.bluetooth.BluetoothEventManager$UuidChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void <init>(android.content.Context,android.preference.CheckBoxPreference)> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCreate(android.os.Bundle)> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onCreate(android.os.Bundle)> (6)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.bluetooth.DockService: void onCreate()> (1)
<com.android.settings.bluetooth.LocalBluetoothPreferences: boolean shouldShowDialogInForeground(android.content.Context,java.lang.String)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: boolean parseIntent()> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: boolean parseIntent()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$Handler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getBluetoothState()> (5)
<com.android.settings.bluetooth.BluetoothFindNearby: void onResume()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onResume()> (4)
<com.android.settings.accounts.AccountPreferenceBase: void onResume()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onResume()> (3)
<com.android.settings.DateTimeSettings: void onResume()> (3)
<com.android.settings.deviceinfo.Memory: void onResume()> (3)
<com.android.settings.DisplaySettings: void onResume()> (3)
<com.android.settings.DockSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onResume()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onResume()> (3)
<com.android.settings.PrivacySettings: void onResume()> (3)
<com.android.settings.SecuritySettings: void onResume()> (3)
<com.android.settings.SoundSettings: void onResume()> (3)
<com.android.settings.vpn.VpnSettings: void onResume()> (3)
<com.android.settings.wifi.AdvancedSettings: void onResume()> (3)
<com.android.settings.wifi.WifiSettings: void onResume()> (3)
<com.android.settings.WirelessSettings: void onResume()> (3)
<com.android.settings.bluetooth.BluetoothDiscoverableEnabler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.BluetoothDeviceProfileState: void start()> (2)
<android.bluetooth.BluetoothProfileState: void start()> (3)
<android.net.DhcpStateMachine: void start()> (2)
<android.net.wifi.SupplicantStateTracker: void start()> (2)
<android.net.wifi.WifiStateMachine: void start()> (2)
<android.net.wifi.WpsStateMachine: void start()> (2)
<com.android.internal.telephony.cat.RilMessageDecoder: void start()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnection: void start()> (2)
<com.android.internal.telephony.DataConnection: void start()> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: void start()> (2)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM: void start()> (1)
<com.android.server.connectivity.Tethering: void <init>(android.content.Context,android.os.Looper)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectAutoConnectableProfiles()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void connectProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void disconnect()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings$1: void onClick(android.content.DialogInterface,int)> (1)
<android.bluetooth.HeadsetBase: void handleInput(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$5: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<com.android.phone.BluetoothHandsfree: void <init>(android.content.Context,com.android.internal.telephony.CallManager)> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothAtPhonebook$1: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$2: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothAtPhonebook$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$10: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$12: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$13: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$14: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$15: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$16: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$18: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$19: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$20: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$21: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$22: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$23: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$24: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$25: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$26: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$27: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$28: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$29: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$30: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$31: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$3: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$6: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$7: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$8: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$9: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$VendorSpecificCommandHandler: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.BluetoothHandsfree$11: android.bluetooth.AtCommandResult handleActionCommand()> (1)
<android.bluetooth.IBluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.InCallScreen: void handleOnscreenButtonClick(int)> (3)
<com.android.phone.InCallScreen: void onClick(android.view.View)> (1)
<com.android.phone.OtaUtils: void cleanOtaScreen(boolean)> (4)
<com.android.phone.OtaUtils: void onClickOtaEndButton()> (1)
<com.android.phone.OtaUtils: void onClickOtaSpeakerButton()> (1)
<com.android.phone.CallNotifier: void onNewRingingConnection(android.os.AsyncResult)> (1)
<com.android.phone.CallNotifier: void onPhoneStateChanged(android.os.AsyncResult)> (2)
<com.android.phone.CallNotifier: void onRingbackTone(android.os.AsyncResult)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDisableBluetooth(int)> (1)
<com.android.internal.app.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.internal.app.ShutdownThread: void shutdown(android.content.Context,boolean)> (4)
<com.android.server.ConnectivityService: void enforcePreference()> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: int access$100(com.android.server.ConnectivityService,com.android.server.ConnectivityService$FeatureUser,boolean)> (2)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.phone.BluetoothHandsfree$BluetoothPhoneState$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.BluetoothA2dp: boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.settings.bluetooth.BluetoothDeviceFilter$AudioFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$Filter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$NapFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$PanuFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$TransferFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshBtClass()> (1)
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppTransferInfo queryRecord(android.content.Context,android.net.Uri)> (5)
<com.android.settings.bluetooth.BluetoothPairingDialog: android.view.View createView(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refreshName()> (1)
<com.android.settings.bluetooth.DockService$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeDocked(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.settings.bluetooth.DockService: void access$200(com.android.settings.bluetooth.DockService,android.bluetooth.BluetoothDevice,int,int)> (1)
<android.bluetooth.BluetoothHeadset: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (4)
<com.android.settings.bluetooth.BluetoothEventManager$BondStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager: boolean readPairedDevices()> (2)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceFoundHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: com.android.settings.bluetooth.CachedBluetoothDevice getCachedBluetoothDevice(android.bluetooth.BluetoothDevice)> (4)
<com.android.settings.bluetooth.HeadsetProfile$HeadsetServiceListener: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$StateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothSettings: void addPreferencesForActivity()> (1)
<com.android.settings.WirelessSettings: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (19)
<com.android.settings.bluetooth.BluetoothFindNearby: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onCreate(android.os.Bundle)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onCreate(android.os.Bundle)> (4)
<com.android.settings.SettingsPreferenceFragment: void onCreate(android.os.Bundle)> (25)
<com.android.settings.bluetooth.RequestPermissionActivity: void onCreate(android.os.Bundle)> (1)
<com.android.settings.bluetooth.RequestPermissionHelperActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getActualState(android.content.Context)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.settings.bluetooth.BluetoothEnabler: void resume()> (2)
<com.android.settings.accounts.AccountSyncSettings: void onResume()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onResume()> (4)
<android.server.BluetoothService: android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)> (2)
<android.server.BluetoothInputProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<android.server.BluetoothService: void <init>(android.content.Context)> (1)
<android.net.DhcpStateMachine: android.net.DhcpStateMachine makeDhcpStateMachine(android.content.Context,com.android.internal.util.StateMachine,java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WpsStateMachine: void <init>(android.content.Context,android.net.wifi.WifiStateMachine,android.os.Handler)> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnection: com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.internal.telephony.gsm.GsmDataConnection: com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.PhoneBase,int,com.android.internal.telephony.RetryManager)> (1)
<com.android.server.connectivity.Tethering: void interfaceAdded(java.lang.String)> (3)
<com.android.server.connectivity.Tethering: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onProfileClicked(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: void handleUnexpectedDisconnect(android.bluetooth.BluetoothDevice,com.android.settings.bluetooth.LocalBluetoothProfile,int)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void unpair()> (1)
<com.android.settings.bluetooth.DockService: void handleUndocked(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.HeadsetBase$1: void run()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.CallCard: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onClick(android.view.View)> (1)
<com.android.phone.InCallTouchUi: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: boolean initOtaState()> (1)
<com.android.phone.InCallScreen: void onStop()> (1)
<com.android.phone.InCallScreen: void setInCallScreenMode(com.android.phone.InCallScreen$InCallScreenMode)> (13)
<com.android.phone.PhoneApp: void clearOtaState()> (3)
<com.android.phone.OtaUtils: void onClickHandler(int)> (1)
<com.android.phone.CallNotifier: void onUnknownConnectionAppeared(android.os.AsyncResult)> (1)
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService: void processMessage(android.os.Message)> (2)
<com.android.internal.app.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$3: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$3: void run()> (1)
<com.android.server.ShutdownActivity$1: void run()> (1)
<com.android.server.ConnectivityService: void handleSetNetworkPreference(int)> (1)
<com.android.server.ConnectivityService: void access$400(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService$FeatureUser: void binderDied()> (2)
<com.android.server.ConnectivityService$FeatureUser: void expire()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$900(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (5)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onBtClassChanged(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void updateProgressbar()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void openCompleteTransfer()> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConfirmationDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createConsentDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createDisplayPasskeyOrPinDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.BluetoothPairingDialog: void createUserEntryDialog(com.android.settings.bluetooth.CachedBluetoothDeviceManager)> (1)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onDeviceNameUpdated(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DockService$1: void run()> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onDevicePreferenceClick(com.android.settings.bluetooth.BluetoothDevicePreference)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfileManager$PanStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void addPreferencesForActivity()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (5)
<com.android.internal.app.RingtonePickerActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.ActivityPicker: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SettingsLicenseActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.SettingsSafetyLegalActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbAccessoryUriActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbPermissionActivity: void onCreate(android.os.Bundle)> (2)
<com.android.settings.AccessibilitySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ApplicationSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.ChooseLockGeneric$ChooseLockGenericFragment: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DateTimeSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.deviceinfo.Memory: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DeviceInfoSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DisplaySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.DockSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onCreate(android.os.Bundle)> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onCreate(android.os.Bundle)> (3)
<com.android.settings.PrivacySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SecuritySettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.SoundSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TetherSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.TextToSpeechSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnEditor: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.vpn.VpnTypeSelection: void onCreate(android.os.Bundle)> (3)
<com.android.settings.wifi.AdvancedSettings: void onCreate(android.os.Bundle)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: int getTriState(android.content.Context)> (6)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int,int)> (4)
<android.server.BluetoothInputProfileHandler: android.server.BluetoothInputProfileHandler getInstance(android.content.Context,android.server.BluetoothService)> (2)
<android.net.wifi.WifiStateMachine$ConnectingState: void enter()> (1)
<com.android.server.WifiService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.cat.CatService: void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void createAllDataConnectionList()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.gsm.GsmDataConnection createDataConnection()> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceAdded(java.lang.String)> (2)
<com.android.server.connectivity.Tethering: void enableUsbIfaces(boolean)> (1)
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStatusChanged(java.lang.String,boolean)> ()
<android.net.INetworkManagementEventObserver$Stub: void interfaceLinkStatusChanged(java.lang.String,boolean)> (2)
<com.android.server.ConnectivityService: com.android.server.ConnectivityService getInstance(android.content.Context)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void unpairDevice()> (1)
<com.android.settings.bluetooth.DockService: boolean msgTypeUndockedPermanent(android.bluetooth.BluetoothDevice,int)> (1)
<android.media.AudioService$SetModeDeathHandler: void binderDied()> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (3)
<com.android.voicedialer.VoiceDialerActivity: void onStop()> (1)
<android.media.AudioService$ScoClient: void requestScoState(int)> (3)
<android.bluetooth.IBluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.widget.SlidingTab$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.phone.InCallScreen: void onResume()> (1)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus internalResolveIntent(android.content.Intent)> (3)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus placeCall(android.content.Intent)> (1)
<com.android.phone.InCallScreen: void endInCallScreenSession()> (11)
<com.android.phone.InCallScreen: void handleOtaCallEnd()> (2)
<com.android.phone.InCallScreen: void onBackPressed()> (1)
<com.android.phone.InCallScreen: void onDisconnect(android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void resetInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateManageConferencePanelIfNecessary()> (1)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void doReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void initForNewRadioTechnology()> (1)
<com.android.voicedialer.VoiceDialerActivity: void updateBluetoothParameters(boolean)> (1)
<com.android.settings.bluetooth.DockService: void access$100(com.android.settings.bluetooth.DockService,android.os.Message)> (1)
<com.android.server.PowerManagerService$10: void run()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.ConnectivityService: void access$1100(com.android.server.ConnectivityService,int)> (2)
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.settings.bluetooth.BluetoothCallback: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void addDevices()> (3)
<com.android.settings.bluetooth.DevicePickerFragment: void onDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$ClassChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: android.view.View createView()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void access$100(com.android.bluetooth.opp.BluetoothOppTransferActivity)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$NameChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.BluetoothSettings: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (2)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.systemui.usb.UsbResolverActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.AppWidgetPickActivity: void onCreate(android.os.Bundle)> (3)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$StateTracker: void toggleState(android.content.Context)> (5)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: int getTriState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: int getTriState(android.content.Context)> (1)
<android.server.BluetoothBondState: void setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: boolean cancelBondProcess(java.lang.String)> (2)
<android.server.BluetoothService: boolean cancelPairingUserInput(java.lang.String)> (3)
<android.server.BluetoothBondState: void <init>(android.content.Context,android.server.BluetoothService)> (1)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.CatService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.IccRecords,android.content.Context,com.android.internal.telephony.IccFileHandler,com.android.internal.telephony.IccCard)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean setupData(com.android.internal.telephony.ApnContext)> (1)
<android.net.INetworkManagementEventObserver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (4)
<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void updateUsbStatus()> (1)
<android.net.INetworkManagementEventObserver: void interfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount()> (1)
<android.bluetooth.BluetoothHeadset: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.phone.InCallScreen: void onCreate(android.os.Bundle)> (1)
<com.android.phone.InCallScreen: void onNewIntent(android.content.Intent)> (1)
<com.android.phone.OtaUtils: void otaPerformActivation()> (2)
<com.android.phone.InCallScreen: void addVoiceMailNumberPanel()> (1)
<com.android.phone.InCallScreen: void bailOutAfterErrorDialog()> (1)
<com.android.phone.InCallScreen: void delayedCleanupAfterDisconnect()> (2)
<com.android.phone.InCallScreen: void dontAddVoiceMailNumber()> (1)
<com.android.phone.InCallScreen: void onMMICancel()> (1)
<com.android.phone.InCallScreen: void onPause()> (1)
<com.android.phone.OtaUtils: void otaShowHome()> (2)
<com.android.phone.PhoneApp: void dismissCallScreen()> (1)
<com.android.phone.InCallScreen: void access$500(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<com.android.phone.InCallScreen: void updateAfterRadioTechnologyChange()> (1)
<com.android.phone.PhoneApp: void clearInCallScreenMode()> (2)
<com.android.phone.InCallScreen: void updateScreen()> (8)
<com.android.phone.OutgoingCallBroadcaster$OutgoingCallReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.PhoneApp: void access$1200(com.android.phone.PhoneApp)> (1)
<com.android.voicedialer.VoiceDialerActivity: void access$2200(com.android.voicedialer.VoiceDialerActivity,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.settings.bluetooth.BluetoothEventManager: void dispatchDeviceAdded(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.BluetoothFindNearby: void addDevices()> (1)
<com.android.settings.bluetooth.BluetoothSettings: void addDevices()> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void addDevices()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setUpDialog()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity$BluetoothTransferContentObserver: void onChange(boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateButtons(android.widget.RemoteViews,android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void setImageViewResources(android.content.Context,android.widget.RemoteViews)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$BluetoothStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker: void toggleState(android.content.Context)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$WifiStateTracker: void toggleState(android.content.Context)> (1)
<android.server.BluetoothService: boolean createBond(java.lang.String)> (3)
<android.server.BluetoothService: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int,int)> (5)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelPairingUserInput(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelPairingUserInput(java.lang.String)> (2)
<com.android.internal.telephony.cat.CatService: com.android.internal.telephony.cat.AppInterface getInstance()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(com.android.internal.telephony.ApnContext)> (4)
<android.net.EthernetDataTracker$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.connectivity.Tethering: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ThrottleService$InterfaceObserver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)> (1)
<com.android.server.connectivity.Tethering: void access$200(com.android.server.connectivity.Tethering)> (1)
<com.android.server.NetworkManagementService: void notifyInterfaceLinkStatusChanged(java.lang.String,boolean)> (1)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients(android.os.IBinder,boolean)> (4)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phone.OtaUtils: void access$200(com.android.phone.OtaUtils)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateButton()> (1)
<com.android.phone.InCallScreen: void access$1400(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$2600(com.android.phone.InCallScreen)> (2)
<com.android.phone.InCallScreen: void access$1600(com.android.phone.InCallScreen)> (4)
<com.android.phone.InCallScreen: void access$1500(com.android.phone.InCallScreen)> (1)
<com.android.phone.InCallScreen: void access$1100(com.android.phone.InCallScreen)> (1)
<com.android.phone.OtaUtils: void onClickOtaActivateNextButton()> (1)
<com.android.phone.OtaUtils: void otaShowActivateScreen()> (4)
<com.android.phone.InCallScreen: com.android.phone.InCallScreen$InCallInitStatus syncWithPhoneState()> (2)
<com.android.phone.InCallScreen: void access$900(com.android.phone.InCallScreen)> (3)
<com.android.phone.InCallScreen: void onPhoneStateChanged(android.os.AsyncResult)> (1)
<com.android.phone.PhoneApp$PhoneAppBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.voicedialer.VoiceDialerActivity$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.voicedialer.VoiceDialerActivity$VoiceDialerBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.mms.transaction.TransactionService: void endMmsConnectivity()> (6)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.settings.bluetooth.BluetoothEventManager: void access$1400(com.android.settings.bluetooth.BluetoothEventManager,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: android.widget.RemoteViews buildUpdate(android.content.Context)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (2)
<android.server.BluetoothService: boolean setBondState(java.lang.String,int)> (3)
<android.server.BluetoothService: void onCreatePairedDeviceResult(java.lang.String,int)> (1)
<android.server.BluetoothService: void pairingAttempt(java.lang.String,int)> (1)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean cancelPairingUserInput(java.lang.String)> (1)
<com.android.stk.StkAppService: void onCreate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(com.android.internal.telephony.ApnContext)> (5)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean trySetupData(java.lang.String,java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void applyNewState(com.android.internal.telephony.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void setupDataOnReadyApns(java.lang.String)> (7)
<com.android.server.NetworkManagementService: void access$000(com.android.server.NetworkManagementService,java.lang.String)> (1)
<com.android.server.connectivity.Tethering$StateReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NetworkManagementService: void access$200(com.android.server.NetworkManagementService,java.lang.String,boolean)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setMode(int)> (1)
<android.media.AudioService$2: void onServiceDisconnected(int)> (1)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder)> (2)
<com.android.phone.OtaUtils$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$12: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$13: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.InCallScreen$14: void onClick(android.content.DialogInterface,int)> (1)
<com.android.phone.InCallScreen$15: void onCancel(android.content.DialogInterface)> (1)
<com.android.phone.OtaUtils: void onClickOtaTryAgainButton()> (1)
<com.android.phone.OtaUtils: void onOtaCloseFailureNotice()> (2)
<com.android.phone.OtaUtils: void otaShowProperScreen()> (2)
<com.android.phone.InCallScreen: void requestUpdateBluetoothIndication()> (1)
<com.android.phone.InCallScreen: void access$400(com.android.phone.InCallScreen,android.os.AsyncResult)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (4)
<com.android.mms.transaction.TransactionService$ServiceHandler: void processPendingTransaction(com.android.mms.transaction.Transaction,com.android.mms.transaction.TransactionSettings)> (5)
<com.android.mms.transaction.TransactionService: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService$ServiceHandler: boolean processTransaction(com.android.mms.transaction.Transaction)> (5)
<com.android.mms.transaction.TransactionService: void launchTransaction(int,com.android.mms.transaction.TransactionBundle,boolean)> (1)
<com.android.mms.transaction.TransactionService: void onDestroy()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.settings.widget.SettingsAppWidgetProvider: void updateWidget(android.content.Context)> (3)
<android.bluetooth.IBluetooth: boolean createBond(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean createBondOutOfBand(java.lang.String,byte[],byte[])> (1)
<android.server.BluetoothEventLoop: void onCreatePairedDeviceResult(java.lang.String,int)> ()
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> (1)
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onPollPdp()> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void run()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean onTrySetupData(java.lang.String)> (6)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onApnChanged()> (4)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.NetworkManagementService$NetdCallbackReceiver: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.CallManager: void setAudioMode()> (1)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder)> (1)
<com.android.phone.InCallScreen: void requestCloseOtaFailureNotice(long)> (1)
<com.android.phone.InCallScreen: void onDialerClose()> (1)
<com.android.phone.PhoneApp: void updateBluetoothIndication(boolean)> (2)
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.mms.transaction.TransactionService: int beginMmsConnectivity()> (3)
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)> (1)
<com.android.mms.transaction.TransactionService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.internal.util.State: void exit()> (62)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> (1)
<android.bluetooth.BluetoothDevice: boolean createBondOutOfBand(byte[],byte[])> ()
<com.android.settings.bluetooth.BluetoothPairingDialog: void onCancel()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.DataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onEnableApn(int,int)> (2)
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (2)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void initApnContextsAndDataConnection()> (1)
<com.android.internal.telephony.DataConnectionTracker: boolean onTrySetupData(java.lang.String)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.DataConnectionTracker: void onVoiceCallEnded()> (1)
<com.android.server.INativeDaemonConnectorCallbacks: boolean onEvent(int,java.lang.String,java.lang.String[])> (1)
<com.android.phone.PhoneUtils: void setAudioMode(com.android.internal.telephony.CallManager)> (5)
<android.media.AudioManager: void stopBluetoothSco()> ()
<android.media.AudioManager: void startBluetoothSco()> ()
<com.android.phone.OtaUtils: void otaShowProgramFailureNotice(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerClose()> (2)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<com.android.mms.transaction.Observable: void notifyObservers()> (5)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void exit()> (1)
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void exit()> (1)
<android.bluetooth.BluetoothProfileState$PendingCommandState: void exit()> (1)
<android.bluetooth.BluetoothProfileState$StableState: void exit()> (1)
<android.net.DhcpStateMachine$DefaultState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverFailedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverLoadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void exit()> (1)
<android.net.wifi.WpsStateMachine$ActiveState: void exit()> (1)
<android.net.wifi.WpsStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WpsStateMachine$InactiveState: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (2)
<com.android.settings.widget.SettingsAppWidgetProvider$GpsStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.widget.SettingsAppWidgetProvider$SyncStateTracker$1: void onPostExecute(java.lang.Object)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean startPairing()> (2)
<com.android.settings.bluetooth.BluetoothPairingDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (2)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onActionIntentReconnectAlarm(android.content.Intent)> (1)
<com.android.internal.telephony.DataConnectionTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetDataEnabled(boolean)> (3)
<com.android.internal.telephony.DataConnectionTracker: void onSetInternalDataEnabled(boolean)> (3)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.phone.PhoneUtils: void setAudioMode()> (4)
<com.android.phone.PhoneUtils: void switchHoldingAndActive(com.android.internal.telephony.Call)> (6)
<com.android.phone.OtaUtils: void otaShowProgramFailure(int)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void closeDialer(boolean)> (13)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerClosed()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.SendTransaction: void notifyObservers()> (2)
<com.android.mms.transaction.Transaction: void notifyObservers()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void pair()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean ensurePaired()> (3)
<com.android.internal.telephony.DataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.phone.PhoneUtils: boolean answerCall(com.android.internal.telephony.Call)> (8)
<com.android.phone.PhoneUtils: int placeCall(android.content.Context,com.android.internal.telephony.Phone,java.lang.String,android.net.Uri,boolean,android.net.Uri)> (3)
<com.android.phone.Ringer: void stopRing()> (4)
<com.android.phone.BluetoothHandsfree$17: android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])> (1)
<com.android.phone.InCallScreen: boolean handleCallKey()> (1)
<com.android.phone.InCallScreen: void internalSwapCalls()> (3)
<com.android.phone.InCallScreen: void onHoldClick()> (2)
<com.android.phone.PhoneUtils: void mergeCalls(com.android.internal.telephony.CallManager)> (4)
<com.android.phone.PhoneUtils: void sendEmptyFlash(com.android.internal.telephony.Phone)> (1)
<com.android.phone.OtaUtils: void otaShowSuccessFailure()> (1)
<com.android.phone.DTMFTwelveKeyDialer: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void clearInCallScreenReference()> (1)
<com.android.phone.InCallScreen: void onShowHideDialpad()> (2)
<com.android.phone.InCallScreen: void updateDialpadVisibility()> (4)
<com.android.phone.OtaUtils: void otaShowProgramFailureDialog()> (1)
<com.android.phone.OtaUtils: void otaShowProgramSuccessDialog()> (1)
<com.android.phone.OtaUtils: void otaShowSpcErrorNotice(int)> (2)
<com.android.mms.transaction.NotificationTransaction: void run()> (1)
<com.android.mms.transaction.ReadRecTransaction: void process()> (1)
<com.android.mms.transaction.RetrieveTransaction: void run()> (1)
<com.android.mms.transaction.SendTransaction: void run()> (1)
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.phone.BluetoothHandsfree$4: android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)> (1)
<com.android.phone.InCallScreen: void internalAnswerCall()> (4)
<com.android.phone.PhoneInterfaceManager: void answerRingingCallInternal()> (1)
<com.android.phone.PhoneUtils: boolean answerAndEndActive(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> (5)
<com.android.phone.PhoneUtils: boolean answerAndEndHolding(com.android.internal.telephony.CallManager,com.android.internal.telephony.Call)> ()
<com.android.phone.PhoneUtils: boolean handleHeadsetHook(com.android.internal.telephony.Phone,android.view.KeyEvent)> (1)
<com.android.phone.OtaUtils: int startNonInteractiveOtasp(android.content.Context)> (1)
<com.android.phone.CallNotifier: void silenceRinger()> (3)
<com.android.phone.InCallScreen: boolean onKeyDown(int,android.view.KeyEvent)> (3)
<com.android.phone.PhoneUtils: void mergeCalls()> (1)
<com.android.phone.OutgoingCallBroadcaster: void onCreate(android.os.Bundle)> (1)
<com.android.phone.DTMFTwelveKeyDialerView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.phone.InCallScreen: void onDestroy()> (1)
<com.android.phone.InCallScreen: void onDialerOpen()> (1)
<com.android.phone.OtaUtils: void onOtaProvisionStatusChanged(android.os.AsyncResult)> (2)
<com.android.mms.transaction.Transaction: void process()> (1)
<com.android.phone.PhoneInterfaceManager: void access$000(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.InCallScreen: void internalAnswerAndEnd()> (1)
<com.android.phone.PhoneApp$MediaButtonBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.InCallScreenShowActivation: void onCreate(android.os.Bundle)> (1)
<com.android.phone.PhoneInterfaceManager: void silenceRingerInternal()> (1)
<com.android.phone.InCallMenuView: boolean dispatchKeyEvent(android.view.KeyEvent)> (2)
<com.android.phone.DTMFTwelveKeyDialer: void onDialerOpen()> (2)
<com.android.phone.PhoneApp: void handleOtaEvents(android.os.Message)> (1)
<com.android.phone.PhoneInterfaceManager: void access$100(com.android.phone.PhoneInterfaceManager)> (1)
<com.android.phone.DTMFTwelveKeyDialer: void onDrawerOpened()> (1)
<com.android.phone.DTMFTwelveKeyDialer: void openDialer(boolean)> (2)
<android.server.BluetoothService: boolean isEnabled()> (9)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetooth$Stub: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth: boolean isEnabled()> (1)
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> (12)
<com.android.bluetooth.opp.BluetoothOppManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void startListenerDelayed()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void updateNotificationWhenBtDisabled()> (3)
<com.android.phone.BluetoothHeadsetService: void onStart(android.content.Intent,int)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean isEnabled()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void <init>(android.content.Context)> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void onCreate(android.os.Bundle)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearAllDownloads()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void access$000(com.android.bluetooth.opp.BluetoothOppTransferHistory)> (1)
<com.android.systemui.statusbar.StatusBar: void start()> (3)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<android.server.BluetoothService: int getBluetoothState()> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBluetoothState()> ()
<android.bluetooth.IBluetooth$Stub: int getBluetoothState()> (2)
<android.bluetooth.IBluetooth: int getBluetoothState()> (2)
<android.bluetooth.BluetoothAdapter: int getState()> (21)
<android.bluetooth.BluetoothA2dp: boolean isEnabled()> (11)
<android.bluetooth.BluetoothAdapter: android.util.Pair readOutOfBandData()> ()
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> (2)
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> (3)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: int getConnectionState()> ()
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> (4)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothHeadset: boolean isEnabled()> (20)
<android.bluetooth.BluetoothInputDevice: boolean isEnabled()> (7)
<android.bluetooth.BluetoothPan: boolean isEnabled()> (5)
<com.android.settings.bluetooth.LocalBluetoothAdapter: int getState()> (1)
<com.android.settings.TetherSettings: void updateBluetoothState(java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (5)
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> (2)
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void cancelDiscovery()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void stopScanning()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean isDiscovering()> (3)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void startScanning(boolean)> (5)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setName(java.lang.String)> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: boolean setScanMode(int,int)> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setScanMode(int)> (1)
<android.server.BluetoothA2dpService: void adjustOtherSinkPriorities(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void adjustOtherHeadsetPriorities(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService: void adjustPriorities()> (1)
<com.android.settings.bluetooth.LocalBluetoothAdapter: java.util.Set getBondedDevices()> (2)
<com.android.settings.bluetooth.LocalBluetoothAdapter: void setDiscoverableTimeout(int)> (1)
<android.bluetooth.BluetoothHeadset: boolean cancelConnectThread()> (1)
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean setAudioState(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (4)
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (6)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (8)
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> (13)
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (3)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (6)
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> (3)
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> (4)
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.settings.TetherSettings: void updateState(java.lang.String[],java.lang.String[],java.lang.String[])> (2)
<com.android.settings.bluetooth.A2dpProfile: boolean isA2dpPlaying()> (1)
<com.android.settings.bluetooth.A2dpProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.settings.bluetooth.A2dpProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.A2dpProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothEventLoop: boolean isOtherSinkInNonDisconnectedState(java.lang.String)> (1)
<com.android.settings.bluetooth.A2dpProfile: java.util.List getConnectedDevices()> (1)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onPause()> (6)
<com.android.settings.bluetooth.BluetoothFindNearby: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.DevicePickerFragment: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothNamePreference: boolean persistString(java.lang.String)> (3)
<com.android.settings.bluetooth.RequestPermissionActivity: void proceedAndFinish()> (4)
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.phone.BluetoothHeadsetService: void access$1000(com.android.phone.BluetoothHeadsetService)> (1)
<com.android.settings.bluetooth.DockService: boolean hasOtherConnectedDevices(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDeviceProfileState: void cancelCommand(int)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: void dumpHeadsetService(java.io.PrintWriter)> (1)
<com.android.phone.BluetoothHandsfree$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.phone.BluetoothHandsfree: void setAudioState(int,android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.HeadsetProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.media.AudioService: void checkScoAudioState()> (2)
<com.android.phone.BluetoothHandsfree: int getAudioState(android.bluetooth.BluetoothDevice)> (2)
<com.android.internal.os.BatteryStatsImpl: int getCurrentBluetoothPingCount()> (3)
<android.server.BluetoothService: void dumpHeadsetConnectionState(java.io.PrintWriter,android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.InCallScreen: void dumpBluetoothState()> ()
<com.android.settings.bluetooth.HeadsetProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDeviceProfileState: void handleConnectionOfOtherProfiles(int)> (1)
<com.android.settings.bluetooth.HeadsetProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HeadsetProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<android.media.AudioService$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.phone.InCallScreen: boolean isBluetoothAvailable()> (5)
<com.android.settings.bluetooth.HidProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.server.BluetoothService: void dumpInputDeviceProfile(java.io.PrintWriter)> (1)
<com.android.settings.bluetooth.HidProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.HidProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: void dumpPanProfile(java.io.PrintWriter)> (1)
<com.android.settings.bluetooth.PanProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.PanProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.TetherSettings: void access$100(com.android.settings.TetherSettings,java.lang.String[],java.lang.String[],java.lang.String[])> (1)
<com.android.settings.TetherSettings: void updateState()> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: void setPreferred(android.bluetooth.BluetoothDevice,boolean)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getConnectionStatus(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getSummaryResourceForDevice(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.LocalBluetoothProfile: boolean isPreferred(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.LocalBluetoothProfile: int getPreferred(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothFindNearby: void onPause()> (4)
<com.android.settings.bluetooth.BluetoothSettings: void onPause()> (4)
<com.android.settings.bluetooth.DevicePickerFragment: void onPause()> (4)
<com.android.settings.SettingsPreferenceFragment: void onPause()> (18)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void onBluetoothStateChanged(int)> (4)
<com.android.settings.bluetooth.RequestPermissionActivity: void access$200(com.android.settings.bluetooth.RequestPermissionActivity)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity: void onClick(android.content.DialogInterface,int)> (1)
<android.server.BluetoothA2dpService: void access$300(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.phone.BluetoothHandsfree: void access$700(com.android.phone.BluetoothHandsfree,int,android.bluetooth.BluetoothDevice)> (3)
<com.android.phone.BluetoothHandsfree: void closeConnectedSco()> (2)
<android.media.AudioService: void access$1300(android.media.AudioService)> (2)
<com.android.phone.BluetoothHandsfree: int access$4400(com.android.phone.BluetoothHandsfree,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> (3)
<com.android.internal.os.BatteryStatsImpl: void doUnplugLocked(long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setBtHeadset(android.bluetooth.BluetoothHeadset)> (2)
<com.android.phone.InCallControlState: void update()> (1)
<com.android.settings.TetherSettings: void access$200(com.android.settings.TetherSettings)> (1)
<com.android.settings.TetherSettings: void onStart()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getProfileConnectionState(com.android.settings.bluetooth.LocalBluetoothProfile)> (4)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfilePreference(android.preference.Preference,com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: boolean getAutoConnect(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.DockService: java.lang.CharSequence[] initBtSettings(android.bluetooth.BluetoothDevice,int,boolean)> (2)
<com.android.settings.AccessibilitySettings: void onPause()> (3)
<com.android.settings.accounts.AccountPreferenceBase: void onPause()> (5)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onPause()> (3)
<com.android.settings.DateTimeSettings: void onPause()> (3)
<com.android.settings.deviceinfo.Memory: void onPause()> (3)
<com.android.settings.DisplaySettings: void onPause()> (3)
<com.android.settings.DockSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndLanguageSettings: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodAndSubtypeEnabler: void onPause()> (3)
<com.android.settings.inputmethod.InputMethodConfig: void onPause()> (3)
<com.android.settings.SoundSettings: void onPause()> (3)
<com.android.settings.TextToSpeechSettings: void onPause()> (3)
<com.android.settings.vpn.VpnSettings: void onPause()> (3)
<com.android.settings.wifi.WifiSettings: void onPause()> (3)
<com.android.settings.WirelessSettings: void onPause()> (3)
<com.android.settings.bluetooth.BluetoothCallback: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void onBluetoothStateChanged(int)> (1)
<com.android.settings.bluetooth.RequestPermissionActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread: void connectSco()> (1)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void connectSco()> (1)
<com.android.phone.BluetoothHandsfree: void access$1100(com.android.phone.BluetoothHandsfree)> (2)
<com.android.internal.os.BatteryStatsImpl: void doPlugLocked(long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelLocked(android.os.Parcel,boolean,int)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void addBluetoothUsage(long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBatteryLocked(boolean,int,int)> (2)
<com.android.server.am.BatteryStatsService$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> (2)
<com.android.phone.InCallScreen: com.android.phone.InCallControlState getUpdatedInCallControlState()> (2)
<com.android.settings.SettingsPreferenceFragment: void onStart()> (5)
<com.android.settings.bluetooth.BluetoothDevicePreference: int getConnectionSummary()> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isBusy()> (3)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isConnectedProfile(com.android.settings.bluetooth.LocalBluetoothProfile)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: boolean isConnected()> (3)
<com.android.settings.bluetooth.DeviceProfilesSettings: android.preference.Preference createProfilePreference(com.android.settings.bluetooth.LocalBluetoothProfile)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refreshProfiles()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onClick(android.view.View)> (1)
<com.android.settings.bluetooth.DockService: void createDialog(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.settings.accounts.AccountSyncSettings: void onPause()> (4)
<com.android.settings.accounts.ManageAccountsSettings: void onPause()> (4)
<com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread: void run()> (2)
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void shutdown()> (1)
<com.android.phone.BluetoothHandsfree$SignalScoCloseThread: void shutdown()> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelWithoutUids(android.os.Parcel,int)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void processMiscUsage()> (1)
<com.android.internal.os.BatteryStatsImpl: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int,int)> ()
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothOn()> ()
<com.android.internal.app.IBatteryStats$Stub: void noteBluetoothOn()> (2)
<com.android.phone.InCallMenu: boolean updateItems(com.android.internal.telephony.CallManager)> (4)
<com.android.phone.InCallTouchUi: void updateInCallControls(com.android.internal.telephony.Phone)> (1)
<com.android.settings.SecuritySettings: void onStart()> (3)
<com.android.settings.TextToSpeechSettings: void onStart()> (3)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onDeviceAttributesChanged()> (2)
<com.android.settings.bluetooth.BluetoothDevicePreference: void onBindView(android.view.View)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.DeviceProfilesSettings: void addPreferencesForProfiles()> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void refresh()> (2)
<com.android.phone.BluetoothHandsfree: void onBluetoothEnabled()> (2)
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.settings.fuelgauge.PowerUsageSummary: void refreshStats()> (2)
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats: void noteBluetoothOn()> (1)
<com.android.phone.InCallScreen: android.view.View onCreatePanelView(int)> (1)
<com.android.phone.InCallScreen: void updateMenuItems()> (2)
<com.android.phone.InCallTouchUi: void updateState(com.android.internal.telephony.CallManager)> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: void <init>(android.content.Context,com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice$Callback: void onDeviceAttributesChanged()> (1)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(android.preference.Preference)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: int compareTo(java.lang.Object)> (1)
<com.android.settings.bluetooth.DeviceProfilesSettings: void onDeviceAttributesChanged()> (1)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.settings.fuelgauge.PowerUsageSummary: void onResume()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int)> ()
<com.android.internal.app.IBatteryStats$Stub: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.phone.OtaUtils: void otaShowInProgressScreen()> (3)
<com.android.phone.OtaUtils: void otaShowListeningScreen()> (2)
<com.android.phone.InCallScreen: void updateInCallTouchUi()> (6)
<com.android.settings.bluetooth.DeviceListPreferenceFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (4)
<com.android.settings.bluetooth.CachedBluetoothDevice: void dispatchAttributesChanged()> (9)
<com.android.settings.bluetooth.BluetoothDevicePreference: int compareTo(java.lang.Object)> (1)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> (1)
<com.android.internal.app.IBatteryStats: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.phone.OtaUtils: void updateOtaspProgress()> (1)
<com.android.phone.InCallScreen: void access$2200(com.android.phone.InCallScreen)> (2)
<com.android.settings.bluetooth.BluetoothFindNearby: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothSettings: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<com.android.settings.bluetooth.DevicePickerFragment: void createDevicePreference(com.android.settings.bluetooth.CachedBluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void refresh()> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setBtClass(android.bluetooth.BluetoothClass)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setName(java.lang.String)> (2)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setRssi(short)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: void setVisible(boolean)> (3)
<com.android.settings.fuelgauge.PowerUsageSummary: void load()> (1)
<com.android.server.BatteryService: void processValues()> (1)
<com.android.phone.InCallScreen: void requestUpdateTouchUi()> (3)
<com.android.settings.bluetooth.BluetoothSettings: void onDeviceBondStateChanged(com.android.settings.bluetooth.CachedBluetoothDevice,int)> ()
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean onDeviceDisappeared(com.android.settings.bluetooth.CachedBluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: void onScanningStateChanged(boolean)> (1)
<com.android.server.BatteryService: void update()> (2)
<com.android.phone.PhoneApp: void updateInCallScreenTouchUi()> (3)
<com.android.settings.bluetooth.BluetoothEventManager$DeviceDisappearedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$DockEventHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.BluetoothEventManager$ScanningStateChangedHandler: void onReceive(android.content.Context,android.content.Intent,android.bluetooth.BluetoothDevice)> (1)
<com.android.server.BatteryService: void access$000(com.android.server.BatteryService)> (2)
<com.android.server.BatteryService: void <init>(android.content.Context,com.android.server.LightsService)> (1)
<com.android.phone.CallNotifier: void onCdmaCallWaiting(android.os.AsyncResult)> (1)
<com.android.server.BatteryService$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.BatteryService$2: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<android.server.BluetoothService: boolean setPropertyString(java.lang.String,java.lang.String)> (1)
<android.server.BluetoothService: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.server.BluetoothService: boolean setPropertyInteger(java.lang.String,int)> (1)
<android.server.BluetoothService: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<android.server.BluetoothService: boolean setPropertyBoolean(java.lang.String,boolean)> (1)
<android.server.BluetoothService: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth: boolean setScanMode(int,int)> (1)
<android.server.BluetoothService: boolean isDiscovering()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isDiscovering()> ()
<android.bluetooth.IBluetooth$Stub: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth: boolean isDiscovering()> (1)
<android.server.BluetoothService: byte[] readOutOfBandData()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: byte[] readOutOfBandData()> ()
<android.bluetooth.IBluetooth$Stub: byte[] readOutOfBandData()> (2)
<android.bluetooth.IBluetooth: byte[] readOutOfBandData()> (1)
<android.server.BluetoothService: java.lang.String[] listBonds()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String[] listBonds()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String[] listBonds()> (2)
<android.bluetooth.IBluetooth: java.lang.String[] listBonds()> (1)
<android.server.BluetoothService: int getBondState(java.lang.String)> (8)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: int getBondState(java.lang.String)> (2)
<android.server.BluetoothService: boolean connectHeadset(java.lang.String)> (2)
<android.server.BluetoothService: boolean connectSink(java.lang.String)> (1)
<android.server.BluetoothService: boolean disconnectHeadset(java.lang.String)> (2)
<android.server.BluetoothService: boolean disconnectSink(java.lang.String)> (1)
<android.bluetooth.IBluetooth: int getBondState(java.lang.String)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean connectHeadset(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean connectHeadset(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disconnectHeadset(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean disconnectHeadset(java.lang.String)> (2)
<android.bluetooth.BluetoothDevice: int getBondState()> (3)
<android.bluetooth.IBluetooth: boolean connectHeadset(java.lang.String)> (1)
<android.bluetooth.IBluetooth: boolean disconnectHeadset(java.lang.String)> (1)
<com.android.settings.bluetooth.BluetoothDeviceFilter$BondedDeviceFilter: boolean matches(android.bluetooth.BluetoothDevice)> (1)
<com.android.settings.bluetooth.CachedBluetoothDevice: int getBondState()> (9)
<com.android.phone.BluetoothHeadsetService$6: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<com.android.settings.bluetooth.CachedBluetoothDeviceManager: boolean checkForDeviceRemoval(com.android.settings.bluetooth.CachedBluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> ()
<android.bluetooth.IBluetooth$Stub: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (2)
<android.bluetooth.IBluetooth: int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)> (2)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> ()
<android.server.BluetoothService: void removeServiceRecord(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: void removeServiceRecord(int)> ()
<android.bluetooth.IBluetooth$Stub: void removeServiceRecord(int)> (2)
<android.bluetooth.IBluetooth: void removeServiceRecord(int)> (1)
<android.server.BluetoothService: boolean isTetheringOn()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isTetheringOn()> ()
<android.bluetooth.IBluetooth$Stub: boolean isTetheringOn()> (2)
<android.bluetooth.IBluetooth: boolean isTetheringOn()> (1)
<android.bluetooth.BluetoothPan: boolean isTetheringOn()> (2)
<android.server.BluetoothService: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: java.util.List getConnectedPanDevices()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: java.util.List getConnectedPanDevices()> ()
<android.bluetooth.IBluetooth$Stub: java.util.List getConnectedPanDevices()> (2)
<android.bluetooth.IBluetooth: java.util.List getConnectedPanDevices()> (1)
<android.server.BluetoothService: java.util.List getPanDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.util.List getPanDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetooth$Stub: java.util.List getPanDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetooth: java.util.List getPanDevicesMatchingConnectionStates(int[])> (1)
<android.server.BluetoothService: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothService: java.util.List getConnectedInputDevices()> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: java.util.List getConnectedInputDevices()> ()
<android.bluetooth.IBluetooth$Stub: java.util.List getConnectedInputDevices()> (2)
<android.bluetooth.IBluetooth: java.util.List getConnectedInputDevices()> (1)
<android.server.BluetoothService: java.util.List getInputDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.util.List getInputDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetooth$Stub: java.util.List getInputDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetooth: java.util.List getInputDevicesMatchingConnectionStates(int[])> (1)
<android.server.BluetoothService: int getInputDevicePriority(android.bluetooth.BluetoothDevice)> (4)
<android.bluetooth.IBluetooth$Stub$Proxy: int getInputDevicePriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getInputDevicePriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getInputDevicePriority(android.bluetooth.BluetoothDevice)> (1)
<android.server.BluetoothA2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> (8)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.server.BluetoothA2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> (5)
<android.bluetooth.IBluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.server.BluetoothA2dpService: java.util.List getConnectedDevices()> (4)
<android.bluetooth.IBluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothA2dp: java.util.List getConnectedDevices()> (1)
<android.server.BluetoothA2dpService: int getPriority(android.bluetooth.BluetoothDevice)> (10)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: int getState()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothPbap$Stub: int getState()> (2)
<android.bluetooth.IBluetoothPbap: int getState()> (1)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPbap: int getState()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.phone.BluetoothHeadsetService$6: int getConnectionState(android.bluetooth.BluetoothDevice)> (3)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<com.android.phone.BluetoothHeadsetService$6: java.util.List getDevicesMatchingConnectionStates(int[])> (3)
<android.bluetooth.IBluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.phone.BluetoothHeadsetService$6: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothHeadset: java.util.List getConnectedDevices()> (1)
<com.android.phone.BluetoothHeadsetService$6: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.phone.BluetoothHeadsetService$6: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> (1)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)> (7)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createScoSocket()> (1)
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)> (4)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)> ()
<com.android.phone.BluetoothHandsfree$ScoSocketConnectThread: void <init>(com.android.phone.BluetoothHandsfree,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int)> (2)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingScoOn()> (1)
<com.android.bluetooth.opp.BluetoothOppRfcommListener$1: void run()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean initSocket()> (1)
<com.android.phone.BluetoothHandsfree$IncomingScoAcceptThread: void <init>(com.android.phone.BluetoothHandsfree)> (1)
<android.bluetooth.BluetoothSocket: void initSocketNative()> (1)
Permission:android.permission.RECORD_AUDIO
125 Callers:
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService: boolean access$600(android.speech.RecognitionService,android.speech.IRecognitionListener)> (3)
<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService$RecognitionServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.SpeechRecognizer: void handleCancelMessage()> (1)
<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void handleStopMessage()> (1)
<android.speech.SpeechRecognizer: void access$200(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void access$000(android.speech.SpeechRecognizer,android.content.Intent)> (2)
<android.speech.SpeechRecognizer: void access$100(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void putMessage(android.os.Message)> (4)
<android.speech.SpeechRecognizer: void cancel()> (1)
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> (1)
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void stopListening()> ()
<com.android.inputmethod.voice.VoiceInput: void reset()> (4)
<com.android.inputmethod.voice.VoiceInput: void <init>(android.content.Context,com.android.inputmethod.voice.VoiceInput$UiListener)> (1)
<com.android.inputmethod.voice.VoiceInput: void startListeningAfterInitialization(com.android.inputmethod.voice.FieldContext)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateSubtype(android.view.inputmethod.InputMethodSubtype)> (3)
<com.android.inputmethod.voice.VoiceIMEConnector$6: void onPostExecute(java.lang.Boolean)> (1)
<com.android.inputmethod.voice.VoiceInput: void cancel()> (5)
<com.android.inputmethod.voice.VoiceInput: void startListening(com.android.inputmethod.voice.FieldContext,boolean)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void initInternal(com.android.inputmethod.latin.LatinIME,android.content.SharedPreferences,com.android.inputmethod.latin.LatinIME$UIHandler)> (1)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateAllParameters()> (2)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateEnabledSubtypes()> (1)
<com.android.inputmethod.voice.VoiceIMEConnector$6: void onPostExecute(java.lang.Object)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void flushVoiceInputLogs(boolean)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void handleClose()> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void hideVoiceWindow(boolean)> (1)
<com.android.inputmethod.voice.VoiceInput: void onClick(android.view.View)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void reallyStartListening(boolean)> (2)
<com.android.inputmethod.voice.VoiceIMEConnector: com.android.inputmethod.voice.VoiceIMEConnector init(com.android.inputmethod.latin.LatinIME,android.content.SharedPreferences,com.android.inputmethod.latin.LatinIME$UIHandler)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void init(com.android.inputmethod.latin.LatinIME,android.content.SharedPreferences)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateParametersOnStartInputView()> (2)
<com.android.inputmethod.latin.LatinIME: void onFinishInput()> (1)
<com.android.inputmethod.latin.LatinIME: void handleClose()> (3)
<com.android.inputmethod.latin.LatinIME: void hideWindow()> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void access$400(com.android.inputmethod.voice.VoiceIMEConnector,boolean)> (1)
<com.android.inputmethod.voice.VoiceIMEConnector: void startListening(boolean,android.os.IBinder)> (2)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void launchSettings(java.lang.Class)> (2)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int[],int,int)> (2)
<com.android.inputmethod.latin.LatinIME: void onSwipeDown()> (1)
<com.android.inputmethod.voice.VoiceIMEConnector$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void triggerVoiceIME()> (2)
<com.android.inputmethod.voice.VoiceIMEConnector: void onStartInputView(android.os.IBinder)> (1)
<com.android.inputmethod.latin.LatinIME: void launchDebugSettings()> ()
<com.android.inputmethod.latin.LatinIME: void launchSettings()> (4)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int[],int,int)> (6)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,java.lang.CharSequence)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onSwipeDown()> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: boolean setVoiceInput(com.android.inputmethod.voice.VoiceInput)> (1)
<com.android.inputmethod.latin.LatinIME$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyLongPressed()> (1)
<com.android.inputmethod.latin.LatinIME: void onSettingsKeyPressed()> (1)
<com.android.inputmethod.keyboard.KeyboardView$2: void onCodeInput(int,int[],int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.KeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean invokeOnKey(int)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int[],int,int)> (1)
<com.android.inputmethod.latin.CandidateView: void onClick(android.view.View)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void onSwipeDown()> (2)
<com.android.inputmethod.voice.VoiceIMEConnector: void onAttachedToWindow()> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onDoubleTapShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onLongPressShiftKey(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(int,int,int)> (2)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onSwipeDown()> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void onAttachedToWindow()> (1)
<com.android.inputmethod.keyboard.KeyboardView$1: boolean onDoubleTapEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$1200(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.LatinKeyboardView: void access$400(com.android.inputmethod.keyboard.KeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressShiftTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onLongPress(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean handleSuddenJump(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void repeatKey(int)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(int)> (2)
<com.android.inputmethod.keyboard.KeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventForRelease(int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (2)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startKeyRepeatTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.KeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean openPopupIfRequired(int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onTouchEvent(int,int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.PointerTracker,long)> (2)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.PointerTracker,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTrackerQueue)> (2)
<com.android.inputmethod.keyboard.LatinKeyboardView: boolean access$300(com.android.inputmethod.keyboard.KeyboardView,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.KeyboardView$UIHandler: void startLongPressTimer(long,int,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTrackerQueue: void releaseAllPointers(long)> (1)
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> (2)
<com.android.camera.VideoCamera: void initializeRecorder()> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.camera.VideoCamera: void startVideoRecording()> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<com.android.camera.VideoCamera: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.ShutterButton$OnShutterButtonListener: void onShutterButtonClick(com.android.camera.ShutterButton)> (1)
<com.android.camera.ShutterButton: boolean performClick()> (3)
<com.android.camera.VideoCamera: boolean onKeyDown(int,android.view.KeyEvent)> (2)
